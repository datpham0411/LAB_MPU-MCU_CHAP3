
STM32IDE_CHAP3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003390  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800349c  0800349c  0001349c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034c0  080034c0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080034c0  080034c0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034c0  080034c0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034c0  080034c0  000134c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034c4  080034c4  000134c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080034c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000060  08003528  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003528  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009747  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cdc  00000000  00000000  000297d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002b4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002bf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d79  00000000  00000000  0002c888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbe3  00000000  00000000  00043601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082716  00000000  00000000  0004f1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d18fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002910  00000000  00000000  000d1950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08003484 	.word	0x08003484

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08003484 	.word	0x08003484

0800014c <isButton1Pressed>:
int KeyReg3Button1 = NORMAL_STATE;

int TimerForKeyPressButton1 = 200;
int button1_flag = 0;

int isButton1Pressed() {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1) {
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	2000007c 	.word	0x2000007c

08000170 <subKeyProcessButton1>:

void subKeyProcessButton1(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	button1_flag = 1;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <subKeyProcessButton1+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	2000007c 	.word	0x2000007c

08000188 <getKeyInputButton1>:

void getKeyInputButton1() {
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	KeyReg0Button1 = KeyReg1Button1;
 800018c:	4b21      	ldr	r3, [pc, #132]	; (8000214 <getKeyInputButton1+0x8c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a21      	ldr	r2, [pc, #132]	; (8000218 <getKeyInputButton1+0x90>)
 8000192:	6013      	str	r3, [r2, #0]
	KeyReg1Button1 = KeyReg2Button1;
 8000194:	4b21      	ldr	r3, [pc, #132]	; (800021c <getKeyInputButton1+0x94>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a1e      	ldr	r2, [pc, #120]	; (8000214 <getKeyInputButton1+0x8c>)
 800019a:	6013      	str	r3, [r2, #0]
	KeyReg2Button1 = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 800019c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a0:	481f      	ldr	r0, [pc, #124]	; (8000220 <getKeyInputButton1+0x98>)
 80001a2:	f002 f943 	bl	800242c <HAL_GPIO_ReadPin>
 80001a6:	4603      	mov	r3, r0
 80001a8:	461a      	mov	r2, r3
 80001aa:	4b1c      	ldr	r3, [pc, #112]	; (800021c <getKeyInputButton1+0x94>)
 80001ac:	601a      	str	r2, [r3, #0]

	if ((KeyReg0Button1 == KeyReg1Button1) && (KeyReg1Button1 == KeyReg2Button1)) {
 80001ae:	4b1a      	ldr	r3, [pc, #104]	; (8000218 <getKeyInputButton1+0x90>)
 80001b0:	681a      	ldr	r2, [r3, #0]
 80001b2:	4b18      	ldr	r3, [pc, #96]	; (8000214 <getKeyInputButton1+0x8c>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	429a      	cmp	r2, r3
 80001b8:	d129      	bne.n	800020e <getKeyInputButton1+0x86>
 80001ba:	4b16      	ldr	r3, [pc, #88]	; (8000214 <getKeyInputButton1+0x8c>)
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	4b17      	ldr	r3, [pc, #92]	; (800021c <getKeyInputButton1+0x94>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	d123      	bne.n	800020e <getKeyInputButton1+0x86>
		if (KeyReg3Button1 != KeyReg2Button1) {
 80001c6:	4b17      	ldr	r3, [pc, #92]	; (8000224 <getKeyInputButton1+0x9c>)
 80001c8:	681a      	ldr	r2, [r3, #0]
 80001ca:	4b14      	ldr	r3, [pc, #80]	; (800021c <getKeyInputButton1+0x94>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	429a      	cmp	r2, r3
 80001d0:	d00d      	beq.n	80001ee <getKeyInputButton1+0x66>
			KeyReg3Button1 = KeyReg2Button1;
 80001d2:	4b12      	ldr	r3, [pc, #72]	; (800021c <getKeyInputButton1+0x94>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a13      	ldr	r2, [pc, #76]	; (8000224 <getKeyInputButton1+0x9c>)
 80001d8:	6013      	str	r3, [r2, #0]
			if (KeyReg2Button1 == PRESSED_STATE) {
 80001da:	4b10      	ldr	r3, [pc, #64]	; (800021c <getKeyInputButton1+0x94>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d115      	bne.n	800020e <getKeyInputButton1+0x86>
				// TODO
				subKeyProcessButton1();
 80001e2:	f7ff ffc5 	bl	8000170 <subKeyProcessButton1>
				TimerForKeyPressButton1 = 200;
 80001e6:	4b10      	ldr	r3, [pc, #64]	; (8000228 <getKeyInputButton1+0xa0>)
 80001e8:	22c8      	movs	r2, #200	; 0xc8
 80001ea:	601a      	str	r2, [r3, #0]
					KeyReg3Button1 = NORMAL_STATE;
				}
			}
		}
	}
}
 80001ec:	e00f      	b.n	800020e <getKeyInputButton1+0x86>
			--TimerForKeyPressButton1;
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <getKeyInputButton1+0xa0>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	4a0c      	ldr	r2, [pc, #48]	; (8000228 <getKeyInputButton1+0xa0>)
 80001f6:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPressButton1 == 0) {
 80001f8:	4b0b      	ldr	r3, [pc, #44]	; (8000228 <getKeyInputButton1+0xa0>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d106      	bne.n	800020e <getKeyInputButton1+0x86>
				if (KeyReg2Button1 == PRESSED_STATE) {
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <getKeyInputButton1+0x94>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d102      	bne.n	800020e <getKeyInputButton1+0x86>
					KeyReg3Button1 = NORMAL_STATE;
 8000208:	4b06      	ldr	r3, [pc, #24]	; (8000224 <getKeyInputButton1+0x9c>)
 800020a:	2201      	movs	r2, #1
 800020c:	601a      	str	r2, [r3, #0]
}
 800020e:	bf00      	nop
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	20000004 	.word	0x20000004
 8000218:	20000000 	.word	0x20000000
 800021c:	20000008 	.word	0x20000008
 8000220:	40011000 	.word	0x40011000
 8000224:	2000000c 	.word	0x2000000c
 8000228:	20000010 	.word	0x20000010

0800022c <isButton2Pressed>:
int KeyReg3Button2 = NORMAL_STATE;

int TimerForKeyPressButton2 = 200;
int button2_flag = 0;

int isButton2Pressed() {
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
	if(button2_flag == 1) {
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <isButton2Pressed+0x20>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2b01      	cmp	r3, #1
 8000236:	d104      	bne.n	8000242 <isButton2Pressed+0x16>
		button2_flag = 0;
 8000238:	4b04      	ldr	r3, [pc, #16]	; (800024c <isButton2Pressed+0x20>)
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
		return 1;
 800023e:	2301      	movs	r3, #1
 8000240:	e000      	b.n	8000244 <isButton2Pressed+0x18>
	}
	return 0;
 8000242:	2300      	movs	r3, #0
}
 8000244:	4618      	mov	r0, r3
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	20000080 	.word	0x20000080

08000250 <subKeyProcessButton2>:

void subKeyProcessButton2(){
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
	button2_flag = 1;
 8000254:	4b03      	ldr	r3, [pc, #12]	; (8000264 <subKeyProcessButton2+0x14>)
 8000256:	2201      	movs	r2, #1
 8000258:	601a      	str	r2, [r3, #0]
}
 800025a:	bf00      	nop
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	20000080 	.word	0x20000080

08000268 <getKeyInputButton2>:

void getKeyInputButton2() {
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	KeyReg0Button2 = KeyReg1Button2;
 800026c:	4b21      	ldr	r3, [pc, #132]	; (80002f4 <getKeyInputButton2+0x8c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a21      	ldr	r2, [pc, #132]	; (80002f8 <getKeyInputButton2+0x90>)
 8000272:	6013      	str	r3, [r2, #0]
	KeyReg1Button2 = KeyReg2Button2;
 8000274:	4b21      	ldr	r3, [pc, #132]	; (80002fc <getKeyInputButton2+0x94>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a1e      	ldr	r2, [pc, #120]	; (80002f4 <getKeyInputButton2+0x8c>)
 800027a:	6013      	str	r3, [r2, #0]
	KeyReg2Button2 = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 800027c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000280:	481f      	ldr	r0, [pc, #124]	; (8000300 <getKeyInputButton2+0x98>)
 8000282:	f002 f8d3 	bl	800242c <HAL_GPIO_ReadPin>
 8000286:	4603      	mov	r3, r0
 8000288:	461a      	mov	r2, r3
 800028a:	4b1c      	ldr	r3, [pc, #112]	; (80002fc <getKeyInputButton2+0x94>)
 800028c:	601a      	str	r2, [r3, #0]

	if ((KeyReg0Button2 == KeyReg1Button2) && (KeyReg1Button2 == KeyReg2Button2)) {
 800028e:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <getKeyInputButton2+0x90>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	4b18      	ldr	r3, [pc, #96]	; (80002f4 <getKeyInputButton2+0x8c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	429a      	cmp	r2, r3
 8000298:	d129      	bne.n	80002ee <getKeyInputButton2+0x86>
 800029a:	4b16      	ldr	r3, [pc, #88]	; (80002f4 <getKeyInputButton2+0x8c>)
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	4b17      	ldr	r3, [pc, #92]	; (80002fc <getKeyInputButton2+0x94>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d123      	bne.n	80002ee <getKeyInputButton2+0x86>
		if (KeyReg3Button2 != KeyReg2Button2) {
 80002a6:	4b17      	ldr	r3, [pc, #92]	; (8000304 <getKeyInputButton2+0x9c>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	4b14      	ldr	r3, [pc, #80]	; (80002fc <getKeyInputButton2+0x94>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d00d      	beq.n	80002ce <getKeyInputButton2+0x66>
			KeyReg3Button2 = KeyReg2Button2;
 80002b2:	4b12      	ldr	r3, [pc, #72]	; (80002fc <getKeyInputButton2+0x94>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a13      	ldr	r2, [pc, #76]	; (8000304 <getKeyInputButton2+0x9c>)
 80002b8:	6013      	str	r3, [r2, #0]
			if (KeyReg2Button2 == PRESSED_STATE) {
 80002ba:	4b10      	ldr	r3, [pc, #64]	; (80002fc <getKeyInputButton2+0x94>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d115      	bne.n	80002ee <getKeyInputButton2+0x86>
				// TODO
				subKeyProcessButton2();
 80002c2:	f7ff ffc5 	bl	8000250 <subKeyProcessButton2>
				TimerForKeyPressButton2 = 200;
 80002c6:	4b10      	ldr	r3, [pc, #64]	; (8000308 <getKeyInputButton2+0xa0>)
 80002c8:	22c8      	movs	r2, #200	; 0xc8
 80002ca:	601a      	str	r2, [r3, #0]
					KeyReg3Button2 = NORMAL_STATE;
				}
			}
		}
	}
}
 80002cc:	e00f      	b.n	80002ee <getKeyInputButton2+0x86>
			--TimerForKeyPressButton2;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <getKeyInputButton2+0xa0>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	3b01      	subs	r3, #1
 80002d4:	4a0c      	ldr	r2, [pc, #48]	; (8000308 <getKeyInputButton2+0xa0>)
 80002d6:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPressButton2 == 0) {
 80002d8:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <getKeyInputButton2+0xa0>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d106      	bne.n	80002ee <getKeyInputButton2+0x86>
				if (KeyReg2Button2 == PRESSED_STATE) {
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <getKeyInputButton2+0x94>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d102      	bne.n	80002ee <getKeyInputButton2+0x86>
					KeyReg3Button2 = NORMAL_STATE;
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <getKeyInputButton2+0x9c>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	601a      	str	r2, [r3, #0]
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000018 	.word	0x20000018
 80002f8:	20000014 	.word	0x20000014
 80002fc:	2000001c 	.word	0x2000001c
 8000300:	40011000 	.word	0x40011000
 8000304:	20000020 	.word	0x20000020
 8000308:	20000024 	.word	0x20000024

0800030c <isButton3Pressed>:
int KeyReg3Button3 = NORMAL_STATE;

int TimerForKeyPressButton3 = 200;
int button3_flag = 0;

int isButton3Pressed() {
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
	if(button3_flag == 1) {
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <isButton3Pressed+0x20>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d104      	bne.n	8000322 <isButton3Pressed+0x16>
		button3_flag = 0;
 8000318:	4b04      	ldr	r3, [pc, #16]	; (800032c <isButton3Pressed+0x20>)
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
		return 1;
 800031e:	2301      	movs	r3, #1
 8000320:	e000      	b.n	8000324 <isButton3Pressed+0x18>
	}
	return 0;
 8000322:	2300      	movs	r3, #0
}
 8000324:	4618      	mov	r0, r3
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	20000084 	.word	0x20000084

08000330 <subKeyProcessButton3>:

void subKeyProcessButton3(){
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	button3_flag = 1;
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <subKeyProcessButton3+0x14>)
 8000336:	2201      	movs	r2, #1
 8000338:	601a      	str	r2, [r3, #0]
}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	20000084 	.word	0x20000084

08000348 <getKeyInputButton3>:

void getKeyInputButton3() {
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	KeyReg0Button3 = KeyReg1Button3;
 800034c:	4b21      	ldr	r3, [pc, #132]	; (80003d4 <getKeyInputButton3+0x8c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a21      	ldr	r2, [pc, #132]	; (80003d8 <getKeyInputButton3+0x90>)
 8000352:	6013      	str	r3, [r2, #0]
	KeyReg1Button3 = KeyReg2Button3;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <getKeyInputButton3+0x94>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a1e      	ldr	r2, [pc, #120]	; (80003d4 <getKeyInputButton3+0x8c>)
 800035a:	6013      	str	r3, [r2, #0]
	KeyReg2Button3 = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 800035c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000360:	481f      	ldr	r0, [pc, #124]	; (80003e0 <getKeyInputButton3+0x98>)
 8000362:	f002 f863 	bl	800242c <HAL_GPIO_ReadPin>
 8000366:	4603      	mov	r3, r0
 8000368:	461a      	mov	r2, r3
 800036a:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <getKeyInputButton3+0x94>)
 800036c:	601a      	str	r2, [r3, #0]

	if ((KeyReg0Button3 == KeyReg1Button3) && (KeyReg1Button3 == KeyReg2Button3)) {
 800036e:	4b1a      	ldr	r3, [pc, #104]	; (80003d8 <getKeyInputButton3+0x90>)
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <getKeyInputButton3+0x8c>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	429a      	cmp	r2, r3
 8000378:	d129      	bne.n	80003ce <getKeyInputButton3+0x86>
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <getKeyInputButton3+0x8c>)
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <getKeyInputButton3+0x94>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	429a      	cmp	r2, r3
 8000384:	d123      	bne.n	80003ce <getKeyInputButton3+0x86>
		if (KeyReg3Button3 != KeyReg2Button3) {
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <getKeyInputButton3+0x9c>)
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <getKeyInputButton3+0x94>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	429a      	cmp	r2, r3
 8000390:	d00d      	beq.n	80003ae <getKeyInputButton3+0x66>
			KeyReg3Button3 = KeyReg2Button3;
 8000392:	4b12      	ldr	r3, [pc, #72]	; (80003dc <getKeyInputButton3+0x94>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <getKeyInputButton3+0x9c>)
 8000398:	6013      	str	r3, [r2, #0]
			if (KeyReg2Button3 == PRESSED_STATE) {
 800039a:	4b10      	ldr	r3, [pc, #64]	; (80003dc <getKeyInputButton3+0x94>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d115      	bne.n	80003ce <getKeyInputButton3+0x86>
				// TODO
				subKeyProcessButton3();
 80003a2:	f7ff ffc5 	bl	8000330 <subKeyProcessButton3>
				TimerForKeyPressButton3 = 200;
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <getKeyInputButton3+0xa0>)
 80003a8:	22c8      	movs	r2, #200	; 0xc8
 80003aa:	601a      	str	r2, [r3, #0]
					KeyReg3Button3 = NORMAL_STATE;
				}
			}
		}
	}
}
 80003ac:	e00f      	b.n	80003ce <getKeyInputButton3+0x86>
			--TimerForKeyPressButton3;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <getKeyInputButton3+0xa0>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	4a0c      	ldr	r2, [pc, #48]	; (80003e8 <getKeyInputButton3+0xa0>)
 80003b6:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPressButton3 == 0) {
 80003b8:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <getKeyInputButton3+0xa0>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d106      	bne.n	80003ce <getKeyInputButton3+0x86>
				if (KeyReg2Button3 == PRESSED_STATE) {
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <getKeyInputButton3+0x94>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d102      	bne.n	80003ce <getKeyInputButton3+0x86>
					KeyReg3Button3 = NORMAL_STATE;
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <getKeyInputButton3+0x9c>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	601a      	str	r2, [r3, #0]
}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	2000002c 	.word	0x2000002c
 80003d8:	20000028 	.word	0x20000028
 80003dc:	20000030 	.word	0x20000030
 80003e0:	40011000 	.word	0x40011000
 80003e4:	20000034 	.word	0x20000034
 80003e8:	20000038 	.word	0x20000038

080003ec <select_num>:
 */
#include "fsm_normal.h"

int color = 0;

void select_num (char group, int num) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b086      	sub	sp, #24
 80003f0:	af04      	add	r7, sp, #16
 80003f2:	4603      	mov	r3, r0
 80003f4:	6039      	str	r1, [r7, #0]
 80003f6:	71fb      	strb	r3, [r7, #7]
if (group == 'A') {
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	2b41      	cmp	r3, #65	; 0x41
 80003fc:	f040 8241 	bne.w	8000882 <select_num+0x496>
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	2b0c      	cmp	r3, #12
 8000404:	f200 83d0 	bhi.w	8000ba8 <select_num+0x7bc>
 8000408:	a201      	add	r2, pc, #4	; (adr r2, 8000410 <select_num+0x24>)
 800040a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800040e:	bf00      	nop
 8000410:	08000445 	.word	0x08000445
 8000414:	0800049f 	.word	0x0800049f
 8000418:	080004f9 	.word	0x080004f9
 800041c:	08000553 	.word	0x08000553
 8000420:	080005ad 	.word	0x080005ad
 8000424:	08000607 	.word	0x08000607
 8000428:	08000661 	.word	0x08000661
 800042c:	080006bb 	.word	0x080006bb
 8000430:	08000715 	.word	0x08000715
 8000434:	08000775 	.word	0x08000775
 8000438:	08000ba9 	.word	0x08000ba9
 800043c:	080007cf 	.word	0x080007cf
 8000440:	08000829 	.word	0x08000829
	switch (num) {
		case 0:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, ON, ON);
 8000444:	2300      	movs	r3, #0
 8000446:	9302      	str	r3, [sp, #8]
 8000448:	2300      	movs	r3, #0
 800044a:	9301      	str	r3, [sp, #4]
 800044c:	2300      	movs	r3, #0
 800044e:	9300      	str	r3, [sp, #0]
 8000450:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000454:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000458:	2180      	movs	r1, #128	; 0x80
 800045a:	48c5      	ldr	r0, [pc, #788]	; (8000770 <select_num+0x384>)
 800045c:	f000 fe50 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, ON, ON);
 8000460:	2300      	movs	r3, #0
 8000462:	9302      	str	r3, [sp, #8]
 8000464:	2300      	movs	r3, #0
 8000466:	9301      	str	r3, [sp, #4]
 8000468:	2300      	movs	r3, #0
 800046a:	9300      	str	r3, [sp, #0]
 800046c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000478:	48bd      	ldr	r0, [pc, #756]	; (8000770 <select_num+0x384>)
 800047a:	f000 fe41 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, ON, ON, OFF);
 800047e:	2301      	movs	r3, #1
 8000480:	9302      	str	r3, [sp, #8]
 8000482:	2300      	movs	r3, #0
 8000484:	9301      	str	r3, [sp, #4]
 8000486:	2300      	movs	r3, #0
 8000488:	9300      	str	r3, [sp, #0]
 800048a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800048e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000492:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000496:	48b6      	ldr	r0, [pc, #728]	; (8000770 <select_num+0x384>)
 8000498:	f000 fe32 	bl	8001100 <setColor>
			break;
 800049c:	e389      	b.n	8000bb2 <select_num+0x7c6>
		case 1:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, OFF, ON, ON);
 800049e:	2300      	movs	r3, #0
 80004a0:	9302      	str	r3, [sp, #8]
 80004a2:	2300      	movs	r3, #0
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004b2:	2180      	movs	r1, #128	; 0x80
 80004b4:	48ae      	ldr	r0, [pc, #696]	; (8000770 <select_num+0x384>)
 80004b6:	f000 fe23 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, OFF, OFF, OFF);
 80004ba:	2301      	movs	r3, #1
 80004bc:	9302      	str	r3, [sp, #8]
 80004be:	2301      	movs	r3, #1
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	9300      	str	r3, [sp, #0]
 80004c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d2:	48a7      	ldr	r0, [pc, #668]	; (8000770 <select_num+0x384>)
 80004d4:	f000 fe14 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, OFF, OFF, OFF);
 80004d8:	2301      	movs	r3, #1
 80004da:	9302      	str	r3, [sp, #8]
 80004dc:	2301      	movs	r3, #1
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	2301      	movs	r3, #1
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f0:	489f      	ldr	r0, [pc, #636]	; (8000770 <select_num+0x384>)
 80004f2:	f000 fe05 	bl	8001100 <setColor>
			break;
 80004f6:	e35c      	b.n	8000bb2 <select_num+0x7c6>
		case 2:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, ON, OFF);
 80004f8:	2301      	movs	r3, #1
 80004fa:	9302      	str	r3, [sp, #8]
 80004fc:	2300      	movs	r3, #0
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	2300      	movs	r3, #0
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000508:	f44f 7280 	mov.w	r2, #256	; 0x100
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	4898      	ldr	r0, [pc, #608]	; (8000770 <select_num+0x384>)
 8000510:	f000 fdf6 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, ON, OFF);
 8000514:	2301      	movs	r3, #1
 8000516:	9302      	str	r3, [sp, #8]
 8000518:	2300      	movs	r3, #0
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	2300      	movs	r3, #0
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052c:	4890      	ldr	r0, [pc, #576]	; (8000770 <select_num+0x384>)
 800052e:	f000 fde7 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, ON, OFF, ON);
 8000532:	2300      	movs	r3, #0
 8000534:	9302      	str	r3, [sp, #8]
 8000536:	2301      	movs	r3, #1
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2300      	movs	r3, #0
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000546:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800054a:	4889      	ldr	r0, [pc, #548]	; (8000770 <select_num+0x384>)
 800054c:	f000 fdd8 	bl	8001100 <setColor>
			break;
 8000550:	e32f      	b.n	8000bb2 <select_num+0x7c6>
		case 3:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, ON, ON);
 8000552:	2300      	movs	r3, #0
 8000554:	9302      	str	r3, [sp, #8]
 8000556:	2300      	movs	r3, #0
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	2300      	movs	r3, #0
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000566:	2180      	movs	r1, #128	; 0x80
 8000568:	4881      	ldr	r0, [pc, #516]	; (8000770 <select_num+0x384>)
 800056a:	f000 fdc9 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, OFF, OFF);
 800056e:	2301      	movs	r3, #1
 8000570:	9302      	str	r3, [sp, #8]
 8000572:	2301      	movs	r3, #1
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	2300      	movs	r3, #0
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800057e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000582:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000586:	487a      	ldr	r0, [pc, #488]	; (8000770 <select_num+0x384>)
 8000588:	f000 fdba 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, OFF, OFF, ON);
 800058c:	2300      	movs	r3, #0
 800058e:	9302      	str	r3, [sp, #8]
 8000590:	2301      	movs	r3, #1
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2301      	movs	r3, #1
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800059c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005a4:	4872      	ldr	r0, [pc, #456]	; (8000770 <select_num+0x384>)
 80005a6:	f000 fdab 	bl	8001100 <setColor>
			break;
 80005aa:	e302      	b.n	8000bb2 <select_num+0x7c6>
		case 4:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, OFF, ON, ON);
 80005ac:	2300      	movs	r3, #0
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2300      	movs	r3, #0
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	2301      	movs	r3, #1
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c0:	2180      	movs	r1, #128	; 0x80
 80005c2:	486b      	ldr	r0, [pc, #428]	; (8000770 <select_num+0x384>)
 80005c4:	f000 fd9c 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, OFF, OFF, ON);
 80005c8:	2300      	movs	r3, #0
 80005ca:	9302      	str	r3, [sp, #8]
 80005cc:	2301      	movs	r3, #1
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	2301      	movs	r3, #1
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e0:	4863      	ldr	r0, [pc, #396]	; (8000770 <select_num+0x384>)
 80005e2:	f000 fd8d 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, OFF, ON, ON);
 80005e6:	2300      	movs	r3, #0
 80005e8:	9302      	str	r3, [sp, #8]
 80005ea:	2300      	movs	r3, #0
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2301      	movs	r3, #1
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005fe:	485c      	ldr	r0, [pc, #368]	; (8000770 <select_num+0x384>)
 8000600:	f000 fd7e 	bl	8001100 <setColor>
			break;
 8000604:	e2d5      	b.n	8000bb2 <select_num+0x7c6>
		case 5:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, OFF, ON);
 8000606:	2300      	movs	r3, #0
 8000608:	9302      	str	r3, [sp, #8]
 800060a:	2301      	movs	r3, #1
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	2300      	movs	r3, #0
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	4854      	ldr	r0, [pc, #336]	; (8000770 <select_num+0x384>)
 800061e:	f000 fd6f 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, OFF, ON);
 8000622:	2300      	movs	r3, #0
 8000624:	9302      	str	r3, [sp, #8]
 8000626:	2301      	movs	r3, #1
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2300      	movs	r3, #0
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000632:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000636:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800063a:	484d      	ldr	r0, [pc, #308]	; (8000770 <select_num+0x384>)
 800063c:	f000 fd60 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, OFF, ON, ON);
 8000640:	2300      	movs	r3, #0
 8000642:	9302      	str	r3, [sp, #8]
 8000644:	2300      	movs	r3, #0
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	2301      	movs	r3, #1
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000650:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000654:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000658:	4845      	ldr	r0, [pc, #276]	; (8000770 <select_num+0x384>)
 800065a:	f000 fd51 	bl	8001100 <setColor>
			break;
 800065e:	e2a8      	b.n	8000bb2 <select_num+0x7c6>
		case 6:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, OFF, ON);
 8000660:	2300      	movs	r3, #0
 8000662:	9302      	str	r3, [sp, #8]
 8000664:	2301      	movs	r3, #1
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	2300      	movs	r3, #0
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000670:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	483e      	ldr	r0, [pc, #248]	; (8000770 <select_num+0x384>)
 8000678:	f000 fd42 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, ON, ON);
 800067c:	2300      	movs	r3, #0
 800067e:	9302      	str	r3, [sp, #8]
 8000680:	2300      	movs	r3, #0
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	2300      	movs	r3, #0
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000690:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000694:	4836      	ldr	r0, [pc, #216]	; (8000770 <select_num+0x384>)
 8000696:	f000 fd33 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, ON, ON, ON);
 800069a:	2300      	movs	r3, #0
 800069c:	9302      	str	r3, [sp, #8]
 800069e:	2300      	movs	r3, #0
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	2300      	movs	r3, #0
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006b2:	482f      	ldr	r0, [pc, #188]	; (8000770 <select_num+0x384>)
 80006b4:	f000 fd24 	bl	8001100 <setColor>
			break;
 80006b8:	e27b      	b.n	8000bb2 <select_num+0x7c6>
		case 7:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, ON, ON);
 80006ba:	2300      	movs	r3, #0
 80006bc:	9302      	str	r3, [sp, #8]
 80006be:	2300      	movs	r3, #0
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	2300      	movs	r3, #0
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	4827      	ldr	r0, [pc, #156]	; (8000770 <select_num+0x384>)
 80006d2:	f000 fd15 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, OFF, OFF, OFF);
 80006d6:	2301      	movs	r3, #1
 80006d8:	9302      	str	r3, [sp, #8]
 80006da:	2301      	movs	r3, #1
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2301      	movs	r3, #1
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ee:	4820      	ldr	r0, [pc, #128]	; (8000770 <select_num+0x384>)
 80006f0:	f000 fd06 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, OFF, OFF, OFF);
 80006f4:	2301      	movs	r3, #1
 80006f6:	9302      	str	r3, [sp, #8]
 80006f8:	2301      	movs	r3, #1
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	2301      	movs	r3, #1
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000704:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000708:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800070c:	4818      	ldr	r0, [pc, #96]	; (8000770 <select_num+0x384>)
 800070e:	f000 fcf7 	bl	8001100 <setColor>
			break;
 8000712:	e24e      	b.n	8000bb2 <select_num+0x7c6>
		case 8:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, ON, ON);
 8000714:	2300      	movs	r3, #0
 8000716:	9302      	str	r3, [sp, #8]
 8000718:	2300      	movs	r3, #0
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	2300      	movs	r3, #0
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000728:	2180      	movs	r1, #128	; 0x80
 800072a:	4811      	ldr	r0, [pc, #68]	; (8000770 <select_num+0x384>)
 800072c:	f000 fce8 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, ON, ON);
 8000730:	2300      	movs	r3, #0
 8000732:	9302      	str	r3, [sp, #8]
 8000734:	2300      	movs	r3, #0
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	2300      	movs	r3, #0
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000744:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000748:	4809      	ldr	r0, [pc, #36]	; (8000770 <select_num+0x384>)
 800074a:	f000 fcd9 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, ON, ON, ON);
 800074e:	2300      	movs	r3, #0
 8000750:	9302      	str	r3, [sp, #8]
 8000752:	2300      	movs	r3, #0
 8000754:	9301      	str	r3, [sp, #4]
 8000756:	2300      	movs	r3, #0
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000762:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000766:	4802      	ldr	r0, [pc, #8]	; (8000770 <select_num+0x384>)
 8000768:	f000 fcca 	bl	8001100 <setColor>
			break;
 800076c:	e221      	b.n	8000bb2 <select_num+0x7c6>
 800076e:	bf00      	nop
 8000770:	40010c00 	.word	0x40010c00
		case 9:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, ON, ON);
 8000774:	2300      	movs	r3, #0
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	2300      	movs	r3, #0
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	2300      	movs	r3, #0
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	48bc      	ldr	r0, [pc, #752]	; (8000a7c <select_num+0x690>)
 800078c:	f000 fcb8 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, OFF, ON);
 8000790:	2300      	movs	r3, #0
 8000792:	9302      	str	r3, [sp, #8]
 8000794:	2301      	movs	r3, #1
 8000796:	9301      	str	r3, [sp, #4]
 8000798:	2300      	movs	r3, #0
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a8:	48b4      	ldr	r0, [pc, #720]	; (8000a7c <select_num+0x690>)
 80007aa:	f000 fca9 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, OFF, ON, ON);
 80007ae:	2300      	movs	r3, #0
 80007b0:	9302      	str	r3, [sp, #8]
 80007b2:	2300      	movs	r3, #0
 80007b4:	9301      	str	r3, [sp, #4]
 80007b6:	2301      	movs	r3, #1
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007c6:	48ad      	ldr	r0, [pc, #692]	; (8000a7c <select_num+0x690>)
 80007c8:	f000 fc9a 	bl	8001100 <setColor>
			break;
 80007cc:	e1f1      	b.n	8000bb2 <select_num+0x7c6>
		case 11: //F
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, OFF, OFF);
 80007ce:	2301      	movs	r3, #1
 80007d0:	9302      	str	r3, [sp, #8]
 80007d2:	2301      	movs	r3, #1
 80007d4:	9301      	str	r3, [sp, #4]
 80007d6:	2300      	movs	r3, #0
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007e2:	2180      	movs	r1, #128	; 0x80
 80007e4:	48a5      	ldr	r0, [pc, #660]	; (8000a7c <select_num+0x690>)
 80007e6:	f000 fc8b 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, OFF, ON, ON);
 80007ea:	2300      	movs	r3, #0
 80007ec:	9302      	str	r3, [sp, #8]
 80007ee:	2300      	movs	r3, #0
 80007f0:	9301      	str	r3, [sp, #4]
 80007f2:	2301      	movs	r3, #1
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000802:	489e      	ldr	r0, [pc, #632]	; (8000a7c <select_num+0x690>)
 8000804:	f000 fc7c 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, ON, ON, ON);
 8000808:	2300      	movs	r3, #0
 800080a:	9302      	str	r3, [sp, #8]
 800080c:	2300      	movs	r3, #0
 800080e:	9301      	str	r3, [sp, #4]
 8000810:	2300      	movs	r3, #0
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000818:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800081c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000820:	4896      	ldr	r0, [pc, #600]	; (8000a7c <select_num+0x690>)
 8000822:	f000 fc6d 	bl	8001100 <setColor>
			break;
 8000826:	e1c4      	b.n	8000bb2 <select_num+0x7c6>
		case 12: //C
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, OFF, OFF);
 8000828:	2301      	movs	r3, #1
 800082a:	9302      	str	r3, [sp, #8]
 800082c:	2301      	movs	r3, #1
 800082e:	9301      	str	r3, [sp, #4]
 8000830:	2300      	movs	r3, #0
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800083c:	2180      	movs	r1, #128	; 0x80
 800083e:	488f      	ldr	r0, [pc, #572]	; (8000a7c <select_num+0x690>)
 8000840:	f000 fc5e 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, ON, ON);
 8000844:	2300      	movs	r3, #0
 8000846:	9302      	str	r3, [sp, #8]
 8000848:	2300      	movs	r3, #0
 800084a:	9301      	str	r3, [sp, #4]
 800084c:	2300      	movs	r3, #0
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000854:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000858:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085c:	4887      	ldr	r0, [pc, #540]	; (8000a7c <select_num+0x690>)
 800085e:	f000 fc4f 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, ON, ON, OFF);
 8000862:	2301      	movs	r3, #1
 8000864:	9302      	str	r3, [sp, #8]
 8000866:	2300      	movs	r3, #0
 8000868:	9301      	str	r3, [sp, #4]
 800086a:	2300      	movs	r3, #0
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000872:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000876:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800087a:	4880      	ldr	r0, [pc, #512]	; (8000a7c <select_num+0x690>)
 800087c:	f000 fc40 	bl	8001100 <setColor>
			break;
 8000880:	e197      	b.n	8000bb2 <select_num+0x7c6>
		default:
			break;
	}
}
else if (group == 'B'){
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b42      	cmp	r3, #66	; 0x42
 8000886:	f040 8191 	bne.w	8000bac <select_num+0x7c0>
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	2b09      	cmp	r3, #9
 800088e:	f200 818f 	bhi.w	8000bb0 <select_num+0x7c4>
 8000892:	a201      	add	r2, pc, #4	; (adr r2, 8000898 <select_num+0x4ac>)
 8000894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000898:	080008c1 	.word	0x080008c1
 800089c:	0800090b 	.word	0x0800090b
 80008a0:	08000955 	.word	0x08000955
 80008a4:	0800099f 	.word	0x0800099f
 80008a8:	080009e9 	.word	0x080009e9
 80008ac:	08000a33 	.word	0x08000a33
 80008b0:	08000a81 	.word	0x08000a81
 80008b4:	08000acb 	.word	0x08000acb
 80008b8:	08000b15 	.word	0x08000b15
 80008bc:	08000b5f 	.word	0x08000b5f
	switch (num) {
			case 0:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, ON, ON);
 80008c0:	2300      	movs	r3, #0
 80008c2:	9302      	str	r3, [sp, #8]
 80008c4:	2300      	movs	r3, #0
 80008c6:	9301      	str	r3, [sp, #4]
 80008c8:	2300      	movs	r3, #0
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2304      	movs	r3, #4
 80008ce:	2202      	movs	r2, #2
 80008d0:	2101      	movs	r1, #1
 80008d2:	486a      	ldr	r0, [pc, #424]	; (8000a7c <select_num+0x690>)
 80008d4:	f000 fc14 	bl	8001100 <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, ON, ON, ON);
 80008d8:	2300      	movs	r3, #0
 80008da:	9302      	str	r3, [sp, #8]
 80008dc:	2300      	movs	r3, #0
 80008de:	9301      	str	r3, [sp, #4]
 80008e0:	2300      	movs	r3, #0
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2320      	movs	r3, #32
 80008e6:	2210      	movs	r2, #16
 80008e8:	2108      	movs	r1, #8
 80008ea:	4864      	ldr	r0, [pc, #400]	; (8000a7c <select_num+0x690>)
 80008ec:	f000 fc08 	bl	8001100 <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, ON, ON, OFF);
 80008f0:	2301      	movs	r3, #1
 80008f2:	9302      	str	r3, [sp, #8]
 80008f4:	2300      	movs	r3, #0
 80008f6:	9301      	str	r3, [sp, #4]
 80008f8:	2300      	movs	r3, #0
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	2340      	movs	r3, #64	; 0x40
 80008fe:	2220      	movs	r2, #32
 8000900:	2110      	movs	r1, #16
 8000902:	485e      	ldr	r0, [pc, #376]	; (8000a7c <select_num+0x690>)
 8000904:	f000 fbfc 	bl	8001100 <setColor>
				break;
 8000908:	e153      	b.n	8000bb2 <select_num+0x7c6>
			case 1:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, OFF, ON, ON);
 800090a:	2300      	movs	r3, #0
 800090c:	9302      	str	r3, [sp, #8]
 800090e:	2300      	movs	r3, #0
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	2301      	movs	r3, #1
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2304      	movs	r3, #4
 8000918:	2202      	movs	r2, #2
 800091a:	2101      	movs	r1, #1
 800091c:	4857      	ldr	r0, [pc, #348]	; (8000a7c <select_num+0x690>)
 800091e:	f000 fbef 	bl	8001100 <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, OFF, OFF, OFF);
 8000922:	2301      	movs	r3, #1
 8000924:	9302      	str	r3, [sp, #8]
 8000926:	2301      	movs	r3, #1
 8000928:	9301      	str	r3, [sp, #4]
 800092a:	2301      	movs	r3, #1
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	2320      	movs	r3, #32
 8000930:	2210      	movs	r2, #16
 8000932:	2108      	movs	r1, #8
 8000934:	4851      	ldr	r0, [pc, #324]	; (8000a7c <select_num+0x690>)
 8000936:	f000 fbe3 	bl	8001100 <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, OFF, OFF, OFF);
 800093a:	2301      	movs	r3, #1
 800093c:	9302      	str	r3, [sp, #8]
 800093e:	2301      	movs	r3, #1
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	2301      	movs	r3, #1
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2340      	movs	r3, #64	; 0x40
 8000948:	2220      	movs	r2, #32
 800094a:	2110      	movs	r1, #16
 800094c:	484b      	ldr	r0, [pc, #300]	; (8000a7c <select_num+0x690>)
 800094e:	f000 fbd7 	bl	8001100 <setColor>
				break;
 8000952:	e12e      	b.n	8000bb2 <select_num+0x7c6>
			case 2:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, ON, OFF);
 8000954:	2301      	movs	r3, #1
 8000956:	9302      	str	r3, [sp, #8]
 8000958:	2300      	movs	r3, #0
 800095a:	9301      	str	r3, [sp, #4]
 800095c:	2300      	movs	r3, #0
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	2304      	movs	r3, #4
 8000962:	2202      	movs	r2, #2
 8000964:	2101      	movs	r1, #1
 8000966:	4845      	ldr	r0, [pc, #276]	; (8000a7c <select_num+0x690>)
 8000968:	f000 fbca 	bl	8001100 <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, ON, ON, OFF);
 800096c:	2301      	movs	r3, #1
 800096e:	9302      	str	r3, [sp, #8]
 8000970:	2300      	movs	r3, #0
 8000972:	9301      	str	r3, [sp, #4]
 8000974:	2300      	movs	r3, #0
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	2320      	movs	r3, #32
 800097a:	2210      	movs	r2, #16
 800097c:	2108      	movs	r1, #8
 800097e:	483f      	ldr	r0, [pc, #252]	; (8000a7c <select_num+0x690>)
 8000980:	f000 fbbe 	bl	8001100 <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, ON, OFF, ON);
 8000984:	2300      	movs	r3, #0
 8000986:	9302      	str	r3, [sp, #8]
 8000988:	2301      	movs	r3, #1
 800098a:	9301      	str	r3, [sp, #4]
 800098c:	2300      	movs	r3, #0
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2340      	movs	r3, #64	; 0x40
 8000992:	2220      	movs	r2, #32
 8000994:	2110      	movs	r1, #16
 8000996:	4839      	ldr	r0, [pc, #228]	; (8000a7c <select_num+0x690>)
 8000998:	f000 fbb2 	bl	8001100 <setColor>
				break;
 800099c:	e109      	b.n	8000bb2 <select_num+0x7c6>
			case 3:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, ON, ON);
 800099e:	2300      	movs	r3, #0
 80009a0:	9302      	str	r3, [sp, #8]
 80009a2:	2300      	movs	r3, #0
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	2300      	movs	r3, #0
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2304      	movs	r3, #4
 80009ac:	2202      	movs	r2, #2
 80009ae:	2101      	movs	r1, #1
 80009b0:	4832      	ldr	r0, [pc, #200]	; (8000a7c <select_num+0x690>)
 80009b2:	f000 fba5 	bl	8001100 <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, ON, OFF, OFF);
 80009b6:	2301      	movs	r3, #1
 80009b8:	9302      	str	r3, [sp, #8]
 80009ba:	2301      	movs	r3, #1
 80009bc:	9301      	str	r3, [sp, #4]
 80009be:	2300      	movs	r3, #0
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	2320      	movs	r3, #32
 80009c4:	2210      	movs	r2, #16
 80009c6:	2108      	movs	r1, #8
 80009c8:	482c      	ldr	r0, [pc, #176]	; (8000a7c <select_num+0x690>)
 80009ca:	f000 fb99 	bl	8001100 <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, OFF, OFF, ON);
 80009ce:	2300      	movs	r3, #0
 80009d0:	9302      	str	r3, [sp, #8]
 80009d2:	2301      	movs	r3, #1
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	2301      	movs	r3, #1
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	2340      	movs	r3, #64	; 0x40
 80009dc:	2220      	movs	r2, #32
 80009de:	2110      	movs	r1, #16
 80009e0:	4826      	ldr	r0, [pc, #152]	; (8000a7c <select_num+0x690>)
 80009e2:	f000 fb8d 	bl	8001100 <setColor>
				break;
 80009e6:	e0e4      	b.n	8000bb2 <select_num+0x7c6>
			case 4:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, OFF, ON, ON);
 80009e8:	2300      	movs	r3, #0
 80009ea:	9302      	str	r3, [sp, #8]
 80009ec:	2300      	movs	r3, #0
 80009ee:	9301      	str	r3, [sp, #4]
 80009f0:	2301      	movs	r3, #1
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	2304      	movs	r3, #4
 80009f6:	2202      	movs	r2, #2
 80009f8:	2101      	movs	r1, #1
 80009fa:	4820      	ldr	r0, [pc, #128]	; (8000a7c <select_num+0x690>)
 80009fc:	f000 fb80 	bl	8001100 <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, OFF, OFF, ON);
 8000a00:	2300      	movs	r3, #0
 8000a02:	9302      	str	r3, [sp, #8]
 8000a04:	2301      	movs	r3, #1
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	2320      	movs	r3, #32
 8000a0e:	2210      	movs	r2, #16
 8000a10:	2108      	movs	r1, #8
 8000a12:	481a      	ldr	r0, [pc, #104]	; (8000a7c <select_num+0x690>)
 8000a14:	f000 fb74 	bl	8001100 <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, OFF, ON, ON);
 8000a18:	2300      	movs	r3, #0
 8000a1a:	9302      	str	r3, [sp, #8]
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	2301      	movs	r3, #1
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2340      	movs	r3, #64	; 0x40
 8000a26:	2220      	movs	r2, #32
 8000a28:	2110      	movs	r1, #16
 8000a2a:	4814      	ldr	r0, [pc, #80]	; (8000a7c <select_num+0x690>)
 8000a2c:	f000 fb68 	bl	8001100 <setColor>
				break;
 8000a30:	e0bf      	b.n	8000bb2 <select_num+0x7c6>
			case 5:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, OFF, ON);
 8000a32:	2300      	movs	r3, #0
 8000a34:	9302      	str	r3, [sp, #8]
 8000a36:	2301      	movs	r3, #1
 8000a38:	9301      	str	r3, [sp, #4]
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2304      	movs	r3, #4
 8000a40:	2202      	movs	r2, #2
 8000a42:	2101      	movs	r1, #1
 8000a44:	480d      	ldr	r0, [pc, #52]	; (8000a7c <select_num+0x690>)
 8000a46:	f000 fb5b 	bl	8001100 <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, ON, OFF, ON);
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	9302      	str	r3, [sp, #8]
 8000a4e:	2301      	movs	r3, #1
 8000a50:	9301      	str	r3, [sp, #4]
 8000a52:	2300      	movs	r3, #0
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2320      	movs	r3, #32
 8000a58:	2210      	movs	r2, #16
 8000a5a:	2108      	movs	r1, #8
 8000a5c:	4807      	ldr	r0, [pc, #28]	; (8000a7c <select_num+0x690>)
 8000a5e:	f000 fb4f 	bl	8001100 <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, OFF, ON, ON);
 8000a62:	2300      	movs	r3, #0
 8000a64:	9302      	str	r3, [sp, #8]
 8000a66:	2300      	movs	r3, #0
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2340      	movs	r3, #64	; 0x40
 8000a70:	2220      	movs	r2, #32
 8000a72:	2110      	movs	r1, #16
 8000a74:	4801      	ldr	r0, [pc, #4]	; (8000a7c <select_num+0x690>)
 8000a76:	f000 fb43 	bl	8001100 <setColor>
				break;
 8000a7a:	e09a      	b.n	8000bb2 <select_num+0x7c6>
 8000a7c:	40010c00 	.word	0x40010c00
			case 6:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, OFF, ON);
 8000a80:	2300      	movs	r3, #0
 8000a82:	9302      	str	r3, [sp, #8]
 8000a84:	2301      	movs	r3, #1
 8000a86:	9301      	str	r3, [sp, #4]
 8000a88:	2300      	movs	r3, #0
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	2202      	movs	r2, #2
 8000a90:	2101      	movs	r1, #1
 8000a92:	484a      	ldr	r0, [pc, #296]	; (8000bbc <select_num+0x7d0>)
 8000a94:	f000 fb34 	bl	8001100 <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, ON, ON, ON);
 8000a98:	2300      	movs	r3, #0
 8000a9a:	9302      	str	r3, [sp, #8]
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	2320      	movs	r3, #32
 8000aa6:	2210      	movs	r2, #16
 8000aa8:	2108      	movs	r1, #8
 8000aaa:	4844      	ldr	r0, [pc, #272]	; (8000bbc <select_num+0x7d0>)
 8000aac:	f000 fb28 	bl	8001100 <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, ON, ON, ON);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	9302      	str	r3, [sp, #8]
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2340      	movs	r3, #64	; 0x40
 8000abe:	2220      	movs	r2, #32
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	483e      	ldr	r0, [pc, #248]	; (8000bbc <select_num+0x7d0>)
 8000ac4:	f000 fb1c 	bl	8001100 <setColor>
				break;
 8000ac8:	e073      	b.n	8000bb2 <select_num+0x7c6>
			case 7:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, ON, ON);
 8000aca:	2300      	movs	r3, #0
 8000acc:	9302      	str	r3, [sp, #8]
 8000ace:	2300      	movs	r3, #0
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	2202      	movs	r2, #2
 8000ada:	2101      	movs	r1, #1
 8000adc:	4837      	ldr	r0, [pc, #220]	; (8000bbc <select_num+0x7d0>)
 8000ade:	f000 fb0f 	bl	8001100 <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, OFF, OFF, OFF);
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	9302      	str	r3, [sp, #8]
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	9301      	str	r3, [sp, #4]
 8000aea:	2301      	movs	r3, #1
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	2320      	movs	r3, #32
 8000af0:	2210      	movs	r2, #16
 8000af2:	2108      	movs	r1, #8
 8000af4:	4831      	ldr	r0, [pc, #196]	; (8000bbc <select_num+0x7d0>)
 8000af6:	f000 fb03 	bl	8001100 <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, OFF, OFF, OFF);
 8000afa:	2301      	movs	r3, #1
 8000afc:	9302      	str	r3, [sp, #8]
 8000afe:	2301      	movs	r3, #1
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	2301      	movs	r3, #1
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2340      	movs	r3, #64	; 0x40
 8000b08:	2220      	movs	r2, #32
 8000b0a:	2110      	movs	r1, #16
 8000b0c:	482b      	ldr	r0, [pc, #172]	; (8000bbc <select_num+0x7d0>)
 8000b0e:	f000 faf7 	bl	8001100 <setColor>
				break;
 8000b12:	e04e      	b.n	8000bb2 <select_num+0x7c6>
			case 8:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, ON, ON);
 8000b14:	2300      	movs	r3, #0
 8000b16:	9302      	str	r3, [sp, #8]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	9301      	str	r3, [sp, #4]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	2304      	movs	r3, #4
 8000b22:	2202      	movs	r2, #2
 8000b24:	2101      	movs	r1, #1
 8000b26:	4825      	ldr	r0, [pc, #148]	; (8000bbc <select_num+0x7d0>)
 8000b28:	f000 faea 	bl	8001100 <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, ON, ON, ON);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	9302      	str	r3, [sp, #8]
 8000b30:	2300      	movs	r3, #0
 8000b32:	9301      	str	r3, [sp, #4]
 8000b34:	2300      	movs	r3, #0
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	2320      	movs	r3, #32
 8000b3a:	2210      	movs	r2, #16
 8000b3c:	2108      	movs	r1, #8
 8000b3e:	481f      	ldr	r0, [pc, #124]	; (8000bbc <select_num+0x7d0>)
 8000b40:	f000 fade 	bl	8001100 <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, ON, ON, ON);
 8000b44:	2300      	movs	r3, #0
 8000b46:	9302      	str	r3, [sp, #8]
 8000b48:	2300      	movs	r3, #0
 8000b4a:	9301      	str	r3, [sp, #4]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2340      	movs	r3, #64	; 0x40
 8000b52:	2220      	movs	r2, #32
 8000b54:	2110      	movs	r1, #16
 8000b56:	4819      	ldr	r0, [pc, #100]	; (8000bbc <select_num+0x7d0>)
 8000b58:	f000 fad2 	bl	8001100 <setColor>
				break;
 8000b5c:	e029      	b.n	8000bb2 <select_num+0x7c6>
			case 9:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, ON, ON);
 8000b5e:	2300      	movs	r3, #0
 8000b60:	9302      	str	r3, [sp, #8]
 8000b62:	2300      	movs	r3, #0
 8000b64:	9301      	str	r3, [sp, #4]
 8000b66:	2300      	movs	r3, #0
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	2101      	movs	r1, #1
 8000b70:	4812      	ldr	r0, [pc, #72]	; (8000bbc <select_num+0x7d0>)
 8000b72:	f000 fac5 	bl	8001100 <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, ON, OFF, ON);
 8000b76:	2300      	movs	r3, #0
 8000b78:	9302      	str	r3, [sp, #8]
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	2320      	movs	r3, #32
 8000b84:	2210      	movs	r2, #16
 8000b86:	2108      	movs	r1, #8
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <select_num+0x7d0>)
 8000b8a:	f000 fab9 	bl	8001100 <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, OFF, ON, ON);
 8000b8e:	2300      	movs	r3, #0
 8000b90:	9302      	str	r3, [sp, #8]
 8000b92:	2300      	movs	r3, #0
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	2301      	movs	r3, #1
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2340      	movs	r3, #64	; 0x40
 8000b9c:	2220      	movs	r2, #32
 8000b9e:	2110      	movs	r1, #16
 8000ba0:	4806      	ldr	r0, [pc, #24]	; (8000bbc <select_num+0x7d0>)
 8000ba2:	f000 faad 	bl	8001100 <setColor>
				break;
 8000ba6:	e004      	b.n	8000bb2 <select_num+0x7c6>
			break;
 8000ba8:	bf00      	nop
 8000baa:	e002      	b.n	8000bb2 <select_num+0x7c6>
			default:
				break;
		}
}
 8000bac:	bf00      	nop
 8000bae:	e000      	b.n	8000bb2 <select_num+0x7c6>
				break;
 8000bb0:	bf00      	nop
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40010c00 	.word	0x40010c00

08000bc0 <display_num>:

void display_num (char group, int index, int num) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
 8000bcc:	73fb      	strb	r3, [r7, #15]
	if (group == 'A' && index == 1) {
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	2b41      	cmp	r3, #65	; 0x41
 8000bd2:	d112      	bne.n	8000bfa <display_num+0x3a>
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d10f      	bne.n	8000bfa <display_num+0x3a>
		HAL_GPIO_WritePin(GPIOA, ENA1_Pin, ON);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2180      	movs	r1, #128	; 0x80
 8000bde:	482b      	ldr	r0, [pc, #172]	; (8000c8c <display_num+0xcc>)
 8000be0:	f001 fc3b 	bl	800245a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, ENA2_Pin, OFF);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bea:	4828      	ldr	r0, [pc, #160]	; (8000c8c <display_num+0xcc>)
 8000bec:	f001 fc35 	bl	800245a <HAL_GPIO_WritePin>
		select_num('A', num);
 8000bf0:	6879      	ldr	r1, [r7, #4]
 8000bf2:	2041      	movs	r0, #65	; 0x41
 8000bf4:	f7ff fbfa 	bl	80003ec <select_num>
 8000bf8:	e043      	b.n	8000c82 <display_num+0xc2>
	}
	else if (group == 'A' && index == 2) {
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	2b41      	cmp	r3, #65	; 0x41
 8000bfe:	d112      	bne.n	8000c26 <display_num+0x66>
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d10f      	bne.n	8000c26 <display_num+0x66>
		HAL_GPIO_WritePin(GPIOA, ENA2_Pin, ON);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0c:	481f      	ldr	r0, [pc, #124]	; (8000c8c <display_num+0xcc>)
 8000c0e:	f001 fc24 	bl	800245a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, ENA1_Pin, OFF);
 8000c12:	2201      	movs	r2, #1
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	481d      	ldr	r0, [pc, #116]	; (8000c8c <display_num+0xcc>)
 8000c18:	f001 fc1f 	bl	800245a <HAL_GPIO_WritePin>
		select_num('A', num);
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	2041      	movs	r0, #65	; 0x41
 8000c20:	f7ff fbe4 	bl	80003ec <select_num>
 8000c24:	e02d      	b.n	8000c82 <display_num+0xc2>
	}
	else if (group == 'B' && index == 1) {
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	2b42      	cmp	r3, #66	; 0x42
 8000c2a:	d113      	bne.n	8000c54 <display_num+0x94>
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d110      	bne.n	8000c54 <display_num+0x94>
		HAL_GPIO_WritePin(GPIOA, ENB1_Pin, ON);
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c38:	4814      	ldr	r0, [pc, #80]	; (8000c8c <display_num+0xcc>)
 8000c3a:	f001 fc0e 	bl	800245a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, ENB2_Pin, OFF);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c44:	4811      	ldr	r0, [pc, #68]	; (8000c8c <display_num+0xcc>)
 8000c46:	f001 fc08 	bl	800245a <HAL_GPIO_WritePin>
		select_num('B', num);
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	2042      	movs	r0, #66	; 0x42
 8000c4e:	f7ff fbcd 	bl	80003ec <select_num>
 8000c52:	e016      	b.n	8000c82 <display_num+0xc2>
	}
	else if (group == 'B' && index == 2) {
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	2b42      	cmp	r3, #66	; 0x42
 8000c58:	d113      	bne.n	8000c82 <display_num+0xc2>
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d110      	bne.n	8000c82 <display_num+0xc2>
		HAL_GPIO_WritePin(GPIOA, ENB2_Pin, ON);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c66:	4809      	ldr	r0, [pc, #36]	; (8000c8c <display_num+0xcc>)
 8000c68:	f001 fbf7 	bl	800245a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, ENB1_Pin, OFF);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <display_num+0xcc>)
 8000c74:	f001 fbf1 	bl	800245a <HAL_GPIO_WritePin>
		select_num('B', num);
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	2042      	movs	r0, #66	; 0x42
 8000c7c:	f7ff fbb6 	bl	80003ec <select_num>
	}
}
 8000c80:	e7ff      	b.n	8000c82 <display_num+0xc2>
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40010800 	.word	0x40010800

08000c90 <display_time>:

void display_time() {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	if (timer2_flag == 1 && idx == 0) {
 8000c94:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <display_time+0x88>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d115      	bne.n	8000cc8 <display_time+0x38>
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <display_time+0x8c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d111      	bne.n	8000cc8 <display_time+0x38>
		setTimer2(150);
 8000ca4:	2096      	movs	r0, #150	; 0x96
 8000ca6:	f001 f813 	bl	8001cd0 <setTimer2>
		display_num('A', 1, (timer1_counter + 100)/1000);
 8000caa:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <display_time+0x90>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	3364      	adds	r3, #100	; 0x64
 8000cb0:	4a1c      	ldr	r2, [pc, #112]	; (8000d24 <display_time+0x94>)
 8000cb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb6:	1192      	asrs	r2, r2, #6
 8000cb8:	17db      	asrs	r3, r3, #31
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	2041      	movs	r0, #65	; 0x41
 8000cc2:	f7ff ff7d 	bl	8000bc0 <display_num>
	}
	else if (timer2_flag == 1 && idx == 1) {
		setTimer2(150);
		display_num('A', 2, ((timer1_counter + 100)%1000)/100);
	}
}
 8000cc6:	e024      	b.n	8000d12 <display_time+0x82>
	else if (timer2_flag == 1 && idx == 1) {
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <display_time+0x88>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d120      	bne.n	8000d12 <display_time+0x82>
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <display_time+0x8c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d11c      	bne.n	8000d12 <display_time+0x82>
		setTimer2(150);
 8000cd8:	2096      	movs	r0, #150	; 0x96
 8000cda:	f000 fff9 	bl	8001cd0 <setTimer2>
		display_num('A', 2, ((timer1_counter + 100)%1000)/100);
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <display_time+0x90>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <display_time+0x94>)
 8000ce8:	fb83 1302 	smull	r1, r3, r3, r2
 8000cec:	1199      	asrs	r1, r3, #6
 8000cee:	17d3      	asrs	r3, r2, #31
 8000cf0:	1acb      	subs	r3, r1, r3
 8000cf2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cf6:	fb01 f303 	mul.w	r3, r1, r3
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <display_time+0x98>)
 8000cfe:	fb82 1203 	smull	r1, r2, r2, r3
 8000d02:	1152      	asrs	r2, r2, #5
 8000d04:	17db      	asrs	r3, r3, #31
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	461a      	mov	r2, r3
 8000d0a:	2102      	movs	r1, #2
 8000d0c:	2041      	movs	r0, #65	; 0x41
 8000d0e:	f7ff ff57 	bl	8000bc0 <display_num>
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200000a0 	.word	0x200000a0
 8000d1c:	200000ac 	.word	0x200000ac
 8000d20:	20000094 	.word	0x20000094
 8000d24:	10624dd3 	.word	0x10624dd3
 8000d28:	51eb851f 	.word	0x51eb851f

08000d2c <fsm_normal_run>:

void fsm_normal_run() {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af04      	add	r7, sp, #16
	switch (color) {
 8000d32:	4bba      	ldr	r3, [pc, #744]	; (800101c <fsm_normal_run+0x2f0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	f200 81c4 	bhi.w	80010c6 <fsm_normal_run+0x39a>
 8000d3e:	a201      	add	r2, pc, #4	; (adr r2, 8000d44 <fsm_normal_run+0x18>)
 8000d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d44:	08000d55 	.word	0x08000d55
 8000d48:	08000d97 	.word	0x08000d97
 8000d4c:	08000f09 	.word	0x08000f09
 8000d50:	08000fbb 	.word	0x08000fbb
		case INIT:
			setColor(GPIOA, LED_RED_A_Pin, LED_AMBER_A_Pin, LED_GREEN_A_Pin, OFF, OFF, OFF);
 8000d54:	2301      	movs	r3, #1
 8000d56:	9302      	str	r3, [sp, #8]
 8000d58:	2301      	movs	r3, #1
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2308      	movs	r3, #8
 8000d62:	2204      	movs	r2, #4
 8000d64:	2102      	movs	r1, #2
 8000d66:	48ae      	ldr	r0, [pc, #696]	; (8001020 <fsm_normal_run+0x2f4>)
 8000d68:	f000 f9ca 	bl	8001100 <setColor>
			setColor(GPIOA, LED_RED_B_Pin, LED_AMBER_B_Pin, LED_GREEN_B_Pin, OFF, OFF, OFF);
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	9302      	str	r3, [sp, #8]
 8000d70:	2301      	movs	r3, #1
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	2301      	movs	r3, #1
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2340      	movs	r3, #64	; 0x40
 8000d7a:	2220      	movs	r2, #32
 8000d7c:	2110      	movs	r1, #16
 8000d7e:	48a8      	ldr	r0, [pc, #672]	; (8001020 <fsm_normal_run+0x2f4>)
 8000d80:	f000 f9be 	bl	8001100 <setColor>

			color = RED;
 8000d84:	4ba5      	ldr	r3, [pc, #660]	; (800101c <fsm_normal_run+0x2f0>)
 8000d86:	2202      	movs	r2, #2
 8000d88:	601a      	str	r2, [r3, #0]
			setTimer1(red_duration);
 8000d8a:	4ba6      	ldr	r3, [pc, #664]	; (8001024 <fsm_normal_run+0x2f8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 ff84 	bl	8001c9c <setTimer1>
			break;
 8000d94:	e19e      	b.n	80010d4 <fsm_normal_run+0x3a8>
		case RED:
			display_time();
 8000d96:	f7ff ff7b 	bl	8000c90 <display_time>
			setColor(GPIOA, LED_RED_A_Pin, LED_AMBER_A_Pin, LED_GREEN_A_Pin, ON, OFF, OFF);
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	9302      	str	r3, [sp, #8]
 8000d9e:	2301      	movs	r3, #1
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	2300      	movs	r3, #0
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2308      	movs	r3, #8
 8000da8:	2204      	movs	r2, #4
 8000daa:	2102      	movs	r1, #2
 8000dac:	489c      	ldr	r0, [pc, #624]	; (8001020 <fsm_normal_run+0x2f4>)
 8000dae:	f000 f9a7 	bl	8001100 <setColor>
			if (isTimer1Paused(red_duration - green_duration)) {
 8000db2:	4b9c      	ldr	r3, [pc, #624]	; (8001024 <fsm_normal_run+0x2f8>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	4b9c      	ldr	r3, [pc, #624]	; (8001028 <fsm_normal_run+0x2fc>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 ffbb 	bl	8001d38 <isTimer1Paused>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d03d      	beq.n	8000e44 <fsm_normal_run+0x118>
				if (idx == 0) {
 8000dc8:	4b98      	ldr	r3, [pc, #608]	; (800102c <fsm_normal_run+0x300>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d10e      	bne.n	8000dee <fsm_normal_run+0xc2>
					display_num('B', 1, (timer1_counter + 100)/1000);
 8000dd0:	4b97      	ldr	r3, [pc, #604]	; (8001030 <fsm_normal_run+0x304>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	3364      	adds	r3, #100	; 0x64
 8000dd6:	4a97      	ldr	r2, [pc, #604]	; (8001034 <fsm_normal_run+0x308>)
 8000dd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ddc:	1192      	asrs	r2, r2, #6
 8000dde:	17db      	asrs	r3, r3, #31
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	461a      	mov	r2, r3
 8000de4:	2101      	movs	r1, #1
 8000de6:	2042      	movs	r0, #66	; 0x42
 8000de8:	f7ff feea 	bl	8000bc0 <display_num>
 8000dec:	e01d      	b.n	8000e2a <fsm_normal_run+0xfe>
				}
				else if (idx == 1) {
 8000dee:	4b8f      	ldr	r3, [pc, #572]	; (800102c <fsm_normal_run+0x300>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d119      	bne.n	8000e2a <fsm_normal_run+0xfe>
					display_num('B', 2, ((timer1_counter + 100)%1000)/100);
 8000df6:	4b8e      	ldr	r3, [pc, #568]	; (8001030 <fsm_normal_run+0x304>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000dfe:	4b8d      	ldr	r3, [pc, #564]	; (8001034 <fsm_normal_run+0x308>)
 8000e00:	fb83 1302 	smull	r1, r3, r3, r2
 8000e04:	1199      	asrs	r1, r3, #6
 8000e06:	17d3      	asrs	r3, r2, #31
 8000e08:	1acb      	subs	r3, r1, r3
 8000e0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e0e:	fb01 f303 	mul.w	r3, r1, r3
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	4a88      	ldr	r2, [pc, #544]	; (8001038 <fsm_normal_run+0x30c>)
 8000e16:	fb82 1203 	smull	r1, r2, r2, r3
 8000e1a:	1152      	asrs	r2, r2, #5
 8000e1c:	17db      	asrs	r3, r3, #31
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	461a      	mov	r2, r3
 8000e22:	2102      	movs	r1, #2
 8000e24:	2042      	movs	r0, #66	; 0x42
 8000e26:	f7ff fecb 	bl	8000bc0 <display_num>
				}
				setColor(GPIOA, LED_RED_B_Pin, LED_AMBER_B_Pin, LED_GREEN_B_Pin, OFF, ON, OFF);
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	9302      	str	r3, [sp, #8]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	2301      	movs	r3, #1
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	2340      	movs	r3, #64	; 0x40
 8000e38:	2220      	movs	r2, #32
 8000e3a:	2110      	movs	r1, #16
 8000e3c:	4878      	ldr	r0, [pc, #480]	; (8001020 <fsm_normal_run+0x2f4>)
 8000e3e:	f000 f95f 	bl	8001100 <setColor>
 8000e42:	e053      	b.n	8000eec <fsm_normal_run+0x1c0>
			}
			else {
				if (idx == 0) {
 8000e44:	4b79      	ldr	r3, [pc, #484]	; (800102c <fsm_normal_run+0x300>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d11d      	bne.n	8000e88 <fsm_normal_run+0x15c>
					display_num('B', 1, ((timer1_counter + 100)/100 - amber_duration/1000)/10);
 8000e4c:	4b78      	ldr	r3, [pc, #480]	; (8001030 <fsm_normal_run+0x304>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3364      	adds	r3, #100	; 0x64
 8000e52:	4a79      	ldr	r2, [pc, #484]	; (8001038 <fsm_normal_run+0x30c>)
 8000e54:	fb82 1203 	smull	r1, r2, r2, r3
 8000e58:	1152      	asrs	r2, r2, #5
 8000e5a:	17db      	asrs	r3, r3, #31
 8000e5c:	1ad2      	subs	r2, r2, r3
 8000e5e:	4b77      	ldr	r3, [pc, #476]	; (800103c <fsm_normal_run+0x310>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4974      	ldr	r1, [pc, #464]	; (8001034 <fsm_normal_run+0x308>)
 8000e64:	fb81 0103 	smull	r0, r1, r1, r3
 8000e68:	1189      	asrs	r1, r1, #6
 8000e6a:	17db      	asrs	r3, r3, #31
 8000e6c:	1a5b      	subs	r3, r3, r1
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a73      	ldr	r2, [pc, #460]	; (8001040 <fsm_normal_run+0x314>)
 8000e72:	fb82 1203 	smull	r1, r2, r2, r3
 8000e76:	1092      	asrs	r2, r2, #2
 8000e78:	17db      	asrs	r3, r3, #31
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	2101      	movs	r1, #1
 8000e80:	2042      	movs	r0, #66	; 0x42
 8000e82:	f7ff fe9d 	bl	8000bc0 <display_num>
 8000e86:	e025      	b.n	8000ed4 <fsm_normal_run+0x1a8>
				}
				else if (idx == 1) {
 8000e88:	4b68      	ldr	r3, [pc, #416]	; (800102c <fsm_normal_run+0x300>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d121      	bne.n	8000ed4 <fsm_normal_run+0x1a8>
					display_num('B', 2, ((timer1_counter + 100)/100 - amber_duration/1000)%10);
 8000e90:	4b67      	ldr	r3, [pc, #412]	; (8001030 <fsm_normal_run+0x304>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	3364      	adds	r3, #100	; 0x64
 8000e96:	4a68      	ldr	r2, [pc, #416]	; (8001038 <fsm_normal_run+0x30c>)
 8000e98:	fb82 1203 	smull	r1, r2, r2, r3
 8000e9c:	1152      	asrs	r2, r2, #5
 8000e9e:	17db      	asrs	r3, r3, #31
 8000ea0:	1ad2      	subs	r2, r2, r3
 8000ea2:	4b66      	ldr	r3, [pc, #408]	; (800103c <fsm_normal_run+0x310>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4963      	ldr	r1, [pc, #396]	; (8001034 <fsm_normal_run+0x308>)
 8000ea8:	fb81 0103 	smull	r0, r1, r1, r3
 8000eac:	1189      	asrs	r1, r1, #6
 8000eae:	17db      	asrs	r3, r3, #31
 8000eb0:	1a5b      	subs	r3, r3, r1
 8000eb2:	441a      	add	r2, r3
 8000eb4:	4b62      	ldr	r3, [pc, #392]	; (8001040 <fsm_normal_run+0x314>)
 8000eb6:	fb83 1302 	smull	r1, r3, r3, r2
 8000eba:	1099      	asrs	r1, r3, #2
 8000ebc:	17d3      	asrs	r3, r2, #31
 8000ebe:	1ac9      	subs	r1, r1, r3
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	1ad1      	subs	r1, r2, r3
 8000eca:	460a      	mov	r2, r1
 8000ecc:	2102      	movs	r1, #2
 8000ece:	2042      	movs	r0, #66	; 0x42
 8000ed0:	f7ff fe76 	bl	8000bc0 <display_num>
				}
				setColor(GPIOA, LED_RED_B_Pin, LED_AMBER_B_Pin, LED_GREEN_B_Pin, OFF, OFF, ON);
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	9302      	str	r3, [sp, #8]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	2301      	movs	r3, #1
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2340      	movs	r3, #64	; 0x40
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	2110      	movs	r1, #16
 8000ee6:	484e      	ldr	r0, [pc, #312]	; (8001020 <fsm_normal_run+0x2f4>)
 8000ee8:	f000 f90a 	bl	8001100 <setColor>
			}

			if (timer1_flag == 1) {
 8000eec:	4b55      	ldr	r3, [pc, #340]	; (8001044 <fsm_normal_run+0x318>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	f040 80ea 	bne.w	80010ca <fsm_normal_run+0x39e>
				color = GREEN;
 8000ef6:	4b49      	ldr	r3, [pc, #292]	; (800101c <fsm_normal_run+0x2f0>)
 8000ef8:	2204      	movs	r2, #4
 8000efa:	601a      	str	r2, [r3, #0]
				setTimer1(green_duration);
 8000efc:	4b4a      	ldr	r3, [pc, #296]	; (8001028 <fsm_normal_run+0x2fc>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 fecb 	bl	8001c9c <setTimer1>
			}
			break;
 8000f06:	e0e0      	b.n	80010ca <fsm_normal_run+0x39e>
		case AMBER:
			display_time();
 8000f08:	f7ff fec2 	bl	8000c90 <display_time>
			setColor(GPIOA, LED_RED_A_Pin, LED_AMBER_A_Pin, LED_GREEN_A_Pin, OFF, ON, OFF);
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	9302      	str	r3, [sp, #8]
 8000f10:	2300      	movs	r3, #0
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	2301      	movs	r3, #1
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2308      	movs	r3, #8
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	4840      	ldr	r0, [pc, #256]	; (8001020 <fsm_normal_run+0x2f4>)
 8000f20:	f000 f8ee 	bl	8001100 <setColor>

			if (idx == 0) {
 8000f24:	4b41      	ldr	r3, [pc, #260]	; (800102c <fsm_normal_run+0x300>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d10e      	bne.n	8000f4a <fsm_normal_run+0x21e>
				display_num('B', 1, (timer1_counter + 100)/1000);
 8000f2c:	4b40      	ldr	r3, [pc, #256]	; (8001030 <fsm_normal_run+0x304>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	3364      	adds	r3, #100	; 0x64
 8000f32:	4a40      	ldr	r2, [pc, #256]	; (8001034 <fsm_normal_run+0x308>)
 8000f34:	fb82 1203 	smull	r1, r2, r2, r3
 8000f38:	1192      	asrs	r2, r2, #6
 8000f3a:	17db      	asrs	r3, r3, #31
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	461a      	mov	r2, r3
 8000f40:	2101      	movs	r1, #1
 8000f42:	2042      	movs	r0, #66	; 0x42
 8000f44:	f7ff fe3c 	bl	8000bc0 <display_num>
 8000f48:	e01d      	b.n	8000f86 <fsm_normal_run+0x25a>
			}
			else if (idx == 1) {
 8000f4a:	4b38      	ldr	r3, [pc, #224]	; (800102c <fsm_normal_run+0x300>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d119      	bne.n	8000f86 <fsm_normal_run+0x25a>
				display_num('B', 2, ((timer1_counter + 100)%1000)/100);
 8000f52:	4b37      	ldr	r3, [pc, #220]	; (8001030 <fsm_normal_run+0x304>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000f5a:	4b36      	ldr	r3, [pc, #216]	; (8001034 <fsm_normal_run+0x308>)
 8000f5c:	fb83 1302 	smull	r1, r3, r3, r2
 8000f60:	1199      	asrs	r1, r3, #6
 8000f62:	17d3      	asrs	r3, r2, #31
 8000f64:	1acb      	subs	r3, r1, r3
 8000f66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f6a:	fb01 f303 	mul.w	r3, r1, r3
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	4a31      	ldr	r2, [pc, #196]	; (8001038 <fsm_normal_run+0x30c>)
 8000f72:	fb82 1203 	smull	r1, r2, r2, r3
 8000f76:	1152      	asrs	r2, r2, #5
 8000f78:	17db      	asrs	r3, r3, #31
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	2102      	movs	r1, #2
 8000f80:	2042      	movs	r0, #66	; 0x42
 8000f82:	f7ff fe1d 	bl	8000bc0 <display_num>
			}
			setColor(GPIOA, LED_RED_B_Pin, LED_AMBER_B_Pin, LED_GREEN_B_Pin, ON, OFF, OFF);
 8000f86:	2301      	movs	r3, #1
 8000f88:	9302      	str	r3, [sp, #8]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2340      	movs	r3, #64	; 0x40
 8000f94:	2220      	movs	r2, #32
 8000f96:	2110      	movs	r1, #16
 8000f98:	4821      	ldr	r0, [pc, #132]	; (8001020 <fsm_normal_run+0x2f4>)
 8000f9a:	f000 f8b1 	bl	8001100 <setColor>

			if (timer1_flag == 1) {
 8000f9e:	4b29      	ldr	r3, [pc, #164]	; (8001044 <fsm_normal_run+0x318>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	f040 8093 	bne.w	80010ce <fsm_normal_run+0x3a2>
				color = RED;
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	; (800101c <fsm_normal_run+0x2f0>)
 8000faa:	2202      	movs	r2, #2
 8000fac:	601a      	str	r2, [r3, #0]
				setTimer1(red_duration);
 8000fae:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <fsm_normal_run+0x2f8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fe72 	bl	8001c9c <setTimer1>
			}
			break;
 8000fb8:	e089      	b.n	80010ce <fsm_normal_run+0x3a2>
		case GREEN:
			display_time();
 8000fba:	f7ff fe69 	bl	8000c90 <display_time>
			setColor(GPIOA, LED_RED_A_Pin, LED_AMBER_A_Pin, LED_GREEN_A_Pin, OFF, OFF, ON);
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2308      	movs	r3, #8
 8000fcc:	2204      	movs	r2, #4
 8000fce:	2102      	movs	r1, #2
 8000fd0:	4813      	ldr	r0, [pc, #76]	; (8001020 <fsm_normal_run+0x2f4>)
 8000fd2:	f000 f895 	bl	8001100 <setColor>

			if (idx == 0) {
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <fsm_normal_run+0x300>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d134      	bne.n	8001048 <fsm_normal_run+0x31c>
				display_num('B', 1, ((timer1_counter + 100)/100 + amber_duration/1000)/10);
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <fsm_normal_run+0x304>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3364      	adds	r3, #100	; 0x64
 8000fe4:	4a14      	ldr	r2, [pc, #80]	; (8001038 <fsm_normal_run+0x30c>)
 8000fe6:	fb82 1203 	smull	r1, r2, r2, r3
 8000fea:	1152      	asrs	r2, r2, #5
 8000fec:	17db      	asrs	r3, r3, #31
 8000fee:	1ad2      	subs	r2, r2, r3
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <fsm_normal_run+0x310>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	490f      	ldr	r1, [pc, #60]	; (8001034 <fsm_normal_run+0x308>)
 8000ff6:	fb81 0103 	smull	r0, r1, r1, r3
 8000ffa:	1189      	asrs	r1, r1, #6
 8000ffc:	17db      	asrs	r3, r3, #31
 8000ffe:	1acb      	subs	r3, r1, r3
 8001000:	4413      	add	r3, r2
 8001002:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <fsm_normal_run+0x314>)
 8001004:	fb82 1203 	smull	r1, r2, r2, r3
 8001008:	1092      	asrs	r2, r2, #2
 800100a:	17db      	asrs	r3, r3, #31
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	461a      	mov	r2, r3
 8001010:	2101      	movs	r1, #1
 8001012:	2042      	movs	r0, #66	; 0x42
 8001014:	f7ff fdd4 	bl	8000bc0 <display_num>
 8001018:	e03c      	b.n	8001094 <fsm_normal_run+0x368>
 800101a:	bf00      	nop
 800101c:	20000088 	.word	0x20000088
 8001020:	40010800 	.word	0x40010800
 8001024:	20000040 	.word	0x20000040
 8001028:	20000048 	.word	0x20000048
 800102c:	200000ac 	.word	0x200000ac
 8001030:	20000094 	.word	0x20000094
 8001034:	10624dd3 	.word	0x10624dd3
 8001038:	51eb851f 	.word	0x51eb851f
 800103c:	20000044 	.word	0x20000044
 8001040:	66666667 	.word	0x66666667
 8001044:	20000098 	.word	0x20000098
			}
			else if (idx == 1) {
 8001048:	4b24      	ldr	r3, [pc, #144]	; (80010dc <fsm_normal_run+0x3b0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d121      	bne.n	8001094 <fsm_normal_run+0x368>
				display_num('B', 2, ((timer1_counter + 100)/100 + amber_duration/1000)%10);
 8001050:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <fsm_normal_run+0x3b4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	3364      	adds	r3, #100	; 0x64
 8001056:	4a23      	ldr	r2, [pc, #140]	; (80010e4 <fsm_normal_run+0x3b8>)
 8001058:	fb82 1203 	smull	r1, r2, r2, r3
 800105c:	1152      	asrs	r2, r2, #5
 800105e:	17db      	asrs	r3, r3, #31
 8001060:	1ad2      	subs	r2, r2, r3
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <fsm_normal_run+0x3bc>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4921      	ldr	r1, [pc, #132]	; (80010ec <fsm_normal_run+0x3c0>)
 8001068:	fb81 0103 	smull	r0, r1, r1, r3
 800106c:	1189      	asrs	r1, r1, #6
 800106e:	17db      	asrs	r3, r3, #31
 8001070:	1acb      	subs	r3, r1, r3
 8001072:	441a      	add	r2, r3
 8001074:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <fsm_normal_run+0x3c4>)
 8001076:	fb83 1302 	smull	r1, r3, r3, r2
 800107a:	1099      	asrs	r1, r3, #2
 800107c:	17d3      	asrs	r3, r2, #31
 800107e:	1ac9      	subs	r1, r1, r3
 8001080:	460b      	mov	r3, r1
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	1ad1      	subs	r1, r2, r3
 800108a:	460a      	mov	r2, r1
 800108c:	2102      	movs	r1, #2
 800108e:	2042      	movs	r0, #66	; 0x42
 8001090:	f7ff fd96 	bl	8000bc0 <display_num>
			}
			setColor(GPIOA, LED_RED_B_Pin, LED_AMBER_B_Pin, LED_GREEN_B_Pin, ON, OFF, OFF);
 8001094:	2301      	movs	r3, #1
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	2301      	movs	r3, #1
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	2300      	movs	r3, #0
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2340      	movs	r3, #64	; 0x40
 80010a2:	2220      	movs	r2, #32
 80010a4:	2110      	movs	r1, #16
 80010a6:	4813      	ldr	r0, [pc, #76]	; (80010f4 <fsm_normal_run+0x3c8>)
 80010a8:	f000 f82a 	bl	8001100 <setColor>

			if (timer1_flag == 1) {
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <fsm_normal_run+0x3cc>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d10e      	bne.n	80010d2 <fsm_normal_run+0x3a6>
				color = AMBER;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <fsm_normal_run+0x3d0>)
 80010b6:	2203      	movs	r2, #3
 80010b8:	601a      	str	r2, [r3, #0]
				setTimer1(amber_duration);
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <fsm_normal_run+0x3bc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 fdec 	bl	8001c9c <setTimer1>
			}
			break;
 80010c4:	e005      	b.n	80010d2 <fsm_normal_run+0x3a6>
		default:
			break;
 80010c6:	bf00      	nop
 80010c8:	e004      	b.n	80010d4 <fsm_normal_run+0x3a8>
			break;
 80010ca:	bf00      	nop
 80010cc:	e002      	b.n	80010d4 <fsm_normal_run+0x3a8>
			break;
 80010ce:	bf00      	nop
 80010d0:	e000      	b.n	80010d4 <fsm_normal_run+0x3a8>
			break;
 80010d2:	bf00      	nop
	}
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200000ac 	.word	0x200000ac
 80010e0:	20000094 	.word	0x20000094
 80010e4:	51eb851f 	.word	0x51eb851f
 80010e8:	20000044 	.word	0x20000044
 80010ec:	10624dd3 	.word	0x10624dd3
 80010f0:	66666667 	.word	0x66666667
 80010f4:	40010800 	.word	0x40010800
 80010f8:	20000098 	.word	0x20000098
 80010fc:	20000088 	.word	0x20000088

08001100 <setColor>:
int amber_duration = 1000;
int amber_duration_temp = 0;
int green_duration = 2000;
int green_duration_temp = 3000;

void setColor(GPIO_TypeDef *GPIOx, uint16_t Led_1, uint16_t Led_2, uint16_t Led_3, GPIO_PinState Led_1_State, GPIO_PinState Led_2_State, GPIO_PinState Led_3_State) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	4608      	mov	r0, r1
 800110a:	4611      	mov	r1, r2
 800110c:	461a      	mov	r2, r3
 800110e:	4603      	mov	r3, r0
 8001110:	817b      	strh	r3, [r7, #10]
 8001112:	460b      	mov	r3, r1
 8001114:	813b      	strh	r3, [r7, #8]
 8001116:	4613      	mov	r3, r2
 8001118:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOx, Led_1, Led_1_State);
 800111a:	7e3a      	ldrb	r2, [r7, #24]
 800111c:	897b      	ldrh	r3, [r7, #10]
 800111e:	4619      	mov	r1, r3
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f001 f99a 	bl	800245a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, Led_2, Led_2_State);
 8001126:	7f3a      	ldrb	r2, [r7, #28]
 8001128:	893b      	ldrh	r3, [r7, #8]
 800112a:	4619      	mov	r1, r3
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f001 f994 	bl	800245a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, Led_3, Led_3_State);
 8001132:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	4619      	mov	r1, r3
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f001 f98d 	bl	800245a <HAL_GPIO_WritePin>
}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <setColorToggle>:

void setColorToggle(GPIO_TypeDef *GPIOx, uint16_t Led_1, uint16_t Led_2, uint16_t Led_3) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	4608      	mov	r0, r1
 8001152:	4611      	mov	r1, r2
 8001154:	461a      	mov	r2, r3
 8001156:	4603      	mov	r3, r0
 8001158:	817b      	strh	r3, [r7, #10]
 800115a:	460b      	mov	r3, r1
 800115c:	813b      	strh	r3, [r7, #8]
 800115e:	4613      	mov	r3, r2
 8001160:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOx, Led_1);
 8001162:	897b      	ldrh	r3, [r7, #10]
 8001164:	4619      	mov	r1, r3
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f001 f98f 	bl	800248a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOx, Led_2);
 800116c:	893b      	ldrh	r3, [r7, #8]
 800116e:	4619      	mov	r1, r3
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f001 f98a 	bl	800248a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOx, Led_3);
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	4619      	mov	r1, r3
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f001 f985 	bl	800248a <HAL_GPIO_TogglePin>
}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <isErrorOccured>:

int isErrorOccured() {
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
	if ((amber_duration + green_duration) != red_duration) return 1;
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <isErrorOccured+0x24>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <isErrorOccured+0x28>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	441a      	add	r2, r3
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <isErrorOccured+0x2c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	429a      	cmp	r2, r3
 800119c:	d001      	beq.n	80011a2 <isErrorOccured+0x1a>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <isErrorOccured+0x1c>
	return 0;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	20000044 	.word	0x20000044
 80011b0:	20000048 	.word	0x20000048
 80011b4:	20000040 	.word	0x20000040

080011b8 <fsm_traffic_run>:

void fsm_traffic_run() {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af04      	add	r7, sp, #16
	switch(status) {
 80011be:	4bba      	ldr	r3, [pc, #744]	; (80014a8 <fsm_traffic_run+0x2f0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b05      	cmp	r3, #5
 80011c4:	f200 838b 	bhi.w	80018de <fsm_traffic_run+0x726>
 80011c8:	a201      	add	r2, pc, #4	; (adr r2, 80011d0 <fsm_traffic_run+0x18>)
 80011ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ce:	bf00      	nop
 80011d0:	08001201 	.word	0x08001201
 80011d4:	080011e9 	.word	0x080011e9
 80011d8:	08001309 	.word	0x08001309
 80011dc:	08001475 	.word	0x08001475
 80011e0:	08001617 	.word	0x08001617
 80011e4:	080017d9 	.word	0x080017d9
		case NORMAL:
			fsm_normal_run();
 80011e8:	f7ff fda0 	bl	8000d2c <fsm_normal_run>

			if (isButton1Pressed()) {
 80011ec:	f7fe ffae 	bl	800014c <isButton1Pressed>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 8375 	beq.w	80018e2 <fsm_traffic_run+0x72a>
				status = INITIAL;
 80011f8:	4bab      	ldr	r3, [pc, #684]	; (80014a8 <fsm_traffic_run+0x2f0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
			}
			break;
 80011fe:	e370      	b.n	80018e2 <fsm_traffic_run+0x72a>
		case INITIAL:
			setColor(GPIOA, LED_RED_A_Pin, LED_AMBER_A_Pin, LED_GREEN_A_Pin, OFF, OFF, OFF);
 8001200:	2301      	movs	r3, #1
 8001202:	9302      	str	r3, [sp, #8]
 8001204:	2301      	movs	r3, #1
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	2301      	movs	r3, #1
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2308      	movs	r3, #8
 800120e:	2204      	movs	r2, #4
 8001210:	2102      	movs	r1, #2
 8001212:	48a6      	ldr	r0, [pc, #664]	; (80014ac <fsm_traffic_run+0x2f4>)
 8001214:	f7ff ff74 	bl	8001100 <setColor>
			setColor(GPIOA, LED_RED_B_Pin, LED_AMBER_B_Pin, LED_GREEN_B_Pin, OFF, OFF, OFF);
 8001218:	2301      	movs	r3, #1
 800121a:	9302      	str	r3, [sp, #8]
 800121c:	2301      	movs	r3, #1
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	2301      	movs	r3, #1
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2340      	movs	r3, #64	; 0x40
 8001226:	2220      	movs	r2, #32
 8001228:	2110      	movs	r1, #16
 800122a:	48a0      	ldr	r0, [pc, #640]	; (80014ac <fsm_traffic_run+0x2f4>)
 800122c:	f7ff ff68 	bl	8001100 <setColor>
			setColor(GPIOA, ENA1_Pin, ENA2_Pin, ENA2_Pin, ON, ON, ON);
 8001230:	2300      	movs	r3, #0
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	2300      	movs	r3, #0
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	2300      	movs	r3, #0
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001240:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001244:	2180      	movs	r1, #128	; 0x80
 8001246:	4899      	ldr	r0, [pc, #612]	; (80014ac <fsm_traffic_run+0x2f4>)
 8001248:	f7ff ff5a 	bl	8001100 <setColor>
			setColor(GPIOA, ENB1_Pin, ENB2_Pin, ENB2_Pin, ON, ON, ON);
 800124c:	2300      	movs	r3, #0
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	2300      	movs	r3, #0
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	2300      	movs	r3, #0
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001260:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001264:	4891      	ldr	r0, [pc, #580]	; (80014ac <fsm_traffic_run+0x2f4>)
 8001266:	f7ff ff4b 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, OFF, OFF, OFF);
 800126a:	2301      	movs	r3, #1
 800126c:	9302      	str	r3, [sp, #8]
 800126e:	2301      	movs	r3, #1
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	2301      	movs	r3, #1
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800127a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800127e:	2180      	movs	r1, #128	; 0x80
 8001280:	488b      	ldr	r0, [pc, #556]	; (80014b0 <fsm_traffic_run+0x2f8>)
 8001282:	f7ff ff3d 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, OFF, OFF, OFF);
 8001286:	2301      	movs	r3, #1
 8001288:	9302      	str	r3, [sp, #8]
 800128a:	2301      	movs	r3, #1
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	2301      	movs	r3, #1
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001296:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800129a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800129e:	4884      	ldr	r0, [pc, #528]	; (80014b0 <fsm_traffic_run+0x2f8>)
 80012a0:	f7ff ff2e 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_6_Pin, SEG_A_Pin, SEG_B_Pin, OFF, OFF, OFF);
 80012a4:	2301      	movs	r3, #1
 80012a6:	9302      	str	r3, [sp, #8]
 80012a8:	2301      	movs	r3, #1
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	2301      	movs	r3, #1
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2302      	movs	r3, #2
 80012b2:	2201      	movs	r2, #1
 80012b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b8:	487d      	ldr	r0, [pc, #500]	; (80014b0 <fsm_traffic_run+0x2f8>)
 80012ba:	f7ff ff21 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_C_Pin, SEG_D_Pin, SEG_E_Pin, OFF, OFF, OFF);
 80012be:	2301      	movs	r3, #1
 80012c0:	9302      	str	r3, [sp, #8]
 80012c2:	2301      	movs	r3, #1
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	2301      	movs	r3, #1
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2310      	movs	r3, #16
 80012cc:	2208      	movs	r2, #8
 80012ce:	2104      	movs	r1, #4
 80012d0:	4877      	ldr	r0, [pc, #476]	; (80014b0 <fsm_traffic_run+0x2f8>)
 80012d2:	f7ff ff15 	bl	8001100 <setColor>
			setColor(GPIOB, SEG_F_Pin, SEG_G_Pin, SEG_G_Pin, OFF, OFF, OFF);
 80012d6:	2301      	movs	r3, #1
 80012d8:	9302      	str	r3, [sp, #8]
 80012da:	2301      	movs	r3, #1
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	2301      	movs	r3, #1
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2340      	movs	r3, #64	; 0x40
 80012e4:	2240      	movs	r2, #64	; 0x40
 80012e6:	2120      	movs	r1, #32
 80012e8:	4871      	ldr	r0, [pc, #452]	; (80014b0 <fsm_traffic_run+0x2f8>)
 80012ea:	f7ff ff09 	bl	8001100 <setColor>

			status = MODIFY_RED;
 80012ee:	4b6e      	ldr	r3, [pc, #440]	; (80014a8 <fsm_traffic_run+0x2f0>)
 80012f0:	2202      	movs	r2, #2
 80012f2:	601a      	str	r2, [r3, #0]
			setTimer3(250);
 80012f4:	20fa      	movs	r0, #250	; 0xfa
 80012f6:	f000 fd05 	bl	8001d04 <setTimer3>
			setTimer2(147);
 80012fa:	2093      	movs	r0, #147	; 0x93
 80012fc:	f000 fce8 	bl	8001cd0 <setTimer2>
			setTimer1(153);
 8001300:	2099      	movs	r0, #153	; 0x99
 8001302:	f000 fccb 	bl	8001c9c <setTimer1>
			break;
 8001306:	e2f5      	b.n	80018f4 <fsm_traffic_run+0x73c>
		case MODIFY_RED:
			if (timer1_flag == 1 && idx == 0) {
 8001308:	4b6a      	ldr	r3, [pc, #424]	; (80014b4 <fsm_traffic_run+0x2fc>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d114      	bne.n	800133a <fsm_traffic_run+0x182>
 8001310:	4b69      	ldr	r3, [pc, #420]	; (80014b8 <fsm_traffic_run+0x300>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d110      	bne.n	800133a <fsm_traffic_run+0x182>
				setTimer1(153);
 8001318:	2099      	movs	r0, #153	; 0x99
 800131a:	f000 fcbf 	bl	8001c9c <setTimer1>
				display_num('A', 1, (red_duration)/10000);
 800131e:	4b67      	ldr	r3, [pc, #412]	; (80014bc <fsm_traffic_run+0x304>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a67      	ldr	r2, [pc, #412]	; (80014c0 <fsm_traffic_run+0x308>)
 8001324:	fb82 1203 	smull	r1, r2, r2, r3
 8001328:	1312      	asrs	r2, r2, #12
 800132a:	17db      	asrs	r3, r3, #31
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	461a      	mov	r2, r3
 8001330:	2101      	movs	r1, #1
 8001332:	2041      	movs	r0, #65	; 0x41
 8001334:	f7ff fc44 	bl	8000bc0 <display_num>
 8001338:	e022      	b.n	8001380 <fsm_traffic_run+0x1c8>
			}
			else if (timer1_flag == 1 && idx == 1) {
 800133a:	4b5e      	ldr	r3, [pc, #376]	; (80014b4 <fsm_traffic_run+0x2fc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d11e      	bne.n	8001380 <fsm_traffic_run+0x1c8>
 8001342:	4b5d      	ldr	r3, [pc, #372]	; (80014b8 <fsm_traffic_run+0x300>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d11a      	bne.n	8001380 <fsm_traffic_run+0x1c8>
				setTimer1(153);
 800134a:	2099      	movs	r0, #153	; 0x99
 800134c:	f000 fca6 	bl	8001c9c <setTimer1>
				display_num('A', 2, ((red_duration)%10000)/1000);
 8001350:	4b5a      	ldr	r3, [pc, #360]	; (80014bc <fsm_traffic_run+0x304>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b5a      	ldr	r3, [pc, #360]	; (80014c0 <fsm_traffic_run+0x308>)
 8001356:	fb83 1302 	smull	r1, r3, r3, r2
 800135a:	1319      	asrs	r1, r3, #12
 800135c:	17d3      	asrs	r3, r2, #31
 800135e:	1acb      	subs	r3, r1, r3
 8001360:	f242 7110 	movw	r1, #10000	; 0x2710
 8001364:	fb01 f303 	mul.w	r3, r1, r3
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	4a56      	ldr	r2, [pc, #344]	; (80014c4 <fsm_traffic_run+0x30c>)
 800136c:	fb82 1203 	smull	r1, r2, r2, r3
 8001370:	1192      	asrs	r2, r2, #6
 8001372:	17db      	asrs	r3, r3, #31
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	461a      	mov	r2, r3
 8001378:	2102      	movs	r1, #2
 800137a:	2041      	movs	r0, #65	; 0x41
 800137c:	f7ff fc20 	bl	8000bc0 <display_num>
			}

			if (timer2_flag == 1 && idx == 0) { // B mode, A value
 8001380:	4b51      	ldr	r3, [pc, #324]	; (80014c8 <fsm_traffic_run+0x310>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d10c      	bne.n	80013a2 <fsm_traffic_run+0x1ea>
 8001388:	4b4b      	ldr	r3, [pc, #300]	; (80014b8 <fsm_traffic_run+0x300>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d108      	bne.n	80013a2 <fsm_traffic_run+0x1ea>
				setTimer2(147);
 8001390:	2093      	movs	r0, #147	; 0x93
 8001392:	f000 fc9d 	bl	8001cd0 <setTimer2>
				display_num('B', 1, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2101      	movs	r1, #1
 800139a:	2042      	movs	r0, #66	; 0x42
 800139c:	f7ff fc10 	bl	8000bc0 <display_num>
 80013a0:	e00f      	b.n	80013c2 <fsm_traffic_run+0x20a>
			}
			else if (timer2_flag == 1 && idx == 1) {
 80013a2:	4b49      	ldr	r3, [pc, #292]	; (80014c8 <fsm_traffic_run+0x310>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d10b      	bne.n	80013c2 <fsm_traffic_run+0x20a>
 80013aa:	4b43      	ldr	r3, [pc, #268]	; (80014b8 <fsm_traffic_run+0x300>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d107      	bne.n	80013c2 <fsm_traffic_run+0x20a>
				setTimer2(147);
 80013b2:	2093      	movs	r0, #147	; 0x93
 80013b4:	f000 fc8c 	bl	8001cd0 <setTimer2>
				display_num('B', 2, MODIFY_RED);
 80013b8:	2202      	movs	r2, #2
 80013ba:	2102      	movs	r1, #2
 80013bc:	2042      	movs	r0, #66	; 0x42
 80013be:	f7ff fbff 	bl	8000bc0 <display_num>
			}

			setColor(GPIOA, LED_AMBER_A_Pin, LED_AMBER_B_Pin, LED_AMBER_B_Pin, OFF, OFF, OFF);
 80013c2:	2301      	movs	r3, #1
 80013c4:	9302      	str	r3, [sp, #8]
 80013c6:	2301      	movs	r3, #1
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	2301      	movs	r3, #1
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2320      	movs	r3, #32
 80013d0:	2220      	movs	r2, #32
 80013d2:	2104      	movs	r1, #4
 80013d4:	4835      	ldr	r0, [pc, #212]	; (80014ac <fsm_traffic_run+0x2f4>)
 80013d6:	f7ff fe93 	bl	8001100 <setColor>
			setColor(GPIOA, LED_GREEN_A_Pin, LED_GREEN_B_Pin, LED_GREEN_B_Pin, OFF, OFF, OFF);
 80013da:	2301      	movs	r3, #1
 80013dc:	9302      	str	r3, [sp, #8]
 80013de:	2301      	movs	r3, #1
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	2301      	movs	r3, #1
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2340      	movs	r3, #64	; 0x40
 80013e8:	2240      	movs	r2, #64	; 0x40
 80013ea:	2108      	movs	r1, #8
 80013ec:	482f      	ldr	r0, [pc, #188]	; (80014ac <fsm_traffic_run+0x2f4>)
 80013ee:	f7ff fe87 	bl	8001100 <setColor>
			if (timer3_flag == 1) {
 80013f2:	4b36      	ldr	r3, [pc, #216]	; (80014cc <fsm_traffic_run+0x314>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d108      	bne.n	800140c <fsm_traffic_run+0x254>
				setTimer3(250);
 80013fa:	20fa      	movs	r0, #250	; 0xfa
 80013fc:	f000 fc82 	bl	8001d04 <setTimer3>
				setColorToggle(GPIOA, LED_RED_A_Pin, LED_RED_B_Pin, LED_RED_B_Pin);
 8001400:	2310      	movs	r3, #16
 8001402:	2210      	movs	r2, #16
 8001404:	2102      	movs	r1, #2
 8001406:	4829      	ldr	r0, [pc, #164]	; (80014ac <fsm_traffic_run+0x2f4>)
 8001408:	f7ff fe9e 	bl	8001148 <setColorToggle>
			}

			if(isButton3Pressed()) red_duration = red_duration;
 800140c:	f7fe ff7e 	bl	800030c <isButton3Pressed>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <fsm_traffic_run+0x266>
 8001416:	4b29      	ldr	r3, [pc, #164]	; (80014bc <fsm_traffic_run+0x304>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a28      	ldr	r2, [pc, #160]	; (80014bc <fsm_traffic_run+0x304>)
 800141c:	6013      	str	r3, [r2, #0]

			if(isButton2Pressed()) {
 800141e:	f7fe ff05 	bl	800022c <isButton2Pressed>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d012      	beq.n	800144e <fsm_traffic_run+0x296>
				red_duration_temp = red_duration;
 8001428:	4b24      	ldr	r3, [pc, #144]	; (80014bc <fsm_traffic_run+0x304>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a28      	ldr	r2, [pc, #160]	; (80014d0 <fsm_traffic_run+0x318>)
 800142e:	6013      	str	r3, [r2, #0]
				red_duration = red_duration + 1000;
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <fsm_traffic_run+0x304>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001438:	4a20      	ldr	r2, [pc, #128]	; (80014bc <fsm_traffic_run+0x304>)
 800143a:	6013      	str	r3, [r2, #0]
				if (red_duration > 99000) red_duration = 1000;
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <fsm_traffic_run+0x304>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a24      	ldr	r2, [pc, #144]	; (80014d4 <fsm_traffic_run+0x31c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	dd03      	ble.n	800144e <fsm_traffic_run+0x296>
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <fsm_traffic_run+0x304>)
 8001448:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800144c:	601a      	str	r2, [r3, #0]
			}

			if (isButton1Pressed()) {
 800144e:	f7fe fe7d 	bl	800014c <isButton1Pressed>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 8246 	beq.w	80018e6 <fsm_traffic_run+0x72e>
				status = MODIFY_AMBER;
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <fsm_traffic_run+0x2f0>)
 800145c:	2203      	movs	r2, #3
 800145e:	601a      	str	r2, [r3, #0]
				setTimer3(250);
 8001460:	20fa      	movs	r0, #250	; 0xfa
 8001462:	f000 fc4f 	bl	8001d04 <setTimer3>
				setTimer2(147);
 8001466:	2093      	movs	r0, #147	; 0x93
 8001468:	f000 fc32 	bl	8001cd0 <setTimer2>
				setTimer1(153);
 800146c:	2099      	movs	r0, #153	; 0x99
 800146e:	f000 fc15 	bl	8001c9c <setTimer1>
			}
			break;
 8001472:	e238      	b.n	80018e6 <fsm_traffic_run+0x72e>
		case MODIFY_AMBER:
			if (timer1_flag == 1 && idx == 0) {
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <fsm_traffic_run+0x2fc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d12f      	bne.n	80014dc <fsm_traffic_run+0x324>
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <fsm_traffic_run+0x300>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d12b      	bne.n	80014dc <fsm_traffic_run+0x324>
				setTimer1(153);
 8001484:	2099      	movs	r0, #153	; 0x99
 8001486:	f000 fc09 	bl	8001c9c <setTimer1>
				display_num('A', 1, (amber_duration)/10000);
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <fsm_traffic_run+0x320>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a0c      	ldr	r2, [pc, #48]	; (80014c0 <fsm_traffic_run+0x308>)
 8001490:	fb82 1203 	smull	r1, r2, r2, r3
 8001494:	1312      	asrs	r2, r2, #12
 8001496:	17db      	asrs	r3, r3, #31
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	461a      	mov	r2, r3
 800149c:	2101      	movs	r1, #1
 800149e:	2041      	movs	r0, #65	; 0x41
 80014a0:	f7ff fb8e 	bl	8000bc0 <display_num>
 80014a4:	e03d      	b.n	8001522 <fsm_traffic_run+0x36a>
 80014a6:	bf00      	nop
 80014a8:	2000003c 	.word	0x2000003c
 80014ac:	40010800 	.word	0x40010800
 80014b0:	40010c00 	.word	0x40010c00
 80014b4:	20000098 	.word	0x20000098
 80014b8:	200000ac 	.word	0x200000ac
 80014bc:	20000040 	.word	0x20000040
 80014c0:	68db8bad 	.word	0x68db8bad
 80014c4:	10624dd3 	.word	0x10624dd3
 80014c8:	200000a0 	.word	0x200000a0
 80014cc:	200000a8 	.word	0x200000a8
 80014d0:	2000008c 	.word	0x2000008c
 80014d4:	000182b8 	.word	0x000182b8
 80014d8:	20000044 	.word	0x20000044
			}
			else if (timer1_flag == 1 && idx == 1) {
 80014dc:	4bb1      	ldr	r3, [pc, #708]	; (80017a4 <fsm_traffic_run+0x5ec>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d11e      	bne.n	8001522 <fsm_traffic_run+0x36a>
 80014e4:	4bb0      	ldr	r3, [pc, #704]	; (80017a8 <fsm_traffic_run+0x5f0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d11a      	bne.n	8001522 <fsm_traffic_run+0x36a>
				setTimer1(153);
 80014ec:	2099      	movs	r0, #153	; 0x99
 80014ee:	f000 fbd5 	bl	8001c9c <setTimer1>
				display_num('A', 2, ((amber_duration)%10000)/1000);
 80014f2:	4bae      	ldr	r3, [pc, #696]	; (80017ac <fsm_traffic_run+0x5f4>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4bae      	ldr	r3, [pc, #696]	; (80017b0 <fsm_traffic_run+0x5f8>)
 80014f8:	fb83 1302 	smull	r1, r3, r3, r2
 80014fc:	1319      	asrs	r1, r3, #12
 80014fe:	17d3      	asrs	r3, r2, #31
 8001500:	1acb      	subs	r3, r1, r3
 8001502:	f242 7110 	movw	r1, #10000	; 0x2710
 8001506:	fb01 f303 	mul.w	r3, r1, r3
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	4aa9      	ldr	r2, [pc, #676]	; (80017b4 <fsm_traffic_run+0x5fc>)
 800150e:	fb82 1203 	smull	r1, r2, r2, r3
 8001512:	1192      	asrs	r2, r2, #6
 8001514:	17db      	asrs	r3, r3, #31
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	461a      	mov	r2, r3
 800151a:	2102      	movs	r1, #2
 800151c:	2041      	movs	r0, #65	; 0x41
 800151e:	f7ff fb4f 	bl	8000bc0 <display_num>
			}

			if (timer2_flag == 1 && idx == 0) { // B mode, A value
 8001522:	4ba5      	ldr	r3, [pc, #660]	; (80017b8 <fsm_traffic_run+0x600>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d10c      	bne.n	8001544 <fsm_traffic_run+0x38c>
 800152a:	4b9f      	ldr	r3, [pc, #636]	; (80017a8 <fsm_traffic_run+0x5f0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d108      	bne.n	8001544 <fsm_traffic_run+0x38c>
				setTimer2(147);
 8001532:	2093      	movs	r0, #147	; 0x93
 8001534:	f000 fbcc 	bl	8001cd0 <setTimer2>
				display_num('B', 1, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	2101      	movs	r1, #1
 800153c:	2042      	movs	r0, #66	; 0x42
 800153e:	f7ff fb3f 	bl	8000bc0 <display_num>
 8001542:	e00f      	b.n	8001564 <fsm_traffic_run+0x3ac>
			}
			else if (timer2_flag == 1 && idx == 1) {
 8001544:	4b9c      	ldr	r3, [pc, #624]	; (80017b8 <fsm_traffic_run+0x600>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d10b      	bne.n	8001564 <fsm_traffic_run+0x3ac>
 800154c:	4b96      	ldr	r3, [pc, #600]	; (80017a8 <fsm_traffic_run+0x5f0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d107      	bne.n	8001564 <fsm_traffic_run+0x3ac>
				setTimer2(147);
 8001554:	2093      	movs	r0, #147	; 0x93
 8001556:	f000 fbbb 	bl	8001cd0 <setTimer2>
				display_num('B', 2, MODIFY_AMBER);
 800155a:	2203      	movs	r2, #3
 800155c:	2102      	movs	r1, #2
 800155e:	2042      	movs	r0, #66	; 0x42
 8001560:	f7ff fb2e 	bl	8000bc0 <display_num>
			}

			setColor(GPIOA, LED_RED_A_Pin, LED_RED_B_Pin, LED_RED_B_Pin, OFF, OFF, OFF);
 8001564:	2301      	movs	r3, #1
 8001566:	9302      	str	r3, [sp, #8]
 8001568:	2301      	movs	r3, #1
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	2301      	movs	r3, #1
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2310      	movs	r3, #16
 8001572:	2210      	movs	r2, #16
 8001574:	2102      	movs	r1, #2
 8001576:	4891      	ldr	r0, [pc, #580]	; (80017bc <fsm_traffic_run+0x604>)
 8001578:	f7ff fdc2 	bl	8001100 <setColor>
			setColor(GPIOA, LED_GREEN_A_Pin, LED_GREEN_B_Pin, LED_GREEN_B_Pin, OFF, OFF, OFF);
 800157c:	2301      	movs	r3, #1
 800157e:	9302      	str	r3, [sp, #8]
 8001580:	2301      	movs	r3, #1
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	2301      	movs	r3, #1
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2340      	movs	r3, #64	; 0x40
 800158a:	2240      	movs	r2, #64	; 0x40
 800158c:	2108      	movs	r1, #8
 800158e:	488b      	ldr	r0, [pc, #556]	; (80017bc <fsm_traffic_run+0x604>)
 8001590:	f7ff fdb6 	bl	8001100 <setColor>
			if (timer3_flag == 1) {
 8001594:	4b8a      	ldr	r3, [pc, #552]	; (80017c0 <fsm_traffic_run+0x608>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d108      	bne.n	80015ae <fsm_traffic_run+0x3f6>
				setTimer3(250);
 800159c:	20fa      	movs	r0, #250	; 0xfa
 800159e:	f000 fbb1 	bl	8001d04 <setTimer3>
				setColorToggle(GPIOA, LED_AMBER_A_Pin, LED_AMBER_B_Pin, LED_AMBER_B_Pin);
 80015a2:	2320      	movs	r3, #32
 80015a4:	2220      	movs	r2, #32
 80015a6:	2104      	movs	r1, #4
 80015a8:	4884      	ldr	r0, [pc, #528]	; (80017bc <fsm_traffic_run+0x604>)
 80015aa:	f7ff fdcd 	bl	8001148 <setColorToggle>
			}

			if(isButton3Pressed()) amber_duration = amber_duration;
 80015ae:	f7fe fead 	bl	800030c <isButton3Pressed>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <fsm_traffic_run+0x408>
 80015b8:	4b7c      	ldr	r3, [pc, #496]	; (80017ac <fsm_traffic_run+0x5f4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a7b      	ldr	r2, [pc, #492]	; (80017ac <fsm_traffic_run+0x5f4>)
 80015be:	6013      	str	r3, [r2, #0]

			if(isButton2Pressed()) {
 80015c0:	f7fe fe34 	bl	800022c <isButton2Pressed>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d012      	beq.n	80015f0 <fsm_traffic_run+0x438>
				amber_duration_temp = amber_duration;
 80015ca:	4b78      	ldr	r3, [pc, #480]	; (80017ac <fsm_traffic_run+0x5f4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a7d      	ldr	r2, [pc, #500]	; (80017c4 <fsm_traffic_run+0x60c>)
 80015d0:	6013      	str	r3, [r2, #0]
				amber_duration = amber_duration + 1000;
 80015d2:	4b76      	ldr	r3, [pc, #472]	; (80017ac <fsm_traffic_run+0x5f4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80015da:	4a74      	ldr	r2, [pc, #464]	; (80017ac <fsm_traffic_run+0x5f4>)
 80015dc:	6013      	str	r3, [r2, #0]
				if (amber_duration > 99000) amber_duration = 1000;
 80015de:	4b73      	ldr	r3, [pc, #460]	; (80017ac <fsm_traffic_run+0x5f4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a79      	ldr	r2, [pc, #484]	; (80017c8 <fsm_traffic_run+0x610>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	dd03      	ble.n	80015f0 <fsm_traffic_run+0x438>
 80015e8:	4b70      	ldr	r3, [pc, #448]	; (80017ac <fsm_traffic_run+0x5f4>)
 80015ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015ee:	601a      	str	r2, [r3, #0]
			}

			if (isButton1Pressed()) {
 80015f0:	f7fe fdac 	bl	800014c <isButton1Pressed>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 8177 	beq.w	80018ea <fsm_traffic_run+0x732>
				status = MODIFY_GREEN;
 80015fc:	4b73      	ldr	r3, [pc, #460]	; (80017cc <fsm_traffic_run+0x614>)
 80015fe:	2204      	movs	r2, #4
 8001600:	601a      	str	r2, [r3, #0]
				setTimer3(250);
 8001602:	20fa      	movs	r0, #250	; 0xfa
 8001604:	f000 fb7e 	bl	8001d04 <setTimer3>
				setTimer2(147);
 8001608:	2093      	movs	r0, #147	; 0x93
 800160a:	f000 fb61 	bl	8001cd0 <setTimer2>
				setTimer1(153);
 800160e:	2099      	movs	r0, #153	; 0x99
 8001610:	f000 fb44 	bl	8001c9c <setTimer1>
			}
			break;
 8001614:	e169      	b.n	80018ea <fsm_traffic_run+0x732>
		case MODIFY_GREEN:
			if (timer1_flag == 1 && idx == 0) {
 8001616:	4b63      	ldr	r3, [pc, #396]	; (80017a4 <fsm_traffic_run+0x5ec>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d114      	bne.n	8001648 <fsm_traffic_run+0x490>
 800161e:	4b62      	ldr	r3, [pc, #392]	; (80017a8 <fsm_traffic_run+0x5f0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d110      	bne.n	8001648 <fsm_traffic_run+0x490>
				setTimer1(153);
 8001626:	2099      	movs	r0, #153	; 0x99
 8001628:	f000 fb38 	bl	8001c9c <setTimer1>
				display_num('A', 1, (green_duration)/10000);
 800162c:	4b68      	ldr	r3, [pc, #416]	; (80017d0 <fsm_traffic_run+0x618>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a5f      	ldr	r2, [pc, #380]	; (80017b0 <fsm_traffic_run+0x5f8>)
 8001632:	fb82 1203 	smull	r1, r2, r2, r3
 8001636:	1312      	asrs	r2, r2, #12
 8001638:	17db      	asrs	r3, r3, #31
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	461a      	mov	r2, r3
 800163e:	2101      	movs	r1, #1
 8001640:	2041      	movs	r0, #65	; 0x41
 8001642:	f7ff fabd 	bl	8000bc0 <display_num>
 8001646:	e022      	b.n	800168e <fsm_traffic_run+0x4d6>
			}
			else if (timer1_flag == 1 && idx == 1) {
 8001648:	4b56      	ldr	r3, [pc, #344]	; (80017a4 <fsm_traffic_run+0x5ec>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d11e      	bne.n	800168e <fsm_traffic_run+0x4d6>
 8001650:	4b55      	ldr	r3, [pc, #340]	; (80017a8 <fsm_traffic_run+0x5f0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d11a      	bne.n	800168e <fsm_traffic_run+0x4d6>
				setTimer1(153);
 8001658:	2099      	movs	r0, #153	; 0x99
 800165a:	f000 fb1f 	bl	8001c9c <setTimer1>
				display_num('A', 2, ((green_duration)%10000)/1000);
 800165e:	4b5c      	ldr	r3, [pc, #368]	; (80017d0 <fsm_traffic_run+0x618>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4b53      	ldr	r3, [pc, #332]	; (80017b0 <fsm_traffic_run+0x5f8>)
 8001664:	fb83 1302 	smull	r1, r3, r3, r2
 8001668:	1319      	asrs	r1, r3, #12
 800166a:	17d3      	asrs	r3, r2, #31
 800166c:	1acb      	subs	r3, r1, r3
 800166e:	f242 7110 	movw	r1, #10000	; 0x2710
 8001672:	fb01 f303 	mul.w	r3, r1, r3
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	4a4e      	ldr	r2, [pc, #312]	; (80017b4 <fsm_traffic_run+0x5fc>)
 800167a:	fb82 1203 	smull	r1, r2, r2, r3
 800167e:	1192      	asrs	r2, r2, #6
 8001680:	17db      	asrs	r3, r3, #31
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	461a      	mov	r2, r3
 8001686:	2102      	movs	r1, #2
 8001688:	2041      	movs	r0, #65	; 0x41
 800168a:	f7ff fa99 	bl	8000bc0 <display_num>
			}

			if (timer2_flag == 1 && idx == 0) { // B mode, A value
 800168e:	4b4a      	ldr	r3, [pc, #296]	; (80017b8 <fsm_traffic_run+0x600>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d10c      	bne.n	80016b0 <fsm_traffic_run+0x4f8>
 8001696:	4b44      	ldr	r3, [pc, #272]	; (80017a8 <fsm_traffic_run+0x5f0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d108      	bne.n	80016b0 <fsm_traffic_run+0x4f8>
				setTimer2(147);
 800169e:	2093      	movs	r0, #147	; 0x93
 80016a0:	f000 fb16 	bl	8001cd0 <setTimer2>
				display_num('B', 1, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2101      	movs	r1, #1
 80016a8:	2042      	movs	r0, #66	; 0x42
 80016aa:	f7ff fa89 	bl	8000bc0 <display_num>
 80016ae:	e00f      	b.n	80016d0 <fsm_traffic_run+0x518>
			}
			else if (timer2_flag == 1 && idx == 1) {
 80016b0:	4b41      	ldr	r3, [pc, #260]	; (80017b8 <fsm_traffic_run+0x600>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d10b      	bne.n	80016d0 <fsm_traffic_run+0x518>
 80016b8:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <fsm_traffic_run+0x5f0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d107      	bne.n	80016d0 <fsm_traffic_run+0x518>
				setTimer2(147);
 80016c0:	2093      	movs	r0, #147	; 0x93
 80016c2:	f000 fb05 	bl	8001cd0 <setTimer2>
				display_num('B', 2, MODIFY_GREEN);
 80016c6:	2204      	movs	r2, #4
 80016c8:	2102      	movs	r1, #2
 80016ca:	2042      	movs	r0, #66	; 0x42
 80016cc:	f7ff fa78 	bl	8000bc0 <display_num>
			}

			setColor(GPIOA, LED_RED_A_Pin, LED_RED_B_Pin, LED_RED_B_Pin, OFF, OFF, OFF);
 80016d0:	2301      	movs	r3, #1
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	2301      	movs	r3, #1
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	2301      	movs	r3, #1
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2310      	movs	r3, #16
 80016de:	2210      	movs	r2, #16
 80016e0:	2102      	movs	r1, #2
 80016e2:	4836      	ldr	r0, [pc, #216]	; (80017bc <fsm_traffic_run+0x604>)
 80016e4:	f7ff fd0c 	bl	8001100 <setColor>
			setColor(GPIOA, LED_AMBER_A_Pin, LED_AMBER_B_Pin, LED_AMBER_B_Pin, OFF, OFF, OFF);
 80016e8:	2301      	movs	r3, #1
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	2301      	movs	r3, #1
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	2301      	movs	r3, #1
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2320      	movs	r3, #32
 80016f6:	2220      	movs	r2, #32
 80016f8:	2104      	movs	r1, #4
 80016fa:	4830      	ldr	r0, [pc, #192]	; (80017bc <fsm_traffic_run+0x604>)
 80016fc:	f7ff fd00 	bl	8001100 <setColor>
			if (timer3_flag == 1) {
 8001700:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <fsm_traffic_run+0x608>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d108      	bne.n	800171a <fsm_traffic_run+0x562>
				setTimer3(250);
 8001708:	20fa      	movs	r0, #250	; 0xfa
 800170a:	f000 fafb 	bl	8001d04 <setTimer3>
				setColorToggle(GPIOA, LED_GREEN_A_Pin, LED_GREEN_B_Pin, LED_GREEN_B_Pin);
 800170e:	2340      	movs	r3, #64	; 0x40
 8001710:	2240      	movs	r2, #64	; 0x40
 8001712:	2108      	movs	r1, #8
 8001714:	4829      	ldr	r0, [pc, #164]	; (80017bc <fsm_traffic_run+0x604>)
 8001716:	f7ff fd17 	bl	8001148 <setColorToggle>
			}

			if(isButton3Pressed()) {
 800171a:	f7fe fdf7 	bl	800030c <isButton3Pressed>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00d      	beq.n	8001740 <fsm_traffic_run+0x588>
				if(isErrorOccured()) {
 8001724:	f7ff fd30 	bl	8001188 <isErrorOccured>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d008      	beq.n	8001740 <fsm_traffic_run+0x588>
					setTimer1(153);
 800172e:	2099      	movs	r0, #153	; 0x99
 8001730:	f000 fab4 	bl	8001c9c <setTimer1>
					setTimer2(147);
 8001734:	2093      	movs	r0, #147	; 0x93
 8001736:	f000 facb 	bl	8001cd0 <setTimer2>
					status = FAULT_CONDITION;
 800173a:	4b24      	ldr	r3, [pc, #144]	; (80017cc <fsm_traffic_run+0x614>)
 800173c:	2205      	movs	r2, #5
 800173e:	601a      	str	r2, [r3, #0]
				}
			}

			if(isButton2Pressed()) {
 8001740:	f7fe fd74 	bl	800022c <isButton2Pressed>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d012      	beq.n	8001770 <fsm_traffic_run+0x5b8>
				green_duration_temp = green_duration;
 800174a:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <fsm_traffic_run+0x618>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a21      	ldr	r2, [pc, #132]	; (80017d4 <fsm_traffic_run+0x61c>)
 8001750:	6013      	str	r3, [r2, #0]
				green_duration = green_duration + 1000;
 8001752:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <fsm_traffic_run+0x618>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800175a:	4a1d      	ldr	r2, [pc, #116]	; (80017d0 <fsm_traffic_run+0x618>)
 800175c:	6013      	str	r3, [r2, #0]
				if (green_duration > 99000) green_duration = 1000;
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <fsm_traffic_run+0x618>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a19      	ldr	r2, [pc, #100]	; (80017c8 <fsm_traffic_run+0x610>)
 8001764:	4293      	cmp	r3, r2
 8001766:	dd03      	ble.n	8001770 <fsm_traffic_run+0x5b8>
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <fsm_traffic_run+0x618>)
 800176a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800176e:	601a      	str	r2, [r3, #0]
			}

			if (isButton1Pressed()) {
 8001770:	f7fe fcec 	bl	800014c <isButton1Pressed>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80b9 	beq.w	80018ee <fsm_traffic_run+0x736>
				if(isErrorOccured()) {
 800177c:	f7ff fd04 	bl	8001188 <isErrorOccured>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d009      	beq.n	800179a <fsm_traffic_run+0x5e2>
					setTimer1(153);
 8001786:	2099      	movs	r0, #153	; 0x99
 8001788:	f000 fa88 	bl	8001c9c <setTimer1>
					setTimer2(147);
 800178c:	2093      	movs	r0, #147	; 0x93
 800178e:	f000 fa9f 	bl	8001cd0 <setTimer2>
					status = FAULT_CONDITION;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <fsm_traffic_run+0x614>)
 8001794:	2205      	movs	r2, #5
 8001796:	601a      	str	r2, [r3, #0]
				}
				else status = NORMAL;
			}
			break;
 8001798:	e0a9      	b.n	80018ee <fsm_traffic_run+0x736>
				else status = NORMAL;
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <fsm_traffic_run+0x614>)
 800179c:	2201      	movs	r2, #1
 800179e:	601a      	str	r2, [r3, #0]
			break;
 80017a0:	e0a5      	b.n	80018ee <fsm_traffic_run+0x736>
 80017a2:	bf00      	nop
 80017a4:	20000098 	.word	0x20000098
 80017a8:	200000ac 	.word	0x200000ac
 80017ac:	20000044 	.word	0x20000044
 80017b0:	68db8bad 	.word	0x68db8bad
 80017b4:	10624dd3 	.word	0x10624dd3
 80017b8:	200000a0 	.word	0x200000a0
 80017bc:	40010800 	.word	0x40010800
 80017c0:	200000a8 	.word	0x200000a8
 80017c4:	20000090 	.word	0x20000090
 80017c8:	000182b8 	.word	0x000182b8
 80017cc:	2000003c 	.word	0x2000003c
 80017d0:	20000048 	.word	0x20000048
 80017d4:	2000004c 	.word	0x2000004c
		case FAULT_CONDITION:
			setColor(GPIOA, LED_AMBER_A_Pin, LED_AMBER_B_Pin, LED_AMBER_B_Pin, OFF, OFF, OFF);
 80017d8:	2301      	movs	r3, #1
 80017da:	9302      	str	r3, [sp, #8]
 80017dc:	2301      	movs	r3, #1
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	2301      	movs	r3, #1
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2320      	movs	r3, #32
 80017e6:	2220      	movs	r2, #32
 80017e8:	2104      	movs	r1, #4
 80017ea:	4844      	ldr	r0, [pc, #272]	; (80018fc <fsm_traffic_run+0x744>)
 80017ec:	f7ff fc88 	bl	8001100 <setColor>
			setColor(GPIOA, LED_RED_A_Pin, LED_RED_B_Pin, LED_RED_B_Pin, OFF, OFF, OFF);
 80017f0:	2301      	movs	r3, #1
 80017f2:	9302      	str	r3, [sp, #8]
 80017f4:	2301      	movs	r3, #1
 80017f6:	9301      	str	r3, [sp, #4]
 80017f8:	2301      	movs	r3, #1
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	2310      	movs	r3, #16
 80017fe:	2210      	movs	r2, #16
 8001800:	2102      	movs	r1, #2
 8001802:	483e      	ldr	r0, [pc, #248]	; (80018fc <fsm_traffic_run+0x744>)
 8001804:	f7ff fc7c 	bl	8001100 <setColor>
			setColor(GPIOA, LED_GREEN_A_Pin, LED_GREEN_B_Pin, LED_GREEN_B_Pin, OFF, OFF, OFF);
 8001808:	2301      	movs	r3, #1
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	2301      	movs	r3, #1
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	2301      	movs	r3, #1
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2340      	movs	r3, #64	; 0x40
 8001816:	2240      	movs	r2, #64	; 0x40
 8001818:	2108      	movs	r1, #8
 800181a:	4838      	ldr	r0, [pc, #224]	; (80018fc <fsm_traffic_run+0x744>)
 800181c:	f7ff fc70 	bl	8001100 <setColor>
			if (timer1_flag == 1 && idx == 0) {
 8001820:	4b37      	ldr	r3, [pc, #220]	; (8001900 <fsm_traffic_run+0x748>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d10c      	bne.n	8001842 <fsm_traffic_run+0x68a>
 8001828:	4b36      	ldr	r3, [pc, #216]	; (8001904 <fsm_traffic_run+0x74c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d108      	bne.n	8001842 <fsm_traffic_run+0x68a>
				setTimer1(153);
 8001830:	2099      	movs	r0, #153	; 0x99
 8001832:	f000 fa33 	bl	8001c9c <setTimer1>
				display_num('A', 1, 11);
 8001836:	220b      	movs	r2, #11
 8001838:	2101      	movs	r1, #1
 800183a:	2041      	movs	r0, #65	; 0x41
 800183c:	f7ff f9c0 	bl	8000bc0 <display_num>
 8001840:	e00f      	b.n	8001862 <fsm_traffic_run+0x6aa>
			}
			else if (timer1_flag == 1 && idx == 1) {
 8001842:	4b2f      	ldr	r3, [pc, #188]	; (8001900 <fsm_traffic_run+0x748>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d10b      	bne.n	8001862 <fsm_traffic_run+0x6aa>
 800184a:	4b2e      	ldr	r3, [pc, #184]	; (8001904 <fsm_traffic_run+0x74c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d107      	bne.n	8001862 <fsm_traffic_run+0x6aa>
				setTimer1(153);
 8001852:	2099      	movs	r0, #153	; 0x99
 8001854:	f000 fa22 	bl	8001c9c <setTimer1>
				display_num('A', 2, 12);
 8001858:	220c      	movs	r2, #12
 800185a:	2102      	movs	r1, #2
 800185c:	2041      	movs	r0, #65	; 0x41
 800185e:	f7ff f9af 	bl	8000bc0 <display_num>
			}
			if (timer2_flag == 1 && idx == 0) { // B mode, A value
 8001862:	4b29      	ldr	r3, [pc, #164]	; (8001908 <fsm_traffic_run+0x750>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d10c      	bne.n	8001884 <fsm_traffic_run+0x6cc>
 800186a:	4b26      	ldr	r3, [pc, #152]	; (8001904 <fsm_traffic_run+0x74c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d108      	bne.n	8001884 <fsm_traffic_run+0x6cc>
				setTimer2(147);
 8001872:	2093      	movs	r0, #147	; 0x93
 8001874:	f000 fa2c 	bl	8001cd0 <setTimer2>
				display_num('B', 1, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2101      	movs	r1, #1
 800187c:	2042      	movs	r0, #66	; 0x42
 800187e:	f7ff f99f 	bl	8000bc0 <display_num>
 8001882:	e00f      	b.n	80018a4 <fsm_traffic_run+0x6ec>
			}
			else if (timer2_flag == 1 && idx == 1) {
 8001884:	4b20      	ldr	r3, [pc, #128]	; (8001908 <fsm_traffic_run+0x750>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d10b      	bne.n	80018a4 <fsm_traffic_run+0x6ec>
 800188c:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <fsm_traffic_run+0x74c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d107      	bne.n	80018a4 <fsm_traffic_run+0x6ec>
				setTimer2(147);
 8001894:	2093      	movs	r0, #147	; 0x93
 8001896:	f000 fa1b 	bl	8001cd0 <setTimer2>
				display_num('B', 2, FAULT_CONDITION);
 800189a:	2205      	movs	r2, #5
 800189c:	2102      	movs	r1, #2
 800189e:	2042      	movs	r0, #66	; 0x42
 80018a0:	f7ff f98e 	bl	8000bc0 <display_num>
			}

			red_duration = red_duration_temp;
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <fsm_traffic_run+0x754>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a19      	ldr	r2, [pc, #100]	; (8001910 <fsm_traffic_run+0x758>)
 80018aa:	6013      	str	r3, [r2, #0]
			amber_duration = amber_duration_temp;
 80018ac:	4b19      	ldr	r3, [pc, #100]	; (8001914 <fsm_traffic_run+0x75c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a19      	ldr	r2, [pc, #100]	; (8001918 <fsm_traffic_run+0x760>)
 80018b2:	6013      	str	r3, [r2, #0]
			green_duration = green_duration_temp;
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <fsm_traffic_run+0x764>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a19      	ldr	r2, [pc, #100]	; (8001920 <fsm_traffic_run+0x768>)
 80018ba:	6013      	str	r3, [r2, #0]

			if (isButton1Pressed()) status = MODIFY_RED;
 80018bc:	f7fe fc46 	bl	800014c <isButton1Pressed>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <fsm_traffic_run+0x714>
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <fsm_traffic_run+0x76c>)
 80018c8:	2202      	movs	r2, #2
 80018ca:	601a      	str	r2, [r3, #0]

			if (isButton3Pressed()) status = NORMAL;
 80018cc:	f7fe fd1e 	bl	800030c <isButton3Pressed>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00d      	beq.n	80018f2 <fsm_traffic_run+0x73a>
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <fsm_traffic_run+0x76c>)
 80018d8:	2201      	movs	r2, #1
 80018da:	601a      	str	r2, [r3, #0]
			break;
 80018dc:	e009      	b.n	80018f2 <fsm_traffic_run+0x73a>
		default:
			break;
 80018de:	bf00      	nop
 80018e0:	e008      	b.n	80018f4 <fsm_traffic_run+0x73c>
			break;
 80018e2:	bf00      	nop
 80018e4:	e006      	b.n	80018f4 <fsm_traffic_run+0x73c>
			break;
 80018e6:	bf00      	nop
 80018e8:	e004      	b.n	80018f4 <fsm_traffic_run+0x73c>
			break;
 80018ea:	bf00      	nop
 80018ec:	e002      	b.n	80018f4 <fsm_traffic_run+0x73c>
			break;
 80018ee:	bf00      	nop
 80018f0:	e000      	b.n	80018f4 <fsm_traffic_run+0x73c>
			break;
 80018f2:	bf00      	nop
	}
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40010800 	.word	0x40010800
 8001900:	20000098 	.word	0x20000098
 8001904:	200000ac 	.word	0x200000ac
 8001908:	200000a0 	.word	0x200000a0
 800190c:	2000008c 	.word	0x2000008c
 8001910:	20000040 	.word	0x20000040
 8001914:	20000090 	.word	0x20000090
 8001918:	20000044 	.word	0x20000044
 800191c:	2000004c 	.word	0x2000004c
 8001920:	20000048 	.word	0x20000048
 8001924:	2000003c 	.word	0x2000003c

08001928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800192c:	f000 fa94 	bl	8001e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001930:	f000 f816 	bl	8001960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001934:	f000 f89c 	bl	8001a70 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001938:	f000 f84e 	bl	80019d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <main+0x2c>)
 800193e:	f001 f9e9 	bl	8002d14 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //setTimer1(100);
  color = INIT;
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <main+0x30>)
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]
  status = NORMAL;
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <main+0x34>)
 800194a:	2201      	movs	r2, #1
 800194c:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_traffic_run();
 800194e:	f7ff fc33 	bl	80011b8 <fsm_traffic_run>
  {
 8001952:	e7fc      	b.n	800194e <main+0x26>
 8001954:	200000b0 	.word	0x200000b0
 8001958:	20000088 	.word	0x20000088
 800195c:	2000003c 	.word	0x2000003c

08001960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b090      	sub	sp, #64	; 0x40
 8001964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001966:	f107 0318 	add.w	r3, r7, #24
 800196a:	2228      	movs	r2, #40	; 0x28
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f001 fd80 	bl	8003474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001982:	2302      	movs	r3, #2
 8001984:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001986:	2301      	movs	r3, #1
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800198a:	2310      	movs	r3, #16
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800198e:	2300      	movs	r3, #0
 8001990:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001992:	f107 0318 	add.w	r3, r7, #24
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fd90 	bl	80024bc <HAL_RCC_OscConfig>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80019a2:	f000 f8e7 	bl	8001b74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a6:	230f      	movs	r3, #15
 80019a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fffc 	bl	80029bc <HAL_RCC_ClockConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80019ca:	f000 f8d3 	bl	8001b74 <Error_Handler>
  }
}
 80019ce:	bf00      	nop
 80019d0:	3740      	adds	r7, #64	; 0x40
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019de:	f107 0308 	add.w	r3, r7, #8
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ec:	463b      	mov	r3, r7
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019f4:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <MX_TIM2_Init+0x94>)
 80019f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <MX_TIM2_Init+0x94>)
 80019fe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001a02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a0c:	2209      	movs	r2, #9
 8001a0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a10:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a1c:	4813      	ldr	r0, [pc, #76]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a1e:	f001 f929 	bl	8002c74 <HAL_TIM_Base_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a28:	f000 f8a4 	bl	8001b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a32:	f107 0308 	add.w	r3, r7, #8
 8001a36:	4619      	mov	r1, r3
 8001a38:	480c      	ldr	r0, [pc, #48]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a3a:	f001 faa7 	bl	8002f8c <HAL_TIM_ConfigClockSource>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a44:	f000 f896 	bl	8001b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a50:	463b      	mov	r3, r7
 8001a52:	4619      	mov	r1, r3
 8001a54:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a56:	f001 fc7f 	bl	8003358 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a60:	f000 f888 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200000b0 	.word	0x200000b0

08001a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a76:	f107 0310 	add.w	r3, r7, #16
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a84:	4b2f      	ldr	r3, [pc, #188]	; (8001b44 <MX_GPIO_Init+0xd4>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a2e      	ldr	r2, [pc, #184]	; (8001b44 <MX_GPIO_Init+0xd4>)
 8001a8a:	f043 0310 	orr.w	r3, r3, #16
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b2c      	ldr	r3, [pc, #176]	; (8001b44 <MX_GPIO_Init+0xd4>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9c:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <MX_GPIO_Init+0xd4>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a28      	ldr	r2, [pc, #160]	; (8001b44 <MX_GPIO_Init+0xd4>)
 8001aa2:	f043 0304 	orr.w	r3, r3, #4
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <MX_GPIO_Init+0xd4>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab4:	4b23      	ldr	r3, [pc, #140]	; (8001b44 <MX_GPIO_Init+0xd4>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4a22      	ldr	r2, [pc, #136]	; (8001b44 <MX_GPIO_Init+0xd4>)
 8001aba:	f043 0308 	orr.w	r3, r3, #8
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <MX_GPIO_Init+0xd4>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_A_Pin|LED_AMBER_A_Pin|LED_GREEN_A_Pin|LED_RED_B_Pin
 8001acc:	2200      	movs	r2, #0
 8001ace:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8001ad2:	481d      	ldr	r0, [pc, #116]	; (8001b48 <MX_GPIO_Init+0xd8>)
 8001ad4:	f000 fcc1 	bl	800245a <HAL_GPIO_WritePin>
                          |LED_AMBER_B_Pin|LED_GREEN_B_Pin|ENA1_Pin|ENA2_Pin
                          |ENB1_Pin|ENB2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_3_Pin
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001ade:	481b      	ldr	r0, [pc, #108]	; (8001b4c <MX_GPIO_Init+0xdc>)
 8001ae0:	f000 fcbb 	bl	800245a <HAL_GPIO_WritePin>
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|SEG_D_Pin
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_0_Pin
                          |SEG_1_Pin|SEG_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001ae4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af2:	f107 0310 	add.w	r3, r7, #16
 8001af6:	4619      	mov	r1, r3
 8001af8:	4815      	ldr	r0, [pc, #84]	; (8001b50 <MX_GPIO_Init+0xe0>)
 8001afa:	f000 fb1d 	bl	8002138 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_A_Pin LED_AMBER_A_Pin LED_GREEN_A_Pin LED_RED_B_Pin
                           LED_AMBER_B_Pin LED_GREEN_B_Pin ENA1_Pin ENA2_Pin
                           ENB1_Pin ENB2_Pin */
  GPIO_InitStruct.Pin = LED_RED_A_Pin|LED_AMBER_A_Pin|LED_GREEN_A_Pin|LED_RED_B_Pin
 8001afe:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8001b02:	613b      	str	r3, [r7, #16]
                          |LED_AMBER_B_Pin|LED_GREEN_B_Pin|ENA1_Pin|ENA2_Pin
                          |ENB1_Pin|ENB2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b04:	2301      	movs	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	4619      	mov	r1, r3
 8001b16:	480c      	ldr	r0, [pc, #48]	; (8001b48 <MX_GPIO_Init+0xd8>)
 8001b18:	f000 fb0e 	bl	8002138 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin SEG_D_Pin
                           SEG_E_Pin SEG_F_Pin SEG_G_Pin SEG_0_Pin
                           SEG_1_Pin SEG_2_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_3_Pin
 8001b1c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001b20:	613b      	str	r3, [r7, #16]
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|SEG_D_Pin
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_0_Pin
                          |SEG_1_Pin|SEG_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b22:	2301      	movs	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2e:	f107 0310 	add.w	r3, r7, #16
 8001b32:	4619      	mov	r1, r3
 8001b34:	4805      	ldr	r0, [pc, #20]	; (8001b4c <MX_GPIO_Init+0xdc>)
 8001b36:	f000 faff 	bl	8002138 <HAL_GPIO_Init>

}
 8001b3a:	bf00      	nop
 8001b3c:	3720      	adds	r7, #32
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40010800 	.word	0x40010800
 8001b4c:	40010c00 	.word	0x40010c00
 8001b50:	40011000 	.word	0x40011000

08001b54 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	timerRun();
 8001b5c:	f000 f90a 	bl	8001d74 <timerRun>
	getKeyInputButton1();
 8001b60:	f7fe fb12 	bl	8000188 <getKeyInputButton1>
	getKeyInputButton2();
 8001b64:	f7fe fb80 	bl	8000268 <getKeyInputButton2>
	getKeyInputButton3();
 8001b68:	f7fe fbee 	bl	8000348 <getKeyInputButton3>
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b78:	b672      	cpsid	i
}
 8001b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <Error_Handler+0x8>
	...

08001b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_MspInit+0x5c>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <HAL_MspInit+0x5c>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6193      	str	r3, [r2, #24]
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_MspInit+0x5c>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_MspInit+0x5c>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <HAL_MspInit+0x5c>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	61d3      	str	r3, [r2, #28]
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <HAL_MspInit+0x5c>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_MspInit+0x60>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_MspInit+0x60>)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40010000 	.word	0x40010000

08001be4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf4:	d113      	bne.n	8001c1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <HAL_TIM_Base_MspInit+0x44>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <HAL_TIM_Base_MspInit+0x44>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	61d3      	str	r3, [r2, #28]
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_TIM_Base_MspInit+0x44>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	201c      	movs	r0, #28
 8001c14:	f000 fa59 	bl	80020ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c18:	201c      	movs	r0, #28
 8001c1a:	f000 fa72 	bl	8002102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000

08001c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <NMI_Handler+0x4>

08001c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c36:	e7fe      	b.n	8001c36 <HardFault_Handler+0x4>

08001c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <MemManage_Handler+0x4>

08001c3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <BusFault_Handler+0x4>

08001c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <UsageFault_Handler+0x4>

08001c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c72:	f000 f937 	bl	8001ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <TIM2_IRQHandler+0x10>)
 8001c82:	f001 f893 	bl	8002dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200000b0 	.word	0x200000b0

08001c90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <setTimer1>:

int idx = 0;
int green_or_amber = -1;
int TICK = 10;

void setTimer1 (int duration) {
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <setTimer1+0x28>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cae:	4a06      	ldr	r2, [pc, #24]	; (8001cc8 <setTimer1+0x2c>)
 8001cb0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <setTimer1+0x30>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000054 	.word	0x20000054
 8001cc8:	20000094 	.word	0x20000094
 8001ccc:	20000098 	.word	0x20000098

08001cd0 <setTimer2>:

void setTimer2 (int duration) {
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8001cd8:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <setTimer2+0x28>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ce2:	4a06      	ldr	r2, [pc, #24]	; (8001cfc <setTimer2+0x2c>)
 8001ce4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <setTimer2+0x30>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000054 	.word	0x20000054
 8001cfc:	2000009c 	.word	0x2000009c
 8001d00:	200000a0 	.word	0x200000a0

08001d04 <setTimer3>:

void setTimer3 (int duration) {
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <setTimer3+0x28>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d16:	4a06      	ldr	r2, [pc, #24]	; (8001d30 <setTimer3+0x2c>)
 8001d18:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <setTimer3+0x30>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000054 	.word	0x20000054
 8001d30:	200000a4 	.word	0x200000a4
 8001d34:	200000a8 	.word	0x200000a8

08001d38 <isTimer1Paused>:

int isTimer1Paused(int pause) {
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	pause = pause / 10;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <isTimer1Paused+0x34>)
 8001d44:	fb82 1203 	smull	r1, r2, r2, r3
 8001d48:	1092      	asrs	r2, r2, #2
 8001d4a:	17db      	asrs	r3, r3, #31
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	607b      	str	r3, [r7, #4]
	if (timer1_counter <= pause) return 1;
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <isTimer1Paused+0x38>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	db01      	blt.n	8001d5e <isTimer1Paused+0x26>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <isTimer1Paused+0x28>
	return 0;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	66666667 	.word	0x66666667
 8001d70:	20000094 	.word	0x20000094

08001d74 <timerRun>:

void timerRun() {
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) --timer1_counter;
 8001d78:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <timerRun+0x7c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	dd05      	ble.n	8001d8c <timerRun+0x18>
 8001d80:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <timerRun+0x7c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	4a1a      	ldr	r2, [pc, #104]	; (8001df0 <timerRun+0x7c>)
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e002      	b.n	8001d92 <timerRun+0x1e>
	else timer1_flag = 1;
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <timerRun+0x80>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	601a      	str	r2, [r3, #0]

	if (timer2_counter > 0) --timer2_counter;
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <timerRun+0x84>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	dd05      	ble.n	8001da6 <timerRun+0x32>
 8001d9a:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <timerRun+0x84>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	4a15      	ldr	r2, [pc, #84]	; (8001df8 <timerRun+0x84>)
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	e013      	b.n	8001dce <timerRun+0x5a>
	else {
		timer2_flag = 1;
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <timerRun+0x88>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
		switch (idx) {
 8001dac:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <timerRun+0x8c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <timerRun+0x46>
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d006      	beq.n	8001dc6 <timerRun+0x52>
				break;
			case 1:
				idx = 0;
				break;
			default:
				break;
 8001db8:	e009      	b.n	8001dce <timerRun+0x5a>
				++idx;
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <timerRun+0x8c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <timerRun+0x8c>)
 8001dc2:	6013      	str	r3, [r2, #0]
				break;
 8001dc4:	e003      	b.n	8001dce <timerRun+0x5a>
				idx = 0;
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <timerRun+0x8c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
				break;
 8001dcc:	bf00      	nop
		}
	}

	if (timer3_counter > 0) --timer3_counter;
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <timerRun+0x90>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	dd05      	ble.n	8001de2 <timerRun+0x6e>
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <timerRun+0x90>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	4a09      	ldr	r2, [pc, #36]	; (8001e04 <timerRun+0x90>)
 8001dde:	6013      	str	r3, [r2, #0]
	else timer3_flag = 1;
}
 8001de0:	e002      	b.n	8001de8 <timerRun+0x74>
	else timer3_flag = 1;
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <timerRun+0x94>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	601a      	str	r2, [r3, #0]
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	20000094 	.word	0x20000094
 8001df4:	20000098 	.word	0x20000098
 8001df8:	2000009c 	.word	0x2000009c
 8001dfc:	200000a0 	.word	0x200000a0
 8001e00:	200000ac 	.word	0x200000ac
 8001e04:	200000a4 	.word	0x200000a4
 8001e08:	200000a8 	.word	0x200000a8

08001e0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e0c:	f7ff ff40 	bl	8001c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e10:	480b      	ldr	r0, [pc, #44]	; (8001e40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e12:	490c      	ldr	r1, [pc, #48]	; (8001e44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e14:	4a0c      	ldr	r2, [pc, #48]	; (8001e48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e18:	e002      	b.n	8001e20 <LoopCopyDataInit>

08001e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1e:	3304      	adds	r3, #4

08001e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e24:	d3f9      	bcc.n	8001e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e26:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e28:	4c09      	ldr	r4, [pc, #36]	; (8001e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e2c:	e001      	b.n	8001e32 <LoopFillZerobss>

08001e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e30:	3204      	adds	r2, #4

08001e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e34:	d3fb      	bcc.n	8001e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e36:	f001 faf9 	bl	800342c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e3a:	f7ff fd75 	bl	8001928 <main>
  bx lr
 8001e3e:	4770      	bx	lr
  ldr r0, =_sdata
 8001e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e44:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001e48:	080034c8 	.word	0x080034c8
  ldr r2, =_sbss
 8001e4c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001e50:	200000fc 	.word	0x200000fc

08001e54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e54:	e7fe      	b.n	8001e54 <ADC1_2_IRQHandler>
	...

08001e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <HAL_Init+0x28>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <HAL_Init+0x28>)
 8001e62:	f043 0310 	orr.w	r3, r3, #16
 8001e66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e68:	2003      	movs	r0, #3
 8001e6a:	f000 f923 	bl	80020b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e6e:	200f      	movs	r0, #15
 8001e70:	f000 f808 	bl	8001e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e74:	f7ff fe84 	bl	8001b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40022000 	.word	0x40022000

08001e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_InitTick+0x54>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_InitTick+0x58>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	4619      	mov	r1, r3
 8001e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 f93b 	bl	800211e <HAL_SYSTICK_Config>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00e      	b.n	8001ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b0f      	cmp	r3, #15
 8001eb6:	d80a      	bhi.n	8001ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f000 f903 	bl	80020ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec4:	4a06      	ldr	r2, [pc, #24]	; (8001ee0 <HAL_InitTick+0x5c>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e000      	b.n	8001ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000050 	.word	0x20000050
 8001edc:	2000005c 	.word	0x2000005c
 8001ee0:	20000058 	.word	0x20000058

08001ee4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_IncTick+0x1c>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_IncTick+0x20>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4a03      	ldr	r2, [pc, #12]	; (8001f04 <HAL_IncTick+0x20>)
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	2000005c 	.word	0x2000005c
 8001f04:	200000f8 	.word	0x200000f8

08001f08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f0c:	4b02      	ldr	r3, [pc, #8]	; (8001f18 <HAL_GetTick+0x10>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr
 8001f18:	200000f8 	.word	0x200000f8

08001f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4e:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	60d3      	str	r3, [r2, #12]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <__NVIC_GetPriorityGrouping+0x18>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f003 0307 	and.w	r3, r3, #7
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	db0b      	blt.n	8001faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	4906      	ldr	r1, [pc, #24]	; (8001fb4 <__NVIC_EnableIRQ+0x34>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	; (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	; (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f1c3 0307 	rsb	r3, r3, #7
 8002026:	2b04      	cmp	r3, #4
 8002028:	bf28      	it	cs
 800202a:	2304      	movcs	r3, #4
 800202c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3304      	adds	r3, #4
 8002032:	2b06      	cmp	r3, #6
 8002034:	d902      	bls.n	800203c <NVIC_EncodePriority+0x30>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3b03      	subs	r3, #3
 800203a:	e000      	b.n	800203e <NVIC_EncodePriority+0x32>
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	f04f 32ff 	mov.w	r2, #4294967295
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	401a      	ands	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002054:	f04f 31ff 	mov.w	r1, #4294967295
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	43d9      	mvns	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	4313      	orrs	r3, r2
         );
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	; 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002080:	d301      	bcc.n	8002086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002082:	2301      	movs	r3, #1
 8002084:	e00f      	b.n	80020a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002086:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <SysTick_Config+0x40>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208e:	210f      	movs	r1, #15
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f7ff ff90 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <SysTick_Config+0x40>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209e:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <SysTick_Config+0x40>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	e000e010 	.word	0xe000e010

080020b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ff2d 	bl	8001f1c <__NVIC_SetPriorityGrouping>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020dc:	f7ff ff42 	bl	8001f64 <__NVIC_GetPriorityGrouping>
 80020e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f7ff ff90 	bl	800200c <NVIC_EncodePriority>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff5f 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff35 	bl	8001f80 <__NVIC_EnableIRQ>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffa2 	bl	8002070 <SysTick_Config>
 800212c:	4603      	mov	r3, r0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002138:	b480      	push	{r7}
 800213a:	b08b      	sub	sp, #44	; 0x2c
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214a:	e148      	b.n	80023de <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800214c:	2201      	movs	r2, #1
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	429a      	cmp	r2, r3
 8002166:	f040 8137 	bne.w	80023d8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	4aa3      	ldr	r2, [pc, #652]	; (80023fc <HAL_GPIO_Init+0x2c4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d05e      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 8002174:	4aa1      	ldr	r2, [pc, #644]	; (80023fc <HAL_GPIO_Init+0x2c4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d875      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 800217a:	4aa1      	ldr	r2, [pc, #644]	; (8002400 <HAL_GPIO_Init+0x2c8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d058      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 8002180:	4a9f      	ldr	r2, [pc, #636]	; (8002400 <HAL_GPIO_Init+0x2c8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d86f      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 8002186:	4a9f      	ldr	r2, [pc, #636]	; (8002404 <HAL_GPIO_Init+0x2cc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d052      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 800218c:	4a9d      	ldr	r2, [pc, #628]	; (8002404 <HAL_GPIO_Init+0x2cc>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d869      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 8002192:	4a9d      	ldr	r2, [pc, #628]	; (8002408 <HAL_GPIO_Init+0x2d0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d04c      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 8002198:	4a9b      	ldr	r2, [pc, #620]	; (8002408 <HAL_GPIO_Init+0x2d0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d863      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 800219e:	4a9b      	ldr	r2, [pc, #620]	; (800240c <HAL_GPIO_Init+0x2d4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d046      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 80021a4:	4a99      	ldr	r2, [pc, #612]	; (800240c <HAL_GPIO_Init+0x2d4>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d85d      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 80021aa:	2b12      	cmp	r3, #18
 80021ac:	d82a      	bhi.n	8002204 <HAL_GPIO_Init+0xcc>
 80021ae:	2b12      	cmp	r3, #18
 80021b0:	d859      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 80021b2:	a201      	add	r2, pc, #4	; (adr r2, 80021b8 <HAL_GPIO_Init+0x80>)
 80021b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b8:	08002233 	.word	0x08002233
 80021bc:	0800220d 	.word	0x0800220d
 80021c0:	0800221f 	.word	0x0800221f
 80021c4:	08002261 	.word	0x08002261
 80021c8:	08002267 	.word	0x08002267
 80021cc:	08002267 	.word	0x08002267
 80021d0:	08002267 	.word	0x08002267
 80021d4:	08002267 	.word	0x08002267
 80021d8:	08002267 	.word	0x08002267
 80021dc:	08002267 	.word	0x08002267
 80021e0:	08002267 	.word	0x08002267
 80021e4:	08002267 	.word	0x08002267
 80021e8:	08002267 	.word	0x08002267
 80021ec:	08002267 	.word	0x08002267
 80021f0:	08002267 	.word	0x08002267
 80021f4:	08002267 	.word	0x08002267
 80021f8:	08002267 	.word	0x08002267
 80021fc:	08002215 	.word	0x08002215
 8002200:	08002229 	.word	0x08002229
 8002204:	4a82      	ldr	r2, [pc, #520]	; (8002410 <HAL_GPIO_Init+0x2d8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800220a:	e02c      	b.n	8002266 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	623b      	str	r3, [r7, #32]
          break;
 8002212:	e029      	b.n	8002268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	3304      	adds	r3, #4
 800221a:	623b      	str	r3, [r7, #32]
          break;
 800221c:	e024      	b.n	8002268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	3308      	adds	r3, #8
 8002224:	623b      	str	r3, [r7, #32]
          break;
 8002226:	e01f      	b.n	8002268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	330c      	adds	r3, #12
 800222e:	623b      	str	r3, [r7, #32]
          break;
 8002230:	e01a      	b.n	8002268 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d102      	bne.n	8002240 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800223a:	2304      	movs	r3, #4
 800223c:	623b      	str	r3, [r7, #32]
          break;
 800223e:	e013      	b.n	8002268 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d105      	bne.n	8002254 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002248:	2308      	movs	r3, #8
 800224a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	611a      	str	r2, [r3, #16]
          break;
 8002252:	e009      	b.n	8002268 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002254:	2308      	movs	r3, #8
 8002256:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	615a      	str	r2, [r3, #20]
          break;
 800225e:	e003      	b.n	8002268 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
          break;
 8002264:	e000      	b.n	8002268 <HAL_GPIO_Init+0x130>
          break;
 8002266:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2bff      	cmp	r3, #255	; 0xff
 800226c:	d801      	bhi.n	8002272 <HAL_GPIO_Init+0x13a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	e001      	b.n	8002276 <HAL_GPIO_Init+0x13e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3304      	adds	r3, #4
 8002276:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2bff      	cmp	r3, #255	; 0xff
 800227c:	d802      	bhi.n	8002284 <HAL_GPIO_Init+0x14c>
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	e002      	b.n	800228a <HAL_GPIO_Init+0x152>
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	3b08      	subs	r3, #8
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	210f      	movs	r1, #15
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	401a      	ands	r2, r3
 800229c:	6a39      	ldr	r1, [r7, #32]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	fa01 f303 	lsl.w	r3, r1, r3
 80022a4:	431a      	orrs	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 8090 	beq.w	80023d8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022b8:	4b56      	ldr	r3, [pc, #344]	; (8002414 <HAL_GPIO_Init+0x2dc>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	4a55      	ldr	r2, [pc, #340]	; (8002414 <HAL_GPIO_Init+0x2dc>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	6193      	str	r3, [r2, #24]
 80022c4:	4b53      	ldr	r3, [pc, #332]	; (8002414 <HAL_GPIO_Init+0x2dc>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022d0:	4a51      	ldr	r2, [pc, #324]	; (8002418 <HAL_GPIO_Init+0x2e0>)
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	089b      	lsrs	r3, r3, #2
 80022d6:	3302      	adds	r3, #2
 80022d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	220f      	movs	r2, #15
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4013      	ands	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a49      	ldr	r2, [pc, #292]	; (800241c <HAL_GPIO_Init+0x2e4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d00d      	beq.n	8002318 <HAL_GPIO_Init+0x1e0>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a48      	ldr	r2, [pc, #288]	; (8002420 <HAL_GPIO_Init+0x2e8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d007      	beq.n	8002314 <HAL_GPIO_Init+0x1dc>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a47      	ldr	r2, [pc, #284]	; (8002424 <HAL_GPIO_Init+0x2ec>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d101      	bne.n	8002310 <HAL_GPIO_Init+0x1d8>
 800230c:	2302      	movs	r3, #2
 800230e:	e004      	b.n	800231a <HAL_GPIO_Init+0x1e2>
 8002310:	2303      	movs	r3, #3
 8002312:	e002      	b.n	800231a <HAL_GPIO_Init+0x1e2>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <HAL_GPIO_Init+0x1e2>
 8002318:	2300      	movs	r3, #0
 800231a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231c:	f002 0203 	and.w	r2, r2, #3
 8002320:	0092      	lsls	r2, r2, #2
 8002322:	4093      	lsls	r3, r2
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800232a:	493b      	ldr	r1, [pc, #236]	; (8002418 <HAL_GPIO_Init+0x2e0>)
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	3302      	adds	r3, #2
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d006      	beq.n	8002352 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002344:	4b38      	ldr	r3, [pc, #224]	; (8002428 <HAL_GPIO_Init+0x2f0>)
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	4937      	ldr	r1, [pc, #220]	; (8002428 <HAL_GPIO_Init+0x2f0>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	608b      	str	r3, [r1, #8]
 8002350:	e006      	b.n	8002360 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002352:	4b35      	ldr	r3, [pc, #212]	; (8002428 <HAL_GPIO_Init+0x2f0>)
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	43db      	mvns	r3, r3
 800235a:	4933      	ldr	r1, [pc, #204]	; (8002428 <HAL_GPIO_Init+0x2f0>)
 800235c:	4013      	ands	r3, r2
 800235e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d006      	beq.n	800237a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800236c:	4b2e      	ldr	r3, [pc, #184]	; (8002428 <HAL_GPIO_Init+0x2f0>)
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	492d      	ldr	r1, [pc, #180]	; (8002428 <HAL_GPIO_Init+0x2f0>)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	60cb      	str	r3, [r1, #12]
 8002378:	e006      	b.n	8002388 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800237a:	4b2b      	ldr	r3, [pc, #172]	; (8002428 <HAL_GPIO_Init+0x2f0>)
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	43db      	mvns	r3, r3
 8002382:	4929      	ldr	r1, [pc, #164]	; (8002428 <HAL_GPIO_Init+0x2f0>)
 8002384:	4013      	ands	r3, r2
 8002386:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d006      	beq.n	80023a2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002394:	4b24      	ldr	r3, [pc, #144]	; (8002428 <HAL_GPIO_Init+0x2f0>)
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	4923      	ldr	r1, [pc, #140]	; (8002428 <HAL_GPIO_Init+0x2f0>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
 80023a0:	e006      	b.n	80023b0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023a2:	4b21      	ldr	r3, [pc, #132]	; (8002428 <HAL_GPIO_Init+0x2f0>)
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	491f      	ldr	r1, [pc, #124]	; (8002428 <HAL_GPIO_Init+0x2f0>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d006      	beq.n	80023ca <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023bc:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <HAL_GPIO_Init+0x2f0>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4919      	ldr	r1, [pc, #100]	; (8002428 <HAL_GPIO_Init+0x2f0>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	600b      	str	r3, [r1, #0]
 80023c8:	e006      	b.n	80023d8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023ca:	4b17      	ldr	r3, [pc, #92]	; (8002428 <HAL_GPIO_Init+0x2f0>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	4915      	ldr	r1, [pc, #84]	; (8002428 <HAL_GPIO_Init+0x2f0>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	3301      	adds	r3, #1
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f47f aeaf 	bne.w	800214c <HAL_GPIO_Init+0x14>
  }
}
 80023ee:	bf00      	nop
 80023f0:	bf00      	nop
 80023f2:	372c      	adds	r7, #44	; 0x2c
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	10320000 	.word	0x10320000
 8002400:	10310000 	.word	0x10310000
 8002404:	10220000 	.word	0x10220000
 8002408:	10210000 	.word	0x10210000
 800240c:	10120000 	.word	0x10120000
 8002410:	10110000 	.word	0x10110000
 8002414:	40021000 	.word	0x40021000
 8002418:	40010000 	.word	0x40010000
 800241c:	40010800 	.word	0x40010800
 8002420:	40010c00 	.word	0x40010c00
 8002424:	40011000 	.word	0x40011000
 8002428:	40010400 	.word	0x40010400

0800242c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	887b      	ldrh	r3, [r7, #2]
 800243e:	4013      	ands	r3, r2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
 8002448:	e001      	b.n	800244e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800244e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr

0800245a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	460b      	mov	r3, r1
 8002464:	807b      	strh	r3, [r7, #2]
 8002466:	4613      	mov	r3, r2
 8002468:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800246a:	787b      	ldrb	r3, [r7, #1]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002470:	887a      	ldrh	r2, [r7, #2]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002476:	e003      	b.n	8002480 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002478:	887b      	ldrh	r3, [r7, #2]
 800247a:	041a      	lsls	r2, r3, #16
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	611a      	str	r2, [r3, #16]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800248a:	b480      	push	{r7}
 800248c:	b085      	sub	sp, #20
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	460b      	mov	r3, r1
 8002494:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800249c:	887a      	ldrh	r2, [r7, #2]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4013      	ands	r3, r2
 80024a2:	041a      	lsls	r2, r3, #16
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	43d9      	mvns	r1, r3
 80024a8:	887b      	ldrh	r3, [r7, #2]
 80024aa:	400b      	ands	r3, r1
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	611a      	str	r2, [r3, #16]
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e26c      	b.n	80029a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8087 	beq.w	80025ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024dc:	4b92      	ldr	r3, [pc, #584]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d00c      	beq.n	8002502 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024e8:	4b8f      	ldr	r3, [pc, #572]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d112      	bne.n	800251a <HAL_RCC_OscConfig+0x5e>
 80024f4:	4b8c      	ldr	r3, [pc, #560]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002500:	d10b      	bne.n	800251a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002502:	4b89      	ldr	r3, [pc, #548]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d06c      	beq.n	80025e8 <HAL_RCC_OscConfig+0x12c>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d168      	bne.n	80025e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e246      	b.n	80029a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002522:	d106      	bne.n	8002532 <HAL_RCC_OscConfig+0x76>
 8002524:	4b80      	ldr	r3, [pc, #512]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a7f      	ldr	r2, [pc, #508]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800252a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	e02e      	b.n	8002590 <HAL_RCC_OscConfig+0xd4>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0x98>
 800253a:	4b7b      	ldr	r3, [pc, #492]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a7a      	ldr	r2, [pc, #488]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b78      	ldr	r3, [pc, #480]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a77      	ldr	r2, [pc, #476]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800254c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e01d      	b.n	8002590 <HAL_RCC_OscConfig+0xd4>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0xbc>
 800255e:	4b72      	ldr	r3, [pc, #456]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a71      	ldr	r2, [pc, #452]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b6f      	ldr	r3, [pc, #444]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a6e      	ldr	r2, [pc, #440]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e00b      	b.n	8002590 <HAL_RCC_OscConfig+0xd4>
 8002578:	4b6b      	ldr	r3, [pc, #428]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a6a      	ldr	r2, [pc, #424]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800257e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	4b68      	ldr	r3, [pc, #416]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a67      	ldr	r2, [pc, #412]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800258a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d013      	beq.n	80025c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7ff fcb6 	bl	8001f08 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a0:	f7ff fcb2 	bl	8001f08 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e1fa      	b.n	80029a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	4b5d      	ldr	r3, [pc, #372]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0xe4>
 80025be:	e014      	b.n	80025ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7ff fca2 	bl	8001f08 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c8:	f7ff fc9e 	bl	8001f08 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e1e6      	b.n	80029a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	4b53      	ldr	r3, [pc, #332]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x10c>
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d063      	beq.n	80026be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025f6:	4b4c      	ldr	r3, [pc, #304]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00b      	beq.n	800261a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002602:	4b49      	ldr	r3, [pc, #292]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b08      	cmp	r3, #8
 800260c:	d11c      	bne.n	8002648 <HAL_RCC_OscConfig+0x18c>
 800260e:	4b46      	ldr	r3, [pc, #280]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d116      	bne.n	8002648 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261a:	4b43      	ldr	r3, [pc, #268]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_RCC_OscConfig+0x176>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e1ba      	b.n	80029a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002632:	4b3d      	ldr	r3, [pc, #244]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4939      	ldr	r1, [pc, #228]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	e03a      	b.n	80026be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d020      	beq.n	8002692 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002650:	4b36      	ldr	r3, [pc, #216]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002652:	2201      	movs	r2, #1
 8002654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002656:	f7ff fc57 	bl	8001f08 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265e:	f7ff fc53 	bl	8001f08 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e19b      	b.n	80029a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002670:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267c:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4927      	ldr	r1, [pc, #156]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
 8002690:	e015      	b.n	80026be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002692:	4b26      	ldr	r3, [pc, #152]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7ff fc36 	bl	8001f08 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a0:	f7ff fc32 	bl	8001f08 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e17a      	b.n	80029a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d03a      	beq.n	8002740 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d019      	beq.n	8002706 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <HAL_RCC_OscConfig+0x274>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d8:	f7ff fc16 	bl	8001f08 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e0:	f7ff fc12 	bl	8001f08 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e15a      	b.n	80029a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026fe:	2001      	movs	r0, #1
 8002700:	f000 fa9a 	bl	8002c38 <RCC_Delay>
 8002704:	e01c      	b.n	8002740 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <HAL_RCC_OscConfig+0x274>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270c:	f7ff fbfc 	bl	8001f08 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002712:	e00f      	b.n	8002734 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002714:	f7ff fbf8 	bl	8001f08 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d908      	bls.n	8002734 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e140      	b.n	80029a8 <HAL_RCC_OscConfig+0x4ec>
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
 800272c:	42420000 	.word	0x42420000
 8002730:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002734:	4b9e      	ldr	r3, [pc, #632]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1e9      	bne.n	8002714 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80a6 	beq.w	800289a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800274e:	2300      	movs	r3, #0
 8002750:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002752:	4b97      	ldr	r3, [pc, #604]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10d      	bne.n	800277a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800275e:	4b94      	ldr	r3, [pc, #592]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	4a93      	ldr	r2, [pc, #588]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 8002764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002768:	61d3      	str	r3, [r2, #28]
 800276a:	4b91      	ldr	r3, [pc, #580]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002776:	2301      	movs	r3, #1
 8002778:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277a:	4b8e      	ldr	r3, [pc, #568]	; (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d118      	bne.n	80027b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002786:	4b8b      	ldr	r3, [pc, #556]	; (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a8a      	ldr	r2, [pc, #552]	; (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 800278c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002792:	f7ff fbb9 	bl	8001f08 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800279a:	f7ff fbb5 	bl	8001f08 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b64      	cmp	r3, #100	; 0x64
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e0fd      	b.n	80029a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ac:	4b81      	ldr	r3, [pc, #516]	; (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d106      	bne.n	80027ce <HAL_RCC_OscConfig+0x312>
 80027c0:	4b7b      	ldr	r3, [pc, #492]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	4a7a      	ldr	r2, [pc, #488]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	6213      	str	r3, [r2, #32]
 80027cc:	e02d      	b.n	800282a <HAL_RCC_OscConfig+0x36e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10c      	bne.n	80027f0 <HAL_RCC_OscConfig+0x334>
 80027d6:	4b76      	ldr	r3, [pc, #472]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	4a75      	ldr	r2, [pc, #468]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	6213      	str	r3, [r2, #32]
 80027e2:	4b73      	ldr	r3, [pc, #460]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	4a72      	ldr	r2, [pc, #456]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 80027e8:	f023 0304 	bic.w	r3, r3, #4
 80027ec:	6213      	str	r3, [r2, #32]
 80027ee:	e01c      	b.n	800282a <HAL_RCC_OscConfig+0x36e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2b05      	cmp	r3, #5
 80027f6:	d10c      	bne.n	8002812 <HAL_RCC_OscConfig+0x356>
 80027f8:	4b6d      	ldr	r3, [pc, #436]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	4a6c      	ldr	r2, [pc, #432]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 80027fe:	f043 0304 	orr.w	r3, r3, #4
 8002802:	6213      	str	r3, [r2, #32]
 8002804:	4b6a      	ldr	r3, [pc, #424]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	4a69      	ldr	r2, [pc, #420]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6213      	str	r3, [r2, #32]
 8002810:	e00b      	b.n	800282a <HAL_RCC_OscConfig+0x36e>
 8002812:	4b67      	ldr	r3, [pc, #412]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	4a66      	ldr	r2, [pc, #408]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 8002818:	f023 0301 	bic.w	r3, r3, #1
 800281c:	6213      	str	r3, [r2, #32]
 800281e:	4b64      	ldr	r3, [pc, #400]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	4a63      	ldr	r2, [pc, #396]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 8002824:	f023 0304 	bic.w	r3, r3, #4
 8002828:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d015      	beq.n	800285e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002832:	f7ff fb69 	bl	8001f08 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7ff fb65 	bl	8001f08 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f241 3288 	movw	r2, #5000	; 0x1388
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e0ab      	b.n	80029a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002850:	4b57      	ldr	r3, [pc, #348]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ee      	beq.n	800283a <HAL_RCC_OscConfig+0x37e>
 800285c:	e014      	b.n	8002888 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285e:	f7ff fb53 	bl	8001f08 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002864:	e00a      	b.n	800287c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002866:	f7ff fb4f 	bl	8001f08 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f241 3288 	movw	r2, #5000	; 0x1388
 8002874:	4293      	cmp	r3, r2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e095      	b.n	80029a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287c:	4b4c      	ldr	r3, [pc, #304]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1ee      	bne.n	8002866 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002888:	7dfb      	ldrb	r3, [r7, #23]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d105      	bne.n	800289a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800288e:	4b48      	ldr	r3, [pc, #288]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	4a47      	ldr	r2, [pc, #284]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 8002894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002898:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 8081 	beq.w	80029a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028a4:	4b42      	ldr	r3, [pc, #264]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d061      	beq.n	8002974 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d146      	bne.n	8002946 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b8:	4b3f      	ldr	r3, [pc, #252]	; (80029b8 <HAL_RCC_OscConfig+0x4fc>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028be:	f7ff fb23 	bl	8001f08 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c6:	f7ff fb1f 	bl	8001f08 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e067      	b.n	80029a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d8:	4b35      	ldr	r3, [pc, #212]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f0      	bne.n	80028c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ec:	d108      	bne.n	8002900 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028ee:	4b30      	ldr	r3, [pc, #192]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	492d      	ldr	r1, [pc, #180]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002900:	4b2b      	ldr	r3, [pc, #172]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a19      	ldr	r1, [r3, #32]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	430b      	orrs	r3, r1
 8002912:	4927      	ldr	r1, [pc, #156]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 8002914:	4313      	orrs	r3, r2
 8002916:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002918:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <HAL_RCC_OscConfig+0x4fc>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7ff faf3 	bl	8001f08 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002926:	f7ff faef 	bl	8001f08 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e037      	b.n	80029a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002938:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x46a>
 8002944:	e02f      	b.n	80029a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002946:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <HAL_RCC_OscConfig+0x4fc>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7ff fadc 	bl	8001f08 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002954:	f7ff fad8 	bl	8001f08 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e020      	b.n	80029a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002966:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x498>
 8002972:	e018      	b.n	80029a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e013      	b.n	80029a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_RCC_OscConfig+0x4f4>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	429a      	cmp	r2, r3
 8002992:	d106      	bne.n	80029a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d001      	beq.n	80029a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40007000 	.word	0x40007000
 80029b8:	42420060 	.word	0x42420060

080029bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0d0      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029d0:	4b6a      	ldr	r3, [pc, #424]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d910      	bls.n	8002a00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b67      	ldr	r3, [pc, #412]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 0207 	bic.w	r2, r3, #7
 80029e6:	4965      	ldr	r1, [pc, #404]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b63      	ldr	r3, [pc, #396]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0b8      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d020      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a18:	4b59      	ldr	r3, [pc, #356]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	4a58      	ldr	r2, [pc, #352]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a30:	4b53      	ldr	r3, [pc, #332]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4a52      	ldr	r2, [pc, #328]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a3c:	4b50      	ldr	r3, [pc, #320]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	494d      	ldr	r1, [pc, #308]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d040      	beq.n	8002adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d107      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	4b47      	ldr	r3, [pc, #284]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d115      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e07f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7a:	4b41      	ldr	r3, [pc, #260]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d109      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e073      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8a:	4b3d      	ldr	r3, [pc, #244]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e06b      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9a:	4b39      	ldr	r3, [pc, #228]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f023 0203 	bic.w	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4936      	ldr	r1, [pc, #216]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aac:	f7ff fa2c 	bl	8001f08 <HAL_GetTick>
 8002ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab4:	f7ff fa28 	bl	8001f08 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e053      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	4b2d      	ldr	r3, [pc, #180]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 020c 	and.w	r2, r3, #12
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d1eb      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002adc:	4b27      	ldr	r3, [pc, #156]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d210      	bcs.n	8002b0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 0207 	bic.w	r2, r3, #7
 8002af2:	4922      	ldr	r1, [pc, #136]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e032      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b18:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4916      	ldr	r1, [pc, #88]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b36:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	490e      	ldr	r1, [pc, #56]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b4a:	f000 f821 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	490a      	ldr	r1, [pc, #40]	; (8002b84 <HAL_RCC_ClockConfig+0x1c8>)
 8002b5c:	5ccb      	ldrb	r3, [r1, r3]
 8002b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b62:	4a09      	ldr	r2, [pc, #36]	; (8002b88 <HAL_RCC_ClockConfig+0x1cc>)
 8002b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b66:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <HAL_RCC_ClockConfig+0x1d0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff f98a 	bl	8001e84 <HAL_InitTick>

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40022000 	.word	0x40022000
 8002b80:	40021000 	.word	0x40021000
 8002b84:	0800349c 	.word	0x0800349c
 8002b88:	20000050 	.word	0x20000050
 8002b8c:	20000058 	.word	0x20000058

08002b90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002baa:	4b1e      	ldr	r3, [pc, #120]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d002      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x30>
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x36>
 8002bbe:	e027      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bc0:	4b19      	ldr	r3, [pc, #100]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bc2:	613b      	str	r3, [r7, #16]
      break;
 8002bc4:	e027      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	0c9b      	lsrs	r3, r3, #18
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	4a17      	ldr	r2, [pc, #92]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bd0:	5cd3      	ldrb	r3, [r2, r3]
 8002bd2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d010      	beq.n	8002c00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bde:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x94>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	0c5b      	lsrs	r3, r3, #17
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	4a11      	ldr	r2, [pc, #68]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bea:	5cd3      	ldrb	r3, [r2, r3]
 8002bec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a0d      	ldr	r2, [pc, #52]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bf2:	fb02 f203 	mul.w	r2, r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	e004      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a0c      	ldr	r2, [pc, #48]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c04:	fb02 f303 	mul.w	r3, r2, r3
 8002c08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	613b      	str	r3, [r7, #16]
      break;
 8002c0e:	e002      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c12:	613b      	str	r3, [r7, #16]
      break;
 8002c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c16:	693b      	ldr	r3, [r7, #16]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	371c      	adds	r7, #28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
 8002c28:	007a1200 	.word	0x007a1200
 8002c2c:	080034ac 	.word	0x080034ac
 8002c30:	080034bc 	.word	0x080034bc
 8002c34:	003d0900 	.word	0x003d0900

08002c38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c40:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <RCC_Delay+0x34>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <RCC_Delay+0x38>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	0a5b      	lsrs	r3, r3, #9
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	fb02 f303 	mul.w	r3, r2, r3
 8002c52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c54:	bf00      	nop
  }
  while (Delay --);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1e5a      	subs	r2, r3, #1
 8002c5a:	60fa      	str	r2, [r7, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f9      	bne.n	8002c54 <RCC_Delay+0x1c>
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	20000050 	.word	0x20000050
 8002c70:	10624dd3 	.word	0x10624dd3

08002c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e041      	b.n	8002d0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe ffa2 	bl	8001be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	f000 fa56 	bl	8003164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d001      	beq.n	8002d2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e035      	b.n	8002d98 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a16      	ldr	r2, [pc, #88]	; (8002da4 <HAL_TIM_Base_Start_IT+0x90>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d009      	beq.n	8002d62 <HAL_TIM_Base_Start_IT+0x4e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d56:	d004      	beq.n	8002d62 <HAL_TIM_Base_Start_IT+0x4e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a12      	ldr	r2, [pc, #72]	; (8002da8 <HAL_TIM_Base_Start_IT+0x94>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d111      	bne.n	8002d86 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2b06      	cmp	r3, #6
 8002d72:	d010      	beq.n	8002d96 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d84:	e007      	b.n	8002d96 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0201 	orr.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40012c00 	.word	0x40012c00
 8002da8:	40000400 	.word	0x40000400

08002dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d020      	beq.n	8002e10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01b      	beq.n	8002e10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0202 	mvn.w	r2, #2
 8002de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f998 	bl	800312c <HAL_TIM_IC_CaptureCallback>
 8002dfc:	e005      	b.n	8002e0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f98b 	bl	800311a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f99a 	bl	800313e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d020      	beq.n	8002e5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01b      	beq.n	8002e5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0204 	mvn.w	r2, #4
 8002e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2202      	movs	r2, #2
 8002e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f972 	bl	800312c <HAL_TIM_IC_CaptureCallback>
 8002e48:	e005      	b.n	8002e56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f965 	bl	800311a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f974 	bl	800313e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d020      	beq.n	8002ea8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d01b      	beq.n	8002ea8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0208 	mvn.w	r2, #8
 8002e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f94c 	bl	800312c <HAL_TIM_IC_CaptureCallback>
 8002e94:	e005      	b.n	8002ea2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f93f 	bl	800311a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f94e 	bl	800313e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d020      	beq.n	8002ef4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01b      	beq.n	8002ef4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0210 	mvn.w	r2, #16
 8002ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2208      	movs	r2, #8
 8002eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f926 	bl	800312c <HAL_TIM_IC_CaptureCallback>
 8002ee0:	e005      	b.n	8002eee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f919 	bl	800311a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f928 	bl	800313e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00c      	beq.n	8002f18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f06f 0201 	mvn.w	r2, #1
 8002f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fe fe1e 	bl	8001b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00c      	beq.n	8002f3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fa6f 	bl	800341a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00c      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d007      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f8f8 	bl	8003150 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f003 0320 	and.w	r3, r3, #32
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00c      	beq.n	8002f84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d007      	beq.n	8002f84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0220 	mvn.w	r2, #32
 8002f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fa42 	bl	8003408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f84:	bf00      	nop
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_TIM_ConfigClockSource+0x1c>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e0b4      	b.n	8003112 <HAL_TIM_ConfigClockSource+0x186>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe0:	d03e      	beq.n	8003060 <HAL_TIM_ConfigClockSource+0xd4>
 8002fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe6:	f200 8087 	bhi.w	80030f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fee:	f000 8086 	beq.w	80030fe <HAL_TIM_ConfigClockSource+0x172>
 8002ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff6:	d87f      	bhi.n	80030f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff8:	2b70      	cmp	r3, #112	; 0x70
 8002ffa:	d01a      	beq.n	8003032 <HAL_TIM_ConfigClockSource+0xa6>
 8002ffc:	2b70      	cmp	r3, #112	; 0x70
 8002ffe:	d87b      	bhi.n	80030f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003000:	2b60      	cmp	r3, #96	; 0x60
 8003002:	d050      	beq.n	80030a6 <HAL_TIM_ConfigClockSource+0x11a>
 8003004:	2b60      	cmp	r3, #96	; 0x60
 8003006:	d877      	bhi.n	80030f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003008:	2b50      	cmp	r3, #80	; 0x50
 800300a:	d03c      	beq.n	8003086 <HAL_TIM_ConfigClockSource+0xfa>
 800300c:	2b50      	cmp	r3, #80	; 0x50
 800300e:	d873      	bhi.n	80030f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003010:	2b40      	cmp	r3, #64	; 0x40
 8003012:	d058      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0x13a>
 8003014:	2b40      	cmp	r3, #64	; 0x40
 8003016:	d86f      	bhi.n	80030f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	2b30      	cmp	r3, #48	; 0x30
 800301a:	d064      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0x15a>
 800301c:	2b30      	cmp	r3, #48	; 0x30
 800301e:	d86b      	bhi.n	80030f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003020:	2b20      	cmp	r3, #32
 8003022:	d060      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003024:	2b20      	cmp	r3, #32
 8003026:	d867      	bhi.n	80030f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003028:	2b00      	cmp	r3, #0
 800302a:	d05c      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0x15a>
 800302c:	2b10      	cmp	r3, #16
 800302e:	d05a      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003030:	e062      	b.n	80030f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6899      	ldr	r1, [r3, #8]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f000 f96a 	bl	800331a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003054:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	609a      	str	r2, [r3, #8]
      break;
 800305e:	e04f      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	6899      	ldr	r1, [r3, #8]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f000 f953 	bl	800331a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003082:	609a      	str	r2, [r3, #8]
      break;
 8003084:	e03c      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	6859      	ldr	r1, [r3, #4]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	461a      	mov	r2, r3
 8003094:	f000 f8ca 	bl	800322c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2150      	movs	r1, #80	; 0x50
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 f921 	bl	80032e6 <TIM_ITRx_SetConfig>
      break;
 80030a4:	e02c      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6859      	ldr	r1, [r3, #4]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	461a      	mov	r2, r3
 80030b4:	f000 f8e8 	bl	8003288 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2160      	movs	r1, #96	; 0x60
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 f911 	bl	80032e6 <TIM_ITRx_SetConfig>
      break;
 80030c4:	e01c      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	6859      	ldr	r1, [r3, #4]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	461a      	mov	r2, r3
 80030d4:	f000 f8aa 	bl	800322c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2140      	movs	r1, #64	; 0x40
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 f901 	bl	80032e6 <TIM_ITRx_SetConfig>
      break;
 80030e4:	e00c      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4619      	mov	r1, r3
 80030f0:	4610      	mov	r0, r2
 80030f2:	f000 f8f8 	bl	80032e6 <TIM_ITRx_SetConfig>
      break;
 80030f6:	e003      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
      break;
 80030fc:	e000      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003110:	7bfb      	ldrb	r3, [r7, #15]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr

0800313e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr

08003150 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
	...

08003164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a2b      	ldr	r2, [pc, #172]	; (8003224 <TIM_Base_SetConfig+0xc0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d007      	beq.n	800318c <TIM_Base_SetConfig+0x28>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003182:	d003      	beq.n	800318c <TIM_Base_SetConfig+0x28>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a28      	ldr	r2, [pc, #160]	; (8003228 <TIM_Base_SetConfig+0xc4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d108      	bne.n	800319e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a20      	ldr	r2, [pc, #128]	; (8003224 <TIM_Base_SetConfig+0xc0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d007      	beq.n	80031b6 <TIM_Base_SetConfig+0x52>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ac:	d003      	beq.n	80031b6 <TIM_Base_SetConfig+0x52>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a1d      	ldr	r2, [pc, #116]	; (8003228 <TIM_Base_SetConfig+0xc4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d108      	bne.n	80031c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a0d      	ldr	r2, [pc, #52]	; (8003224 <TIM_Base_SetConfig+0xc0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d103      	bne.n	80031fc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	f023 0201 	bic.w	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	611a      	str	r2, [r3, #16]
  }
}
 800321a:	bf00      	nop
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr
 8003224:	40012c00 	.word	0x40012c00
 8003228:	40000400 	.word	0x40000400

0800322c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	f023 0201 	bic.w	r2, r3, #1
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003256:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f023 030a 	bic.w	r3, r3, #10
 8003268:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	621a      	str	r2, [r3, #32]
}
 800327e:	bf00      	nop
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr

08003288 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	f023 0210 	bic.w	r2, r3, #16
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	031b      	lsls	r3, r3, #12
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	621a      	str	r2, [r3, #32]
}
 80032dc:	bf00      	nop
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	f043 0307 	orr.w	r3, r3, #7
 8003308:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	609a      	str	r2, [r3, #8]
}
 8003310:	bf00      	nop
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr

0800331a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800331a:	b480      	push	{r7}
 800331c:	b087      	sub	sp, #28
 800331e:	af00      	add	r7, sp, #0
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003334:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	021a      	lsls	r2, r3, #8
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	431a      	orrs	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	4313      	orrs	r3, r2
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	609a      	str	r2, [r3, #8]
}
 800334e:	bf00      	nop
 8003350:	371c      	adds	r7, #28
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800336c:	2302      	movs	r3, #2
 800336e:	e041      	b.n	80033f4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a14      	ldr	r2, [pc, #80]	; (8003400 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d009      	beq.n	80033c8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033bc:	d004      	beq.n	80033c8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a10      	ldr	r2, [pc, #64]	; (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d10c      	bne.n	80033e2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40012c00 	.word	0x40012c00
 8003404:	40000400 	.word	0x40000400

08003408 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr

0800341a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr

0800342c <__libc_init_array>:
 800342c:	b570      	push	{r4, r5, r6, lr}
 800342e:	2600      	movs	r6, #0
 8003430:	4d0c      	ldr	r5, [pc, #48]	; (8003464 <__libc_init_array+0x38>)
 8003432:	4c0d      	ldr	r4, [pc, #52]	; (8003468 <__libc_init_array+0x3c>)
 8003434:	1b64      	subs	r4, r4, r5
 8003436:	10a4      	asrs	r4, r4, #2
 8003438:	42a6      	cmp	r6, r4
 800343a:	d109      	bne.n	8003450 <__libc_init_array+0x24>
 800343c:	f000 f822 	bl	8003484 <_init>
 8003440:	2600      	movs	r6, #0
 8003442:	4d0a      	ldr	r5, [pc, #40]	; (800346c <__libc_init_array+0x40>)
 8003444:	4c0a      	ldr	r4, [pc, #40]	; (8003470 <__libc_init_array+0x44>)
 8003446:	1b64      	subs	r4, r4, r5
 8003448:	10a4      	asrs	r4, r4, #2
 800344a:	42a6      	cmp	r6, r4
 800344c:	d105      	bne.n	800345a <__libc_init_array+0x2e>
 800344e:	bd70      	pop	{r4, r5, r6, pc}
 8003450:	f855 3b04 	ldr.w	r3, [r5], #4
 8003454:	4798      	blx	r3
 8003456:	3601      	adds	r6, #1
 8003458:	e7ee      	b.n	8003438 <__libc_init_array+0xc>
 800345a:	f855 3b04 	ldr.w	r3, [r5], #4
 800345e:	4798      	blx	r3
 8003460:	3601      	adds	r6, #1
 8003462:	e7f2      	b.n	800344a <__libc_init_array+0x1e>
 8003464:	080034c0 	.word	0x080034c0
 8003468:	080034c0 	.word	0x080034c0
 800346c:	080034c0 	.word	0x080034c0
 8003470:	080034c4 	.word	0x080034c4

08003474 <memset>:
 8003474:	4603      	mov	r3, r0
 8003476:	4402      	add	r2, r0
 8003478:	4293      	cmp	r3, r2
 800347a:	d100      	bne.n	800347e <memset+0xa>
 800347c:	4770      	bx	lr
 800347e:	f803 1b01 	strb.w	r1, [r3], #1
 8003482:	e7f9      	b.n	8003478 <memset+0x4>

08003484 <_init>:
 8003484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003486:	bf00      	nop
 8003488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348a:	bc08      	pop	{r3}
 800348c:	469e      	mov	lr, r3
 800348e:	4770      	bx	lr

08003490 <_fini>:
 8003490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003492:	bf00      	nop
 8003494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003496:	bc08      	pop	{r3}
 8003498:	469e      	mov	lr, r3
 800349a:	4770      	bx	lr
