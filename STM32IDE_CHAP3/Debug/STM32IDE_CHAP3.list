
STM32IDE_CHAP3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000337c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003488  08003488  00013488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034ac  080034ac  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080034ac  080034ac  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034ac  080034ac  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034ac  080034ac  000134ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034b0  080034b0  000134b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080034b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000060  08003514  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003514  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099d4  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cba  00000000  00000000  00029a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002b718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002c1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f9a  00000000  00000000  0002cb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c37e  00000000  00000000  00043aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008276e  00000000  00000000  0004fe28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2596  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002920  00000000  00000000  000d25ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08003470 	.word	0x08003470

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08003470 	.word	0x08003470

0800014c <isButton1Pressed>:
int button2_flag = 0;

int TimerForKeyPressButton3 = 200;
int button3_flag = 0;

int isButton1Pressed() {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1) {
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	2000007c 	.word	0x2000007c

08000170 <subKeyProcessButton1>:

void subKeyProcessButton1(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	button1_flag = 1;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <subKeyProcessButton1+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	2000007c 	.word	0x2000007c

08000188 <getKeyInputButton1>:

void getKeyInputButton1() {
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	KeyReg0Button1 = KeyReg1Button1;
 800018c:	4b21      	ldr	r3, [pc, #132]	; (8000214 <getKeyInputButton1+0x8c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a21      	ldr	r2, [pc, #132]	; (8000218 <getKeyInputButton1+0x90>)
 8000192:	6013      	str	r3, [r2, #0]
	KeyReg1Button1 = KeyReg2Button1;
 8000194:	4b21      	ldr	r3, [pc, #132]	; (800021c <getKeyInputButton1+0x94>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a1e      	ldr	r2, [pc, #120]	; (8000214 <getKeyInputButton1+0x8c>)
 800019a:	6013      	str	r3, [r2, #0]
	KeyReg2Button1 = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 800019c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a0:	481f      	ldr	r0, [pc, #124]	; (8000220 <getKeyInputButton1+0x98>)
 80001a2:	f002 f939 	bl	8002418 <HAL_GPIO_ReadPin>
 80001a6:	4603      	mov	r3, r0
 80001a8:	461a      	mov	r2, r3
 80001aa:	4b1c      	ldr	r3, [pc, #112]	; (800021c <getKeyInputButton1+0x94>)
 80001ac:	601a      	str	r2, [r3, #0]

	if ((KeyReg0Button1 == KeyReg1Button1) && (KeyReg1Button1 == KeyReg2Button1)) {
 80001ae:	4b1a      	ldr	r3, [pc, #104]	; (8000218 <getKeyInputButton1+0x90>)
 80001b0:	681a      	ldr	r2, [r3, #0]
 80001b2:	4b18      	ldr	r3, [pc, #96]	; (8000214 <getKeyInputButton1+0x8c>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	429a      	cmp	r2, r3
 80001b8:	d129      	bne.n	800020e <getKeyInputButton1+0x86>
 80001ba:	4b16      	ldr	r3, [pc, #88]	; (8000214 <getKeyInputButton1+0x8c>)
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	4b17      	ldr	r3, [pc, #92]	; (800021c <getKeyInputButton1+0x94>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	d123      	bne.n	800020e <getKeyInputButton1+0x86>
		if (KeyReg3Button1 != KeyReg2Button1) {
 80001c6:	4b17      	ldr	r3, [pc, #92]	; (8000224 <getKeyInputButton1+0x9c>)
 80001c8:	681a      	ldr	r2, [r3, #0]
 80001ca:	4b14      	ldr	r3, [pc, #80]	; (800021c <getKeyInputButton1+0x94>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	429a      	cmp	r2, r3
 80001d0:	d00d      	beq.n	80001ee <getKeyInputButton1+0x66>
			KeyReg3Button1 = KeyReg2Button1;
 80001d2:	4b12      	ldr	r3, [pc, #72]	; (800021c <getKeyInputButton1+0x94>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a13      	ldr	r2, [pc, #76]	; (8000224 <getKeyInputButton1+0x9c>)
 80001d8:	6013      	str	r3, [r2, #0]
			if (KeyReg2Button1 == PRESSED_STATE) {
 80001da:	4b10      	ldr	r3, [pc, #64]	; (800021c <getKeyInputButton1+0x94>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d115      	bne.n	800020e <getKeyInputButton1+0x86>
				// TODO
				subKeyProcessButton1();
 80001e2:	f7ff ffc5 	bl	8000170 <subKeyProcessButton1>
				TimerForKeyPressButton1 = 200;
 80001e6:	4b10      	ldr	r3, [pc, #64]	; (8000228 <getKeyInputButton1+0xa0>)
 80001e8:	22c8      	movs	r2, #200	; 0xc8
 80001ea:	601a      	str	r2, [r3, #0]
					KeyReg3Button1 = NORMAL_STATE;
				}
			}
		}
	}
}
 80001ec:	e00f      	b.n	800020e <getKeyInputButton1+0x86>
			--TimerForKeyPressButton1;
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <getKeyInputButton1+0xa0>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	4a0c      	ldr	r2, [pc, #48]	; (8000228 <getKeyInputButton1+0xa0>)
 80001f6:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPressButton1 == 0) {
 80001f8:	4b0b      	ldr	r3, [pc, #44]	; (8000228 <getKeyInputButton1+0xa0>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d106      	bne.n	800020e <getKeyInputButton1+0x86>
				if (KeyReg2Button1 == PRESSED_STATE) {
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <getKeyInputButton1+0x94>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d102      	bne.n	800020e <getKeyInputButton1+0x86>
					KeyReg3Button1 = NORMAL_STATE;
 8000208:	4b06      	ldr	r3, [pc, #24]	; (8000224 <getKeyInputButton1+0x9c>)
 800020a:	2201      	movs	r2, #1
 800020c:	601a      	str	r2, [r3, #0]
}
 800020e:	bf00      	nop
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	20000004 	.word	0x20000004
 8000218:	20000000 	.word	0x20000000
 800021c:	20000008 	.word	0x20000008
 8000220:	40011000 	.word	0x40011000
 8000224:	2000000c 	.word	0x2000000c
 8000228:	20000030 	.word	0x20000030

0800022c <isButton2Pressed>:

int isButton2Pressed() {
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
	if(button2_flag == 1) {
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <isButton2Pressed+0x20>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2b01      	cmp	r3, #1
 8000236:	d104      	bne.n	8000242 <isButton2Pressed+0x16>
		button2_flag = 0;
 8000238:	4b04      	ldr	r3, [pc, #16]	; (800024c <isButton2Pressed+0x20>)
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
		return 1;
 800023e:	2301      	movs	r3, #1
 8000240:	e000      	b.n	8000244 <isButton2Pressed+0x18>
	}
	return 0;
 8000242:	2300      	movs	r3, #0
}
 8000244:	4618      	mov	r0, r3
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	20000080 	.word	0x20000080

08000250 <subKeyProcessButton2>:

void subKeyProcessButton2(){
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
	button2_flag = 1;
 8000254:	4b03      	ldr	r3, [pc, #12]	; (8000264 <subKeyProcessButton2+0x14>)
 8000256:	2201      	movs	r2, #1
 8000258:	601a      	str	r2, [r3, #0]
}
 800025a:	bf00      	nop
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	20000080 	.word	0x20000080

08000268 <getKeyInputButton2>:

void getKeyInputButton2() {
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	KeyReg0Button2 = KeyReg1Button2;
 800026c:	4b21      	ldr	r3, [pc, #132]	; (80002f4 <getKeyInputButton2+0x8c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a21      	ldr	r2, [pc, #132]	; (80002f8 <getKeyInputButton2+0x90>)
 8000272:	6013      	str	r3, [r2, #0]
	KeyReg1Button2 = KeyReg2Button2;
 8000274:	4b21      	ldr	r3, [pc, #132]	; (80002fc <getKeyInputButton2+0x94>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a1e      	ldr	r2, [pc, #120]	; (80002f4 <getKeyInputButton2+0x8c>)
 800027a:	6013      	str	r3, [r2, #0]
	KeyReg2Button2 = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 800027c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000280:	481f      	ldr	r0, [pc, #124]	; (8000300 <getKeyInputButton2+0x98>)
 8000282:	f002 f8c9 	bl	8002418 <HAL_GPIO_ReadPin>
 8000286:	4603      	mov	r3, r0
 8000288:	461a      	mov	r2, r3
 800028a:	4b1c      	ldr	r3, [pc, #112]	; (80002fc <getKeyInputButton2+0x94>)
 800028c:	601a      	str	r2, [r3, #0]

	if ((KeyReg0Button2 == KeyReg1Button2) && (KeyReg1Button2 == KeyReg2Button2)) {
 800028e:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <getKeyInputButton2+0x90>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	4b18      	ldr	r3, [pc, #96]	; (80002f4 <getKeyInputButton2+0x8c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	429a      	cmp	r2, r3
 8000298:	d129      	bne.n	80002ee <getKeyInputButton2+0x86>
 800029a:	4b16      	ldr	r3, [pc, #88]	; (80002f4 <getKeyInputButton2+0x8c>)
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	4b17      	ldr	r3, [pc, #92]	; (80002fc <getKeyInputButton2+0x94>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d123      	bne.n	80002ee <getKeyInputButton2+0x86>
		if (KeyReg3Button2 != KeyReg2Button2) {
 80002a6:	4b17      	ldr	r3, [pc, #92]	; (8000304 <getKeyInputButton2+0x9c>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	4b14      	ldr	r3, [pc, #80]	; (80002fc <getKeyInputButton2+0x94>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d00d      	beq.n	80002ce <getKeyInputButton2+0x66>
			KeyReg3Button2 = KeyReg2Button2;
 80002b2:	4b12      	ldr	r3, [pc, #72]	; (80002fc <getKeyInputButton2+0x94>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a13      	ldr	r2, [pc, #76]	; (8000304 <getKeyInputButton2+0x9c>)
 80002b8:	6013      	str	r3, [r2, #0]
			if (KeyReg2Button2 == PRESSED_STATE) {
 80002ba:	4b10      	ldr	r3, [pc, #64]	; (80002fc <getKeyInputButton2+0x94>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d115      	bne.n	80002ee <getKeyInputButton2+0x86>
				// TODO
				subKeyProcessButton2();
 80002c2:	f7ff ffc5 	bl	8000250 <subKeyProcessButton2>
				TimerForKeyPressButton2 = 200;
 80002c6:	4b10      	ldr	r3, [pc, #64]	; (8000308 <getKeyInputButton2+0xa0>)
 80002c8:	22c8      	movs	r2, #200	; 0xc8
 80002ca:	601a      	str	r2, [r3, #0]
					KeyReg3Button2 = NORMAL_STATE;
				}
			}
		}
	}
}
 80002cc:	e00f      	b.n	80002ee <getKeyInputButton2+0x86>
			--TimerForKeyPressButton2;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <getKeyInputButton2+0xa0>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	3b01      	subs	r3, #1
 80002d4:	4a0c      	ldr	r2, [pc, #48]	; (8000308 <getKeyInputButton2+0xa0>)
 80002d6:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPressButton2 == 0) {
 80002d8:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <getKeyInputButton2+0xa0>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d106      	bne.n	80002ee <getKeyInputButton2+0x86>
				if (KeyReg2Button2 == PRESSED_STATE) {
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <getKeyInputButton2+0x94>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d102      	bne.n	80002ee <getKeyInputButton2+0x86>
					KeyReg3Button2 = NORMAL_STATE;
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <getKeyInputButton2+0x9c>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	601a      	str	r2, [r3, #0]
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000014 	.word	0x20000014
 80002f8:	20000010 	.word	0x20000010
 80002fc:	20000018 	.word	0x20000018
 8000300:	40011000 	.word	0x40011000
 8000304:	2000001c 	.word	0x2000001c
 8000308:	20000034 	.word	0x20000034

0800030c <isButton3Pressed>:

int isButton3Pressed() {
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
	if(button3_flag == 1) {
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <isButton3Pressed+0x20>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d104      	bne.n	8000322 <isButton3Pressed+0x16>
		button3_flag = 0;
 8000318:	4b04      	ldr	r3, [pc, #16]	; (800032c <isButton3Pressed+0x20>)
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
		return 1;
 800031e:	2301      	movs	r3, #1
 8000320:	e000      	b.n	8000324 <isButton3Pressed+0x18>
	}
	return 0;
 8000322:	2300      	movs	r3, #0
}
 8000324:	4618      	mov	r0, r3
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	20000084 	.word	0x20000084

08000330 <subKeyProcessButton3>:

void subKeyProcessButton3(){
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	button3_flag = 1;
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <subKeyProcessButton3+0x14>)
 8000336:	2201      	movs	r2, #1
 8000338:	601a      	str	r2, [r3, #0]
}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	20000084 	.word	0x20000084

08000348 <getKeyInputButton3>:

void getKeyInputButton3() {
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	KeyReg0Button3 = KeyReg1Button3;
 800034c:	4b21      	ldr	r3, [pc, #132]	; (80003d4 <getKeyInputButton3+0x8c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a21      	ldr	r2, [pc, #132]	; (80003d8 <getKeyInputButton3+0x90>)
 8000352:	6013      	str	r3, [r2, #0]
	KeyReg1Button3 = KeyReg2Button3;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <getKeyInputButton3+0x94>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a1e      	ldr	r2, [pc, #120]	; (80003d4 <getKeyInputButton3+0x8c>)
 800035a:	6013      	str	r3, [r2, #0]
	KeyReg2Button3 = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 800035c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000360:	481f      	ldr	r0, [pc, #124]	; (80003e0 <getKeyInputButton3+0x98>)
 8000362:	f002 f859 	bl	8002418 <HAL_GPIO_ReadPin>
 8000366:	4603      	mov	r3, r0
 8000368:	461a      	mov	r2, r3
 800036a:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <getKeyInputButton3+0x94>)
 800036c:	601a      	str	r2, [r3, #0]

	if ((KeyReg0Button3 == KeyReg1Button3) && (KeyReg1Button3 == KeyReg2Button3)) {
 800036e:	4b1a      	ldr	r3, [pc, #104]	; (80003d8 <getKeyInputButton3+0x90>)
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <getKeyInputButton3+0x8c>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	429a      	cmp	r2, r3
 8000378:	d129      	bne.n	80003ce <getKeyInputButton3+0x86>
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <getKeyInputButton3+0x8c>)
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <getKeyInputButton3+0x94>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	429a      	cmp	r2, r3
 8000384:	d123      	bne.n	80003ce <getKeyInputButton3+0x86>
		if (KeyReg3Button3 != KeyReg2Button3) {
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <getKeyInputButton3+0x9c>)
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <getKeyInputButton3+0x94>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	429a      	cmp	r2, r3
 8000390:	d00d      	beq.n	80003ae <getKeyInputButton3+0x66>
			KeyReg3Button3 = KeyReg2Button3;
 8000392:	4b12      	ldr	r3, [pc, #72]	; (80003dc <getKeyInputButton3+0x94>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <getKeyInputButton3+0x9c>)
 8000398:	6013      	str	r3, [r2, #0]
			if (KeyReg2Button3 == PRESSED_STATE) {
 800039a:	4b10      	ldr	r3, [pc, #64]	; (80003dc <getKeyInputButton3+0x94>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d115      	bne.n	80003ce <getKeyInputButton3+0x86>
				// TODO
				subKeyProcessButton3();
 80003a2:	f7ff ffc5 	bl	8000330 <subKeyProcessButton3>
				TimerForKeyPressButton3 = 200;
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <getKeyInputButton3+0xa0>)
 80003a8:	22c8      	movs	r2, #200	; 0xc8
 80003aa:	601a      	str	r2, [r3, #0]
					KeyReg3Button3 = NORMAL_STATE;
				}
			}
		}
	}
}
 80003ac:	e00f      	b.n	80003ce <getKeyInputButton3+0x86>
			--TimerForKeyPressButton3;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <getKeyInputButton3+0xa0>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	4a0c      	ldr	r2, [pc, #48]	; (80003e8 <getKeyInputButton3+0xa0>)
 80003b6:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPressButton3 == 0) {
 80003b8:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <getKeyInputButton3+0xa0>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d106      	bne.n	80003ce <getKeyInputButton3+0x86>
				if (KeyReg2Button3 == PRESSED_STATE) {
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <getKeyInputButton3+0x94>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d102      	bne.n	80003ce <getKeyInputButton3+0x86>
					KeyReg3Button3 = NORMAL_STATE;
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <getKeyInputButton3+0x9c>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	601a      	str	r2, [r3, #0]
}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000024 	.word	0x20000024
 80003d8:	20000020 	.word	0x20000020
 80003dc:	20000028 	.word	0x20000028
 80003e0:	40011000 	.word	0x40011000
 80003e4:	2000002c 	.word	0x2000002c
 80003e8:	20000038 	.word	0x20000038

080003ec <fsm_automatic_run>:
 */
#include <fsm_automatic.h>

int color = INIT;

void fsm_automatic_run() {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af04      	add	r7, sp, #16
	switch (color) {
 80003f2:	4bba      	ldr	r3, [pc, #744]	; (80006dc <fsm_automatic_run+0x2f0>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	3b01      	subs	r3, #1
 80003f8:	2b03      	cmp	r3, #3
 80003fa:	f200 81c4 	bhi.w	8000786 <fsm_automatic_run+0x39a>
 80003fe:	a201      	add	r2, pc, #4	; (adr r2, 8000404 <fsm_automatic_run+0x18>)
 8000400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000404:	08000415 	.word	0x08000415
 8000408:	08000457 	.word	0x08000457
 800040c:	080005c9 	.word	0x080005c9
 8000410:	0800067b 	.word	0x0800067b
		case INIT:
			setColor(GPIOA, LED_RED_A_Pin, LED_AMBER_A_Pin, LED_GREEN_A_Pin, OFF, OFF, OFF);
 8000414:	2301      	movs	r3, #1
 8000416:	9302      	str	r3, [sp, #8]
 8000418:	2301      	movs	r3, #1
 800041a:	9301      	str	r3, [sp, #4]
 800041c:	2301      	movs	r3, #1
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	2308      	movs	r3, #8
 8000422:	2204      	movs	r2, #4
 8000424:	2102      	movs	r1, #2
 8000426:	48ae      	ldr	r0, [pc, #696]	; (80006e0 <fsm_automatic_run+0x2f4>)
 8000428:	f001 f8b8 	bl	800159c <setColor>
			setColor(GPIOA, LED_RED_B_Pin, LED_AMBER_B_Pin, LED_GREEN_B_Pin, OFF, OFF, OFF);
 800042c:	2301      	movs	r3, #1
 800042e:	9302      	str	r3, [sp, #8]
 8000430:	2301      	movs	r3, #1
 8000432:	9301      	str	r3, [sp, #4]
 8000434:	2301      	movs	r3, #1
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	2340      	movs	r3, #64	; 0x40
 800043a:	2220      	movs	r2, #32
 800043c:	2110      	movs	r1, #16
 800043e:	48a8      	ldr	r0, [pc, #672]	; (80006e0 <fsm_automatic_run+0x2f4>)
 8000440:	f001 f8ac 	bl	800159c <setColor>

			color = RED;
 8000444:	4ba5      	ldr	r3, [pc, #660]	; (80006dc <fsm_automatic_run+0x2f0>)
 8000446:	2202      	movs	r2, #2
 8000448:	601a      	str	r2, [r3, #0]
			setTimer1(red_duration);
 800044a:	4ba6      	ldr	r3, [pc, #664]	; (80006e4 <fsm_automatic_run+0x2f8>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4618      	mov	r0, r3
 8000450:	f000 ff5e 	bl	8001310 <setTimer1>
			break;
 8000454:	e19e      	b.n	8000794 <fsm_automatic_run+0x3a8>
		case RED:
			display_time();
 8000456:	f000 fdeb 	bl	8001030 <display_time>
			setColor(GPIOA, LED_RED_A_Pin, LED_AMBER_A_Pin, LED_GREEN_A_Pin, ON, OFF, OFF);
 800045a:	2301      	movs	r3, #1
 800045c:	9302      	str	r3, [sp, #8]
 800045e:	2301      	movs	r3, #1
 8000460:	9301      	str	r3, [sp, #4]
 8000462:	2300      	movs	r3, #0
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	2308      	movs	r3, #8
 8000468:	2204      	movs	r2, #4
 800046a:	2102      	movs	r1, #2
 800046c:	489c      	ldr	r0, [pc, #624]	; (80006e0 <fsm_automatic_run+0x2f4>)
 800046e:	f001 f895 	bl	800159c <setColor>
			if (isTimer1Paused(red_duration - green_duration)) {
 8000472:	4b9c      	ldr	r3, [pc, #624]	; (80006e4 <fsm_automatic_run+0x2f8>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	4b9c      	ldr	r3, [pc, #624]	; (80006e8 <fsm_automatic_run+0x2fc>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	1ad3      	subs	r3, r2, r3
 800047c:	4618      	mov	r0, r3
 800047e:	f000 ff95 	bl	80013ac <isTimer1Paused>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d03d      	beq.n	8000504 <fsm_automatic_run+0x118>
				if (idx == 0) {
 8000488:	4b98      	ldr	r3, [pc, #608]	; (80006ec <fsm_automatic_run+0x300>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d10e      	bne.n	80004ae <fsm_automatic_run+0xc2>
					display_num('B', 1, (timer1_counter + 100)/1000);
 8000490:	4b97      	ldr	r3, [pc, #604]	; (80006f0 <fsm_automatic_run+0x304>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	3364      	adds	r3, #100	; 0x64
 8000496:	4a97      	ldr	r2, [pc, #604]	; (80006f4 <fsm_automatic_run+0x308>)
 8000498:	fb82 1203 	smull	r1, r2, r2, r3
 800049c:	1192      	asrs	r2, r2, #6
 800049e:	17db      	asrs	r3, r3, #31
 80004a0:	1ad3      	subs	r3, r2, r3
 80004a2:	461a      	mov	r2, r3
 80004a4:	2101      	movs	r1, #1
 80004a6:	2042      	movs	r0, #66	; 0x42
 80004a8:	f000 fd5a 	bl	8000f60 <display_num>
 80004ac:	e01d      	b.n	80004ea <fsm_automatic_run+0xfe>
				}
				else if (idx == 1) {
 80004ae:	4b8f      	ldr	r3, [pc, #572]	; (80006ec <fsm_automatic_run+0x300>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d119      	bne.n	80004ea <fsm_automatic_run+0xfe>
					display_num('B', 2, ((timer1_counter + 100)%1000)/100);
 80004b6:	4b8e      	ldr	r3, [pc, #568]	; (80006f0 <fsm_automatic_run+0x304>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80004be:	4b8d      	ldr	r3, [pc, #564]	; (80006f4 <fsm_automatic_run+0x308>)
 80004c0:	fb83 1302 	smull	r1, r3, r3, r2
 80004c4:	1199      	asrs	r1, r3, #6
 80004c6:	17d3      	asrs	r3, r2, #31
 80004c8:	1acb      	subs	r3, r1, r3
 80004ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004ce:	fb01 f303 	mul.w	r3, r1, r3
 80004d2:	1ad3      	subs	r3, r2, r3
 80004d4:	4a88      	ldr	r2, [pc, #544]	; (80006f8 <fsm_automatic_run+0x30c>)
 80004d6:	fb82 1203 	smull	r1, r2, r2, r3
 80004da:	1152      	asrs	r2, r2, #5
 80004dc:	17db      	asrs	r3, r3, #31
 80004de:	1ad3      	subs	r3, r2, r3
 80004e0:	461a      	mov	r2, r3
 80004e2:	2102      	movs	r1, #2
 80004e4:	2042      	movs	r0, #66	; 0x42
 80004e6:	f000 fd3b 	bl	8000f60 <display_num>
				}
				setColor(GPIOA, LED_RED_B_Pin, LED_AMBER_B_Pin, LED_GREEN_B_Pin, OFF, ON, OFF);
 80004ea:	2301      	movs	r3, #1
 80004ec:	9302      	str	r3, [sp, #8]
 80004ee:	2300      	movs	r3, #0
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2301      	movs	r3, #1
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	2340      	movs	r3, #64	; 0x40
 80004f8:	2220      	movs	r2, #32
 80004fa:	2110      	movs	r1, #16
 80004fc:	4878      	ldr	r0, [pc, #480]	; (80006e0 <fsm_automatic_run+0x2f4>)
 80004fe:	f001 f84d 	bl	800159c <setColor>
 8000502:	e053      	b.n	80005ac <fsm_automatic_run+0x1c0>
			}
			else {
				if (idx == 0) {
 8000504:	4b79      	ldr	r3, [pc, #484]	; (80006ec <fsm_automatic_run+0x300>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d11d      	bne.n	8000548 <fsm_automatic_run+0x15c>
					display_num('B', 1, ((timer1_counter + 100)/100 - amber_duration/1000)/10);
 800050c:	4b78      	ldr	r3, [pc, #480]	; (80006f0 <fsm_automatic_run+0x304>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3364      	adds	r3, #100	; 0x64
 8000512:	4a79      	ldr	r2, [pc, #484]	; (80006f8 <fsm_automatic_run+0x30c>)
 8000514:	fb82 1203 	smull	r1, r2, r2, r3
 8000518:	1152      	asrs	r2, r2, #5
 800051a:	17db      	asrs	r3, r3, #31
 800051c:	1ad2      	subs	r2, r2, r3
 800051e:	4b77      	ldr	r3, [pc, #476]	; (80006fc <fsm_automatic_run+0x310>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4974      	ldr	r1, [pc, #464]	; (80006f4 <fsm_automatic_run+0x308>)
 8000524:	fb81 0103 	smull	r0, r1, r1, r3
 8000528:	1189      	asrs	r1, r1, #6
 800052a:	17db      	asrs	r3, r3, #31
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	4413      	add	r3, r2
 8000530:	4a73      	ldr	r2, [pc, #460]	; (8000700 <fsm_automatic_run+0x314>)
 8000532:	fb82 1203 	smull	r1, r2, r2, r3
 8000536:	1092      	asrs	r2, r2, #2
 8000538:	17db      	asrs	r3, r3, #31
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	461a      	mov	r2, r3
 800053e:	2101      	movs	r1, #1
 8000540:	2042      	movs	r0, #66	; 0x42
 8000542:	f000 fd0d 	bl	8000f60 <display_num>
 8000546:	e025      	b.n	8000594 <fsm_automatic_run+0x1a8>
				}
				else if (idx == 1) {
 8000548:	4b68      	ldr	r3, [pc, #416]	; (80006ec <fsm_automatic_run+0x300>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d121      	bne.n	8000594 <fsm_automatic_run+0x1a8>
					display_num('B', 2, ((timer1_counter + 100)/100 - amber_duration/1000)%10);
 8000550:	4b67      	ldr	r3, [pc, #412]	; (80006f0 <fsm_automatic_run+0x304>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	3364      	adds	r3, #100	; 0x64
 8000556:	4a68      	ldr	r2, [pc, #416]	; (80006f8 <fsm_automatic_run+0x30c>)
 8000558:	fb82 1203 	smull	r1, r2, r2, r3
 800055c:	1152      	asrs	r2, r2, #5
 800055e:	17db      	asrs	r3, r3, #31
 8000560:	1ad2      	subs	r2, r2, r3
 8000562:	4b66      	ldr	r3, [pc, #408]	; (80006fc <fsm_automatic_run+0x310>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4963      	ldr	r1, [pc, #396]	; (80006f4 <fsm_automatic_run+0x308>)
 8000568:	fb81 0103 	smull	r0, r1, r1, r3
 800056c:	1189      	asrs	r1, r1, #6
 800056e:	17db      	asrs	r3, r3, #31
 8000570:	1a5b      	subs	r3, r3, r1
 8000572:	441a      	add	r2, r3
 8000574:	4b62      	ldr	r3, [pc, #392]	; (8000700 <fsm_automatic_run+0x314>)
 8000576:	fb83 1302 	smull	r1, r3, r3, r2
 800057a:	1099      	asrs	r1, r3, #2
 800057c:	17d3      	asrs	r3, r2, #31
 800057e:	1ac9      	subs	r1, r1, r3
 8000580:	460b      	mov	r3, r1
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	440b      	add	r3, r1
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	1ad1      	subs	r1, r2, r3
 800058a:	460a      	mov	r2, r1
 800058c:	2102      	movs	r1, #2
 800058e:	2042      	movs	r0, #66	; 0x42
 8000590:	f000 fce6 	bl	8000f60 <display_num>
				}
				setColor(GPIOA, LED_RED_B_Pin, LED_AMBER_B_Pin, LED_GREEN_B_Pin, OFF, OFF, ON);
 8000594:	2300      	movs	r3, #0
 8000596:	9302      	str	r3, [sp, #8]
 8000598:	2301      	movs	r3, #1
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	2301      	movs	r3, #1
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2340      	movs	r3, #64	; 0x40
 80005a2:	2220      	movs	r2, #32
 80005a4:	2110      	movs	r1, #16
 80005a6:	484e      	ldr	r0, [pc, #312]	; (80006e0 <fsm_automatic_run+0x2f4>)
 80005a8:	f000 fff8 	bl	800159c <setColor>
			}

			if (timer1_flag == 1) {
 80005ac:	4b55      	ldr	r3, [pc, #340]	; (8000704 <fsm_automatic_run+0x318>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	f040 80ea 	bne.w	800078a <fsm_automatic_run+0x39e>
				color = GREEN;
 80005b6:	4b49      	ldr	r3, [pc, #292]	; (80006dc <fsm_automatic_run+0x2f0>)
 80005b8:	2204      	movs	r2, #4
 80005ba:	601a      	str	r2, [r3, #0]
				setTimer1(green_duration);
 80005bc:	4b4a      	ldr	r3, [pc, #296]	; (80006e8 <fsm_automatic_run+0x2fc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fea5 	bl	8001310 <setTimer1>
			}
			break;
 80005c6:	e0e0      	b.n	800078a <fsm_automatic_run+0x39e>
		case AMBER:
			display_time();
 80005c8:	f000 fd32 	bl	8001030 <display_time>
			setColor(GPIOA, LED_RED_A_Pin, LED_AMBER_A_Pin, LED_GREEN_A_Pin, OFF, ON, OFF);
 80005cc:	2301      	movs	r3, #1
 80005ce:	9302      	str	r3, [sp, #8]
 80005d0:	2300      	movs	r3, #0
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	2301      	movs	r3, #1
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2308      	movs	r3, #8
 80005da:	2204      	movs	r2, #4
 80005dc:	2102      	movs	r1, #2
 80005de:	4840      	ldr	r0, [pc, #256]	; (80006e0 <fsm_automatic_run+0x2f4>)
 80005e0:	f000 ffdc 	bl	800159c <setColor>

			if (idx == 0) {
 80005e4:	4b41      	ldr	r3, [pc, #260]	; (80006ec <fsm_automatic_run+0x300>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d10e      	bne.n	800060a <fsm_automatic_run+0x21e>
				display_num('B', 1, (timer1_counter + 100)/1000);
 80005ec:	4b40      	ldr	r3, [pc, #256]	; (80006f0 <fsm_automatic_run+0x304>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3364      	adds	r3, #100	; 0x64
 80005f2:	4a40      	ldr	r2, [pc, #256]	; (80006f4 <fsm_automatic_run+0x308>)
 80005f4:	fb82 1203 	smull	r1, r2, r2, r3
 80005f8:	1192      	asrs	r2, r2, #6
 80005fa:	17db      	asrs	r3, r3, #31
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	461a      	mov	r2, r3
 8000600:	2101      	movs	r1, #1
 8000602:	2042      	movs	r0, #66	; 0x42
 8000604:	f000 fcac 	bl	8000f60 <display_num>
 8000608:	e01d      	b.n	8000646 <fsm_automatic_run+0x25a>
			}
			else if (idx == 1) {
 800060a:	4b38      	ldr	r3, [pc, #224]	; (80006ec <fsm_automatic_run+0x300>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d119      	bne.n	8000646 <fsm_automatic_run+0x25a>
				display_num('B', 2, ((timer1_counter + 100)%1000)/100);
 8000612:	4b37      	ldr	r3, [pc, #220]	; (80006f0 <fsm_automatic_run+0x304>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800061a:	4b36      	ldr	r3, [pc, #216]	; (80006f4 <fsm_automatic_run+0x308>)
 800061c:	fb83 1302 	smull	r1, r3, r3, r2
 8000620:	1199      	asrs	r1, r3, #6
 8000622:	17d3      	asrs	r3, r2, #31
 8000624:	1acb      	subs	r3, r1, r3
 8000626:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800062a:	fb01 f303 	mul.w	r3, r1, r3
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	4a31      	ldr	r2, [pc, #196]	; (80006f8 <fsm_automatic_run+0x30c>)
 8000632:	fb82 1203 	smull	r1, r2, r2, r3
 8000636:	1152      	asrs	r2, r2, #5
 8000638:	17db      	asrs	r3, r3, #31
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	461a      	mov	r2, r3
 800063e:	2102      	movs	r1, #2
 8000640:	2042      	movs	r0, #66	; 0x42
 8000642:	f000 fc8d 	bl	8000f60 <display_num>
			}
			setColor(GPIOA, LED_RED_B_Pin, LED_AMBER_B_Pin, LED_GREEN_B_Pin, ON, OFF, OFF);
 8000646:	2301      	movs	r3, #1
 8000648:	9302      	str	r3, [sp, #8]
 800064a:	2301      	movs	r3, #1
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	2300      	movs	r3, #0
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2340      	movs	r3, #64	; 0x40
 8000654:	2220      	movs	r2, #32
 8000656:	2110      	movs	r1, #16
 8000658:	4821      	ldr	r0, [pc, #132]	; (80006e0 <fsm_automatic_run+0x2f4>)
 800065a:	f000 ff9f 	bl	800159c <setColor>

			if (timer1_flag == 1) {
 800065e:	4b29      	ldr	r3, [pc, #164]	; (8000704 <fsm_automatic_run+0x318>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	f040 8093 	bne.w	800078e <fsm_automatic_run+0x3a2>
				color = RED;
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <fsm_automatic_run+0x2f0>)
 800066a:	2202      	movs	r2, #2
 800066c:	601a      	str	r2, [r3, #0]
				setTimer1(red_duration);
 800066e:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <fsm_automatic_run+0x2f8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fe4c 	bl	8001310 <setTimer1>
			}
			break;
 8000678:	e089      	b.n	800078e <fsm_automatic_run+0x3a2>
		case GREEN:
			display_time();
 800067a:	f000 fcd9 	bl	8001030 <display_time>
			setColor(GPIOA, LED_RED_A_Pin, LED_AMBER_A_Pin, LED_GREEN_A_Pin, OFF, OFF, ON);
 800067e:	2300      	movs	r3, #0
 8000680:	9302      	str	r3, [sp, #8]
 8000682:	2301      	movs	r3, #1
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2308      	movs	r3, #8
 800068c:	2204      	movs	r2, #4
 800068e:	2102      	movs	r1, #2
 8000690:	4813      	ldr	r0, [pc, #76]	; (80006e0 <fsm_automatic_run+0x2f4>)
 8000692:	f000 ff83 	bl	800159c <setColor>

			if (idx == 0) {
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <fsm_automatic_run+0x300>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d134      	bne.n	8000708 <fsm_automatic_run+0x31c>
				display_num('B', 1, ((timer1_counter + 100)/100 + amber_duration/1000)/10);
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <fsm_automatic_run+0x304>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3364      	adds	r3, #100	; 0x64
 80006a4:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <fsm_automatic_run+0x30c>)
 80006a6:	fb82 1203 	smull	r1, r2, r2, r3
 80006aa:	1152      	asrs	r2, r2, #5
 80006ac:	17db      	asrs	r3, r3, #31
 80006ae:	1ad2      	subs	r2, r2, r3
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <fsm_automatic_run+0x310>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	490f      	ldr	r1, [pc, #60]	; (80006f4 <fsm_automatic_run+0x308>)
 80006b6:	fb81 0103 	smull	r0, r1, r1, r3
 80006ba:	1189      	asrs	r1, r1, #6
 80006bc:	17db      	asrs	r3, r3, #31
 80006be:	1acb      	subs	r3, r1, r3
 80006c0:	4413      	add	r3, r2
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <fsm_automatic_run+0x314>)
 80006c4:	fb82 1203 	smull	r1, r2, r2, r3
 80006c8:	1092      	asrs	r2, r2, #2
 80006ca:	17db      	asrs	r3, r3, #31
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	461a      	mov	r2, r3
 80006d0:	2101      	movs	r1, #1
 80006d2:	2042      	movs	r0, #66	; 0x42
 80006d4:	f000 fc44 	bl	8000f60 <display_num>
 80006d8:	e03c      	b.n	8000754 <fsm_automatic_run+0x368>
 80006da:	bf00      	nop
 80006dc:	2000003c 	.word	0x2000003c
 80006e0:	40010800 	.word	0x40010800
 80006e4:	20000044 	.word	0x20000044
 80006e8:	2000004c 	.word	0x2000004c
 80006ec:	200000ac 	.word	0x200000ac
 80006f0:	20000094 	.word	0x20000094
 80006f4:	10624dd3 	.word	0x10624dd3
 80006f8:	51eb851f 	.word	0x51eb851f
 80006fc:	20000048 	.word	0x20000048
 8000700:	66666667 	.word	0x66666667
 8000704:	20000098 	.word	0x20000098
			}
			else if (idx == 1) {
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <fsm_automatic_run+0x3b0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d121      	bne.n	8000754 <fsm_automatic_run+0x368>
				display_num('B', 2, ((timer1_counter + 100)/100 + amber_duration/1000)%10);
 8000710:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <fsm_automatic_run+0x3b4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3364      	adds	r3, #100	; 0x64
 8000716:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <fsm_automatic_run+0x3b8>)
 8000718:	fb82 1203 	smull	r1, r2, r2, r3
 800071c:	1152      	asrs	r2, r2, #5
 800071e:	17db      	asrs	r3, r3, #31
 8000720:	1ad2      	subs	r2, r2, r3
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <fsm_automatic_run+0x3bc>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4921      	ldr	r1, [pc, #132]	; (80007ac <fsm_automatic_run+0x3c0>)
 8000728:	fb81 0103 	smull	r0, r1, r1, r3
 800072c:	1189      	asrs	r1, r1, #6
 800072e:	17db      	asrs	r3, r3, #31
 8000730:	1acb      	subs	r3, r1, r3
 8000732:	441a      	add	r2, r3
 8000734:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <fsm_automatic_run+0x3c4>)
 8000736:	fb83 1302 	smull	r1, r3, r3, r2
 800073a:	1099      	asrs	r1, r3, #2
 800073c:	17d3      	asrs	r3, r2, #31
 800073e:	1ac9      	subs	r1, r1, r3
 8000740:	460b      	mov	r3, r1
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	440b      	add	r3, r1
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	1ad1      	subs	r1, r2, r3
 800074a:	460a      	mov	r2, r1
 800074c:	2102      	movs	r1, #2
 800074e:	2042      	movs	r0, #66	; 0x42
 8000750:	f000 fc06 	bl	8000f60 <display_num>
			}
			setColor(GPIOA, LED_RED_B_Pin, LED_AMBER_B_Pin, LED_GREEN_B_Pin, ON, OFF, OFF);
 8000754:	2301      	movs	r3, #1
 8000756:	9302      	str	r3, [sp, #8]
 8000758:	2301      	movs	r3, #1
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	2300      	movs	r3, #0
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2340      	movs	r3, #64	; 0x40
 8000762:	2220      	movs	r2, #32
 8000764:	2110      	movs	r1, #16
 8000766:	4813      	ldr	r0, [pc, #76]	; (80007b4 <fsm_automatic_run+0x3c8>)
 8000768:	f000 ff18 	bl	800159c <setColor>

			if (timer1_flag == 1) {
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <fsm_automatic_run+0x3cc>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d10e      	bne.n	8000792 <fsm_automatic_run+0x3a6>
				color = AMBER;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <fsm_automatic_run+0x3d0>)
 8000776:	2203      	movs	r2, #3
 8000778:	601a      	str	r2, [r3, #0]
				setTimer1(amber_duration);
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <fsm_automatic_run+0x3bc>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fdc6 	bl	8001310 <setTimer1>
			}
			break;
 8000784:	e005      	b.n	8000792 <fsm_automatic_run+0x3a6>
		default:
			break;
 8000786:	bf00      	nop
 8000788:	e004      	b.n	8000794 <fsm_automatic_run+0x3a8>
			break;
 800078a:	bf00      	nop
 800078c:	e002      	b.n	8000794 <fsm_automatic_run+0x3a8>
			break;
 800078e:	bf00      	nop
 8000790:	e000      	b.n	8000794 <fsm_automatic_run+0x3a8>
			break;
 8000792:	bf00      	nop
	}
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000ac 	.word	0x200000ac
 80007a0:	20000094 	.word	0x20000094
 80007a4:	51eb851f 	.word	0x51eb851f
 80007a8:	20000048 	.word	0x20000048
 80007ac:	10624dd3 	.word	0x10624dd3
 80007b0:	66666667 	.word	0x66666667
 80007b4:	40010800 	.word	0x40010800
 80007b8:	20000098 	.word	0x20000098
 80007bc:	2000003c 	.word	0x2000003c

080007c0 <fsm_manual_run>:
int amber_duration = 1000;
int amber_duration_temp = 0;
int green_duration = 2000;
int green_duration_temp = 0;

void fsm_manual_run() {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af04      	add	r7, sp, #16
	switch(status) {
 80007c6:	4bba      	ldr	r3, [pc, #744]	; (8000ab0 <fsm_manual_run+0x2f0>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b05      	cmp	r3, #5
 80007cc:	f200 838b 	bhi.w	8000ee6 <fsm_manual_run+0x726>
 80007d0:	a201      	add	r2, pc, #4	; (adr r2, 80007d8 <fsm_manual_run+0x18>)
 80007d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d6:	bf00      	nop
 80007d8:	08000809 	.word	0x08000809
 80007dc:	080007f1 	.word	0x080007f1
 80007e0:	08000911 	.word	0x08000911
 80007e4:	08000a7d 	.word	0x08000a7d
 80007e8:	08000c1f 	.word	0x08000c1f
 80007ec:	08000de1 	.word	0x08000de1
		case NORMAL:
			fsm_automatic_run();
 80007f0:	f7ff fdfc 	bl	80003ec <fsm_automatic_run>

			if (isButton1Pressed()) {
 80007f4:	f7ff fcaa 	bl	800014c <isButton1Pressed>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	f000 8375 	beq.w	8000eea <fsm_manual_run+0x72a>
				status = INITIAL;
 8000800:	4bab      	ldr	r3, [pc, #684]	; (8000ab0 <fsm_manual_run+0x2f0>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
			}
			break;
 8000806:	e370      	b.n	8000eea <fsm_manual_run+0x72a>
		case INITIAL:
			setColor(GPIOA, LED_RED_A_Pin, LED_AMBER_A_Pin, LED_GREEN_A_Pin, OFF, OFF, OFF);
 8000808:	2301      	movs	r3, #1
 800080a:	9302      	str	r3, [sp, #8]
 800080c:	2301      	movs	r3, #1
 800080e:	9301      	str	r3, [sp, #4]
 8000810:	2301      	movs	r3, #1
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2308      	movs	r3, #8
 8000816:	2204      	movs	r2, #4
 8000818:	2102      	movs	r1, #2
 800081a:	48a6      	ldr	r0, [pc, #664]	; (8000ab4 <fsm_manual_run+0x2f4>)
 800081c:	f000 febe 	bl	800159c <setColor>
			setColor(GPIOA, LED_RED_B_Pin, LED_AMBER_B_Pin, LED_GREEN_B_Pin, OFF, OFF, OFF);
 8000820:	2301      	movs	r3, #1
 8000822:	9302      	str	r3, [sp, #8]
 8000824:	2301      	movs	r3, #1
 8000826:	9301      	str	r3, [sp, #4]
 8000828:	2301      	movs	r3, #1
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	2340      	movs	r3, #64	; 0x40
 800082e:	2220      	movs	r2, #32
 8000830:	2110      	movs	r1, #16
 8000832:	48a0      	ldr	r0, [pc, #640]	; (8000ab4 <fsm_manual_run+0x2f4>)
 8000834:	f000 feb2 	bl	800159c <setColor>
			setColor(GPIOA, ENA1_Pin, ENA2_Pin, ENA2_Pin, ON, ON, ON);
 8000838:	2300      	movs	r3, #0
 800083a:	9302      	str	r3, [sp, #8]
 800083c:	2300      	movs	r3, #0
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	2300      	movs	r3, #0
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000848:	f44f 7280 	mov.w	r2, #256	; 0x100
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	4899      	ldr	r0, [pc, #612]	; (8000ab4 <fsm_manual_run+0x2f4>)
 8000850:	f000 fea4 	bl	800159c <setColor>
			setColor(GPIOA, ENB1_Pin, ENB2_Pin, ENB2_Pin, ON, ON, ON);
 8000854:	2300      	movs	r3, #0
 8000856:	9302      	str	r3, [sp, #8]
 8000858:	2300      	movs	r3, #0
 800085a:	9301      	str	r3, [sp, #4]
 800085c:	2300      	movs	r3, #0
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000864:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000868:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086c:	4891      	ldr	r0, [pc, #580]	; (8000ab4 <fsm_manual_run+0x2f4>)
 800086e:	f000 fe95 	bl	800159c <setColor>
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, OFF, OFF, OFF);
 8000872:	2301      	movs	r3, #1
 8000874:	9302      	str	r3, [sp, #8]
 8000876:	2301      	movs	r3, #1
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	2301      	movs	r3, #1
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	488b      	ldr	r0, [pc, #556]	; (8000ab8 <fsm_manual_run+0x2f8>)
 800088a:	f000 fe87 	bl	800159c <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, OFF, OFF, OFF);
 800088e:	2301      	movs	r3, #1
 8000890:	9302      	str	r3, [sp, #8]
 8000892:	2301      	movs	r3, #1
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	2301      	movs	r3, #1
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a6:	4884      	ldr	r0, [pc, #528]	; (8000ab8 <fsm_manual_run+0x2f8>)
 80008a8:	f000 fe78 	bl	800159c <setColor>
			setColor(GPIOB, SEG_6_Pin, SEG_A_Pin, SEG_B_Pin, OFF, OFF, OFF);
 80008ac:	2301      	movs	r3, #1
 80008ae:	9302      	str	r3, [sp, #8]
 80008b0:	2301      	movs	r3, #1
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	2301      	movs	r3, #1
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2302      	movs	r3, #2
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c0:	487d      	ldr	r0, [pc, #500]	; (8000ab8 <fsm_manual_run+0x2f8>)
 80008c2:	f000 fe6b 	bl	800159c <setColor>
			setColor(GPIOB, SEG_C_Pin, SEG_D_Pin, SEG_E_Pin, OFF, OFF, OFF);
 80008c6:	2301      	movs	r3, #1
 80008c8:	9302      	str	r3, [sp, #8]
 80008ca:	2301      	movs	r3, #1
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	2301      	movs	r3, #1
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	2310      	movs	r3, #16
 80008d4:	2208      	movs	r2, #8
 80008d6:	2104      	movs	r1, #4
 80008d8:	4877      	ldr	r0, [pc, #476]	; (8000ab8 <fsm_manual_run+0x2f8>)
 80008da:	f000 fe5f 	bl	800159c <setColor>
			setColor(GPIOB, SEG_F_Pin, SEG_G_Pin, SEG_G_Pin, OFF, OFF, OFF);
 80008de:	2301      	movs	r3, #1
 80008e0:	9302      	str	r3, [sp, #8]
 80008e2:	2301      	movs	r3, #1
 80008e4:	9301      	str	r3, [sp, #4]
 80008e6:	2301      	movs	r3, #1
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	2340      	movs	r3, #64	; 0x40
 80008ec:	2240      	movs	r2, #64	; 0x40
 80008ee:	2120      	movs	r1, #32
 80008f0:	4871      	ldr	r0, [pc, #452]	; (8000ab8 <fsm_manual_run+0x2f8>)
 80008f2:	f000 fe53 	bl	800159c <setColor>

			status = MODIFY_RED;
 80008f6:	4b6e      	ldr	r3, [pc, #440]	; (8000ab0 <fsm_manual_run+0x2f0>)
 80008f8:	2202      	movs	r2, #2
 80008fa:	601a      	str	r2, [r3, #0]
			setTimer3(250);
 80008fc:	20fa      	movs	r0, #250	; 0xfa
 80008fe:	f000 fd3b 	bl	8001378 <setTimer3>
			setTimer2(147);
 8000902:	2093      	movs	r0, #147	; 0x93
 8000904:	f000 fd1e 	bl	8001344 <setTimer2>
			setTimer1(153);
 8000908:	2099      	movs	r0, #153	; 0x99
 800090a:	f000 fd01 	bl	8001310 <setTimer1>
			break;
 800090e:	e2f5      	b.n	8000efc <fsm_manual_run+0x73c>
		case MODIFY_RED:
			if (timer1_flag == 1 && idx == 0) {
 8000910:	4b6a      	ldr	r3, [pc, #424]	; (8000abc <fsm_manual_run+0x2fc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d114      	bne.n	8000942 <fsm_manual_run+0x182>
 8000918:	4b69      	ldr	r3, [pc, #420]	; (8000ac0 <fsm_manual_run+0x300>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d110      	bne.n	8000942 <fsm_manual_run+0x182>
				setTimer1(153);
 8000920:	2099      	movs	r0, #153	; 0x99
 8000922:	f000 fcf5 	bl	8001310 <setTimer1>
				display_num('A', 1, (red_duration)/10000);
 8000926:	4b67      	ldr	r3, [pc, #412]	; (8000ac4 <fsm_manual_run+0x304>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a67      	ldr	r2, [pc, #412]	; (8000ac8 <fsm_manual_run+0x308>)
 800092c:	fb82 1203 	smull	r1, r2, r2, r3
 8000930:	1312      	asrs	r2, r2, #12
 8000932:	17db      	asrs	r3, r3, #31
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	461a      	mov	r2, r3
 8000938:	2101      	movs	r1, #1
 800093a:	2041      	movs	r0, #65	; 0x41
 800093c:	f000 fb10 	bl	8000f60 <display_num>
 8000940:	e022      	b.n	8000988 <fsm_manual_run+0x1c8>
			}
			else if (timer1_flag == 1 && idx == 1) {
 8000942:	4b5e      	ldr	r3, [pc, #376]	; (8000abc <fsm_manual_run+0x2fc>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d11e      	bne.n	8000988 <fsm_manual_run+0x1c8>
 800094a:	4b5d      	ldr	r3, [pc, #372]	; (8000ac0 <fsm_manual_run+0x300>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d11a      	bne.n	8000988 <fsm_manual_run+0x1c8>
				setTimer1(153);
 8000952:	2099      	movs	r0, #153	; 0x99
 8000954:	f000 fcdc 	bl	8001310 <setTimer1>
				display_num('A', 2, ((red_duration)%10000)/1000);
 8000958:	4b5a      	ldr	r3, [pc, #360]	; (8000ac4 <fsm_manual_run+0x304>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b5a      	ldr	r3, [pc, #360]	; (8000ac8 <fsm_manual_run+0x308>)
 800095e:	fb83 1302 	smull	r1, r3, r3, r2
 8000962:	1319      	asrs	r1, r3, #12
 8000964:	17d3      	asrs	r3, r2, #31
 8000966:	1acb      	subs	r3, r1, r3
 8000968:	f242 7110 	movw	r1, #10000	; 0x2710
 800096c:	fb01 f303 	mul.w	r3, r1, r3
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	4a56      	ldr	r2, [pc, #344]	; (8000acc <fsm_manual_run+0x30c>)
 8000974:	fb82 1203 	smull	r1, r2, r2, r3
 8000978:	1192      	asrs	r2, r2, #6
 800097a:	17db      	asrs	r3, r3, #31
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	461a      	mov	r2, r3
 8000980:	2102      	movs	r1, #2
 8000982:	2041      	movs	r0, #65	; 0x41
 8000984:	f000 faec 	bl	8000f60 <display_num>
			}

			if (timer2_flag == 1 && idx == 0) { // B mode, A value
 8000988:	4b51      	ldr	r3, [pc, #324]	; (8000ad0 <fsm_manual_run+0x310>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d10c      	bne.n	80009aa <fsm_manual_run+0x1ea>
 8000990:	4b4b      	ldr	r3, [pc, #300]	; (8000ac0 <fsm_manual_run+0x300>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d108      	bne.n	80009aa <fsm_manual_run+0x1ea>
				setTimer2(147);
 8000998:	2093      	movs	r0, #147	; 0x93
 800099a:	f000 fcd3 	bl	8001344 <setTimer2>
				display_num('B', 1, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2101      	movs	r1, #1
 80009a2:	2042      	movs	r0, #66	; 0x42
 80009a4:	f000 fadc 	bl	8000f60 <display_num>
 80009a8:	e00f      	b.n	80009ca <fsm_manual_run+0x20a>
			}
			else if (timer2_flag == 1 && idx == 1) {
 80009aa:	4b49      	ldr	r3, [pc, #292]	; (8000ad0 <fsm_manual_run+0x310>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d10b      	bne.n	80009ca <fsm_manual_run+0x20a>
 80009b2:	4b43      	ldr	r3, [pc, #268]	; (8000ac0 <fsm_manual_run+0x300>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d107      	bne.n	80009ca <fsm_manual_run+0x20a>
				setTimer2(147);
 80009ba:	2093      	movs	r0, #147	; 0x93
 80009bc:	f000 fcc2 	bl	8001344 <setTimer2>
				display_num('B', 2, MODIFY_RED);
 80009c0:	2202      	movs	r2, #2
 80009c2:	2102      	movs	r1, #2
 80009c4:	2042      	movs	r0, #66	; 0x42
 80009c6:	f000 facb 	bl	8000f60 <display_num>
			}

			setColor(GPIOA, LED_AMBER_A_Pin, LED_AMBER_B_Pin, LED_AMBER_B_Pin, OFF, OFF, OFF);
 80009ca:	2301      	movs	r3, #1
 80009cc:	9302      	str	r3, [sp, #8]
 80009ce:	2301      	movs	r3, #1
 80009d0:	9301      	str	r3, [sp, #4]
 80009d2:	2301      	movs	r3, #1
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	2320      	movs	r3, #32
 80009d8:	2220      	movs	r2, #32
 80009da:	2104      	movs	r1, #4
 80009dc:	4835      	ldr	r0, [pc, #212]	; (8000ab4 <fsm_manual_run+0x2f4>)
 80009de:	f000 fddd 	bl	800159c <setColor>
			setColor(GPIOA, LED_GREEN_A_Pin, LED_GREEN_B_Pin, LED_GREEN_B_Pin, OFF, OFF, OFF);
 80009e2:	2301      	movs	r3, #1
 80009e4:	9302      	str	r3, [sp, #8]
 80009e6:	2301      	movs	r3, #1
 80009e8:	9301      	str	r3, [sp, #4]
 80009ea:	2301      	movs	r3, #1
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	2240      	movs	r2, #64	; 0x40
 80009f2:	2108      	movs	r1, #8
 80009f4:	482f      	ldr	r0, [pc, #188]	; (8000ab4 <fsm_manual_run+0x2f4>)
 80009f6:	f000 fdd1 	bl	800159c <setColor>
			if (timer3_flag == 1) {
 80009fa:	4b36      	ldr	r3, [pc, #216]	; (8000ad4 <fsm_manual_run+0x314>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d108      	bne.n	8000a14 <fsm_manual_run+0x254>
				setTimer3(250);
 8000a02:	20fa      	movs	r0, #250	; 0xfa
 8000a04:	f000 fcb8 	bl	8001378 <setTimer3>
				setColorToggle(GPIOA, LED_RED_A_Pin, LED_RED_B_Pin, LED_RED_B_Pin);
 8000a08:	2310      	movs	r3, #16
 8000a0a:	2210      	movs	r2, #16
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	4829      	ldr	r0, [pc, #164]	; (8000ab4 <fsm_manual_run+0x2f4>)
 8000a10:	f000 fde8 	bl	80015e4 <setColorToggle>
			}

			if(isButton3Pressed()) red_duration = red_duration;
 8000a14:	f7ff fc7a 	bl	800030c <isButton3Pressed>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d003      	beq.n	8000a26 <fsm_manual_run+0x266>
 8000a1e:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <fsm_manual_run+0x304>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a28      	ldr	r2, [pc, #160]	; (8000ac4 <fsm_manual_run+0x304>)
 8000a24:	6013      	str	r3, [r2, #0]

			if(isButton2Pressed()) {
 8000a26:	f7ff fc01 	bl	800022c <isButton2Pressed>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d012      	beq.n	8000a56 <fsm_manual_run+0x296>
				red_duration_temp = red_duration;
 8000a30:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <fsm_manual_run+0x304>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a28      	ldr	r2, [pc, #160]	; (8000ad8 <fsm_manual_run+0x318>)
 8000a36:	6013      	str	r3, [r2, #0]
				red_duration = red_duration + 1000;
 8000a38:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <fsm_manual_run+0x304>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a40:	4a20      	ldr	r2, [pc, #128]	; (8000ac4 <fsm_manual_run+0x304>)
 8000a42:	6013      	str	r3, [r2, #0]
				if (red_duration > 99000) red_duration = 1000;
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <fsm_manual_run+0x304>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a24      	ldr	r2, [pc, #144]	; (8000adc <fsm_manual_run+0x31c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	dd03      	ble.n	8000a56 <fsm_manual_run+0x296>
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <fsm_manual_run+0x304>)
 8000a50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a54:	601a      	str	r2, [r3, #0]
			}

			if (isButton1Pressed()) {
 8000a56:	f7ff fb79 	bl	800014c <isButton1Pressed>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	f000 8246 	beq.w	8000eee <fsm_manual_run+0x72e>
				status = MODIFY_AMBER;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <fsm_manual_run+0x2f0>)
 8000a64:	2203      	movs	r2, #3
 8000a66:	601a      	str	r2, [r3, #0]
				setTimer3(250);
 8000a68:	20fa      	movs	r0, #250	; 0xfa
 8000a6a:	f000 fc85 	bl	8001378 <setTimer3>
				setTimer2(147);
 8000a6e:	2093      	movs	r0, #147	; 0x93
 8000a70:	f000 fc68 	bl	8001344 <setTimer2>
				setTimer1(153);
 8000a74:	2099      	movs	r0, #153	; 0x99
 8000a76:	f000 fc4b 	bl	8001310 <setTimer1>
			}
			break;
 8000a7a:	e238      	b.n	8000eee <fsm_manual_run+0x72e>
		case MODIFY_AMBER:
			if (timer1_flag == 1 && idx == 0) {
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <fsm_manual_run+0x2fc>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d12f      	bne.n	8000ae4 <fsm_manual_run+0x324>
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <fsm_manual_run+0x300>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d12b      	bne.n	8000ae4 <fsm_manual_run+0x324>
				setTimer1(153);
 8000a8c:	2099      	movs	r0, #153	; 0x99
 8000a8e:	f000 fc3f 	bl	8001310 <setTimer1>
				display_num('A', 1, (amber_duration)/10000);
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <fsm_manual_run+0x320>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a0c      	ldr	r2, [pc, #48]	; (8000ac8 <fsm_manual_run+0x308>)
 8000a98:	fb82 1203 	smull	r1, r2, r2, r3
 8000a9c:	1312      	asrs	r2, r2, #12
 8000a9e:	17db      	asrs	r3, r3, #31
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	2041      	movs	r0, #65	; 0x41
 8000aa8:	f000 fa5a 	bl	8000f60 <display_num>
 8000aac:	e03d      	b.n	8000b2a <fsm_manual_run+0x36a>
 8000aae:	bf00      	nop
 8000ab0:	20000040 	.word	0x20000040
 8000ab4:	40010800 	.word	0x40010800
 8000ab8:	40010c00 	.word	0x40010c00
 8000abc:	20000098 	.word	0x20000098
 8000ac0:	200000ac 	.word	0x200000ac
 8000ac4:	20000044 	.word	0x20000044
 8000ac8:	68db8bad 	.word	0x68db8bad
 8000acc:	10624dd3 	.word	0x10624dd3
 8000ad0:	200000a0 	.word	0x200000a0
 8000ad4:	200000a8 	.word	0x200000a8
 8000ad8:	20000088 	.word	0x20000088
 8000adc:	000182b8 	.word	0x000182b8
 8000ae0:	20000048 	.word	0x20000048
			}
			else if (timer1_flag == 1 && idx == 1) {
 8000ae4:	4bb1      	ldr	r3, [pc, #708]	; (8000dac <fsm_manual_run+0x5ec>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d11e      	bne.n	8000b2a <fsm_manual_run+0x36a>
 8000aec:	4bb0      	ldr	r3, [pc, #704]	; (8000db0 <fsm_manual_run+0x5f0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d11a      	bne.n	8000b2a <fsm_manual_run+0x36a>
				setTimer1(153);
 8000af4:	2099      	movs	r0, #153	; 0x99
 8000af6:	f000 fc0b 	bl	8001310 <setTimer1>
				display_num('A', 2, ((amber_duration)%10000)/1000);
 8000afa:	4bae      	ldr	r3, [pc, #696]	; (8000db4 <fsm_manual_run+0x5f4>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4bae      	ldr	r3, [pc, #696]	; (8000db8 <fsm_manual_run+0x5f8>)
 8000b00:	fb83 1302 	smull	r1, r3, r3, r2
 8000b04:	1319      	asrs	r1, r3, #12
 8000b06:	17d3      	asrs	r3, r2, #31
 8000b08:	1acb      	subs	r3, r1, r3
 8000b0a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b0e:	fb01 f303 	mul.w	r3, r1, r3
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	4aa9      	ldr	r2, [pc, #676]	; (8000dbc <fsm_manual_run+0x5fc>)
 8000b16:	fb82 1203 	smull	r1, r2, r2, r3
 8000b1a:	1192      	asrs	r2, r2, #6
 8000b1c:	17db      	asrs	r3, r3, #31
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	461a      	mov	r2, r3
 8000b22:	2102      	movs	r1, #2
 8000b24:	2041      	movs	r0, #65	; 0x41
 8000b26:	f000 fa1b 	bl	8000f60 <display_num>
			}

			if (timer2_flag == 1 && idx == 0) { // B mode, A value
 8000b2a:	4ba5      	ldr	r3, [pc, #660]	; (8000dc0 <fsm_manual_run+0x600>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d10c      	bne.n	8000b4c <fsm_manual_run+0x38c>
 8000b32:	4b9f      	ldr	r3, [pc, #636]	; (8000db0 <fsm_manual_run+0x5f0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d108      	bne.n	8000b4c <fsm_manual_run+0x38c>
				setTimer2(147);
 8000b3a:	2093      	movs	r0, #147	; 0x93
 8000b3c:	f000 fc02 	bl	8001344 <setTimer2>
				display_num('B', 1, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2101      	movs	r1, #1
 8000b44:	2042      	movs	r0, #66	; 0x42
 8000b46:	f000 fa0b 	bl	8000f60 <display_num>
 8000b4a:	e00f      	b.n	8000b6c <fsm_manual_run+0x3ac>
			}
			else if (timer2_flag == 1 && idx == 1) {
 8000b4c:	4b9c      	ldr	r3, [pc, #624]	; (8000dc0 <fsm_manual_run+0x600>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d10b      	bne.n	8000b6c <fsm_manual_run+0x3ac>
 8000b54:	4b96      	ldr	r3, [pc, #600]	; (8000db0 <fsm_manual_run+0x5f0>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d107      	bne.n	8000b6c <fsm_manual_run+0x3ac>
				setTimer2(147);
 8000b5c:	2093      	movs	r0, #147	; 0x93
 8000b5e:	f000 fbf1 	bl	8001344 <setTimer2>
				display_num('B', 2, MODIFY_AMBER);
 8000b62:	2203      	movs	r2, #3
 8000b64:	2102      	movs	r1, #2
 8000b66:	2042      	movs	r0, #66	; 0x42
 8000b68:	f000 f9fa 	bl	8000f60 <display_num>
			}

			setColor(GPIOA, LED_RED_A_Pin, LED_RED_B_Pin, LED_RED_B_Pin, OFF, OFF, OFF);
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	9302      	str	r3, [sp, #8]
 8000b70:	2301      	movs	r3, #1
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	2301      	movs	r3, #1
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2310      	movs	r3, #16
 8000b7a:	2210      	movs	r2, #16
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	4891      	ldr	r0, [pc, #580]	; (8000dc4 <fsm_manual_run+0x604>)
 8000b80:	f000 fd0c 	bl	800159c <setColor>
			setColor(GPIOA, LED_GREEN_A_Pin, LED_GREEN_B_Pin, LED_GREEN_B_Pin, OFF, OFF, OFF);
 8000b84:	2301      	movs	r3, #1
 8000b86:	9302      	str	r3, [sp, #8]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	9301      	str	r3, [sp, #4]
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	2340      	movs	r3, #64	; 0x40
 8000b92:	2240      	movs	r2, #64	; 0x40
 8000b94:	2108      	movs	r1, #8
 8000b96:	488b      	ldr	r0, [pc, #556]	; (8000dc4 <fsm_manual_run+0x604>)
 8000b98:	f000 fd00 	bl	800159c <setColor>
			if (timer3_flag == 1) {
 8000b9c:	4b8a      	ldr	r3, [pc, #552]	; (8000dc8 <fsm_manual_run+0x608>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d108      	bne.n	8000bb6 <fsm_manual_run+0x3f6>
				setTimer3(250);
 8000ba4:	20fa      	movs	r0, #250	; 0xfa
 8000ba6:	f000 fbe7 	bl	8001378 <setTimer3>
				setColorToggle(GPIOA, LED_AMBER_A_Pin, LED_AMBER_B_Pin, LED_AMBER_B_Pin);
 8000baa:	2320      	movs	r3, #32
 8000bac:	2220      	movs	r2, #32
 8000bae:	2104      	movs	r1, #4
 8000bb0:	4884      	ldr	r0, [pc, #528]	; (8000dc4 <fsm_manual_run+0x604>)
 8000bb2:	f000 fd17 	bl	80015e4 <setColorToggle>
			}

			if(isButton3Pressed()) amber_duration = amber_duration;
 8000bb6:	f7ff fba9 	bl	800030c <isButton3Pressed>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d003      	beq.n	8000bc8 <fsm_manual_run+0x408>
 8000bc0:	4b7c      	ldr	r3, [pc, #496]	; (8000db4 <fsm_manual_run+0x5f4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a7b      	ldr	r2, [pc, #492]	; (8000db4 <fsm_manual_run+0x5f4>)
 8000bc6:	6013      	str	r3, [r2, #0]

			if(isButton2Pressed()) {
 8000bc8:	f7ff fb30 	bl	800022c <isButton2Pressed>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d012      	beq.n	8000bf8 <fsm_manual_run+0x438>
				amber_duration_temp = amber_duration;
 8000bd2:	4b78      	ldr	r3, [pc, #480]	; (8000db4 <fsm_manual_run+0x5f4>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a7d      	ldr	r2, [pc, #500]	; (8000dcc <fsm_manual_run+0x60c>)
 8000bd8:	6013      	str	r3, [r2, #0]
				amber_duration = amber_duration + 1000;
 8000bda:	4b76      	ldr	r3, [pc, #472]	; (8000db4 <fsm_manual_run+0x5f4>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000be2:	4a74      	ldr	r2, [pc, #464]	; (8000db4 <fsm_manual_run+0x5f4>)
 8000be4:	6013      	str	r3, [r2, #0]
				if (amber_duration > 99000) amber_duration = 1000;
 8000be6:	4b73      	ldr	r3, [pc, #460]	; (8000db4 <fsm_manual_run+0x5f4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a79      	ldr	r2, [pc, #484]	; (8000dd0 <fsm_manual_run+0x610>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	dd03      	ble.n	8000bf8 <fsm_manual_run+0x438>
 8000bf0:	4b70      	ldr	r3, [pc, #448]	; (8000db4 <fsm_manual_run+0x5f4>)
 8000bf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bf6:	601a      	str	r2, [r3, #0]
			}

			if (isButton1Pressed()) {
 8000bf8:	f7ff faa8 	bl	800014c <isButton1Pressed>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f000 8177 	beq.w	8000ef2 <fsm_manual_run+0x732>
				status = MODIFY_GREEN;
 8000c04:	4b73      	ldr	r3, [pc, #460]	; (8000dd4 <fsm_manual_run+0x614>)
 8000c06:	2204      	movs	r2, #4
 8000c08:	601a      	str	r2, [r3, #0]
				setTimer3(250);
 8000c0a:	20fa      	movs	r0, #250	; 0xfa
 8000c0c:	f000 fbb4 	bl	8001378 <setTimer3>
				setTimer2(147);
 8000c10:	2093      	movs	r0, #147	; 0x93
 8000c12:	f000 fb97 	bl	8001344 <setTimer2>
				setTimer1(153);
 8000c16:	2099      	movs	r0, #153	; 0x99
 8000c18:	f000 fb7a 	bl	8001310 <setTimer1>
			}
			break;
 8000c1c:	e169      	b.n	8000ef2 <fsm_manual_run+0x732>
		case MODIFY_GREEN:
			if (timer1_flag == 1 && idx == 0) {
 8000c1e:	4b63      	ldr	r3, [pc, #396]	; (8000dac <fsm_manual_run+0x5ec>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d114      	bne.n	8000c50 <fsm_manual_run+0x490>
 8000c26:	4b62      	ldr	r3, [pc, #392]	; (8000db0 <fsm_manual_run+0x5f0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d110      	bne.n	8000c50 <fsm_manual_run+0x490>
				setTimer1(153);
 8000c2e:	2099      	movs	r0, #153	; 0x99
 8000c30:	f000 fb6e 	bl	8001310 <setTimer1>
				display_num('A', 1, (green_duration)/10000);
 8000c34:	4b68      	ldr	r3, [pc, #416]	; (8000dd8 <fsm_manual_run+0x618>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a5f      	ldr	r2, [pc, #380]	; (8000db8 <fsm_manual_run+0x5f8>)
 8000c3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c3e:	1312      	asrs	r2, r2, #12
 8000c40:	17db      	asrs	r3, r3, #31
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	461a      	mov	r2, r3
 8000c46:	2101      	movs	r1, #1
 8000c48:	2041      	movs	r0, #65	; 0x41
 8000c4a:	f000 f989 	bl	8000f60 <display_num>
 8000c4e:	e022      	b.n	8000c96 <fsm_manual_run+0x4d6>
			}
			else if (timer1_flag == 1 && idx == 1) {
 8000c50:	4b56      	ldr	r3, [pc, #344]	; (8000dac <fsm_manual_run+0x5ec>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d11e      	bne.n	8000c96 <fsm_manual_run+0x4d6>
 8000c58:	4b55      	ldr	r3, [pc, #340]	; (8000db0 <fsm_manual_run+0x5f0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d11a      	bne.n	8000c96 <fsm_manual_run+0x4d6>
				setTimer1(153);
 8000c60:	2099      	movs	r0, #153	; 0x99
 8000c62:	f000 fb55 	bl	8001310 <setTimer1>
				display_num('A', 2, ((green_duration)%10000)/1000);
 8000c66:	4b5c      	ldr	r3, [pc, #368]	; (8000dd8 <fsm_manual_run+0x618>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	4b53      	ldr	r3, [pc, #332]	; (8000db8 <fsm_manual_run+0x5f8>)
 8000c6c:	fb83 1302 	smull	r1, r3, r3, r2
 8000c70:	1319      	asrs	r1, r3, #12
 8000c72:	17d3      	asrs	r3, r2, #31
 8000c74:	1acb      	subs	r3, r1, r3
 8000c76:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c7a:	fb01 f303 	mul.w	r3, r1, r3
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	4a4e      	ldr	r2, [pc, #312]	; (8000dbc <fsm_manual_run+0x5fc>)
 8000c82:	fb82 1203 	smull	r1, r2, r2, r3
 8000c86:	1192      	asrs	r2, r2, #6
 8000c88:	17db      	asrs	r3, r3, #31
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	2102      	movs	r1, #2
 8000c90:	2041      	movs	r0, #65	; 0x41
 8000c92:	f000 f965 	bl	8000f60 <display_num>
			}

			if (timer2_flag == 1 && idx == 0) { // B mode, A value
 8000c96:	4b4a      	ldr	r3, [pc, #296]	; (8000dc0 <fsm_manual_run+0x600>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d10c      	bne.n	8000cb8 <fsm_manual_run+0x4f8>
 8000c9e:	4b44      	ldr	r3, [pc, #272]	; (8000db0 <fsm_manual_run+0x5f0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d108      	bne.n	8000cb8 <fsm_manual_run+0x4f8>
				setTimer2(147);
 8000ca6:	2093      	movs	r0, #147	; 0x93
 8000ca8:	f000 fb4c 	bl	8001344 <setTimer2>
				display_num('B', 1, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2101      	movs	r1, #1
 8000cb0:	2042      	movs	r0, #66	; 0x42
 8000cb2:	f000 f955 	bl	8000f60 <display_num>
 8000cb6:	e00f      	b.n	8000cd8 <fsm_manual_run+0x518>
			}
			else if (timer2_flag == 1 && idx == 1) {
 8000cb8:	4b41      	ldr	r3, [pc, #260]	; (8000dc0 <fsm_manual_run+0x600>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d10b      	bne.n	8000cd8 <fsm_manual_run+0x518>
 8000cc0:	4b3b      	ldr	r3, [pc, #236]	; (8000db0 <fsm_manual_run+0x5f0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d107      	bne.n	8000cd8 <fsm_manual_run+0x518>
				setTimer2(147);
 8000cc8:	2093      	movs	r0, #147	; 0x93
 8000cca:	f000 fb3b 	bl	8001344 <setTimer2>
				display_num('B', 2, MODIFY_GREEN);
 8000cce:	2204      	movs	r2, #4
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	2042      	movs	r0, #66	; 0x42
 8000cd4:	f000 f944 	bl	8000f60 <display_num>
			}

			setColor(GPIOA, LED_RED_A_Pin, LED_RED_B_Pin, LED_RED_B_Pin, OFF, OFF, OFF);
 8000cd8:	2301      	movs	r3, #1
 8000cda:	9302      	str	r3, [sp, #8]
 8000cdc:	2301      	movs	r3, #1
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	2210      	movs	r2, #16
 8000ce8:	2102      	movs	r1, #2
 8000cea:	4836      	ldr	r0, [pc, #216]	; (8000dc4 <fsm_manual_run+0x604>)
 8000cec:	f000 fc56 	bl	800159c <setColor>
			setColor(GPIOA, LED_AMBER_A_Pin, LED_AMBER_B_Pin, LED_AMBER_B_Pin, OFF, OFF, OFF);
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	9302      	str	r3, [sp, #8]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	9301      	str	r3, [sp, #4]
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2320      	movs	r3, #32
 8000cfe:	2220      	movs	r2, #32
 8000d00:	2104      	movs	r1, #4
 8000d02:	4830      	ldr	r0, [pc, #192]	; (8000dc4 <fsm_manual_run+0x604>)
 8000d04:	f000 fc4a 	bl	800159c <setColor>
			if (timer3_flag == 1) {
 8000d08:	4b2f      	ldr	r3, [pc, #188]	; (8000dc8 <fsm_manual_run+0x608>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d108      	bne.n	8000d22 <fsm_manual_run+0x562>
				setTimer3(250);
 8000d10:	20fa      	movs	r0, #250	; 0xfa
 8000d12:	f000 fb31 	bl	8001378 <setTimer3>
				setColorToggle(GPIOA, LED_GREEN_A_Pin, LED_GREEN_B_Pin, LED_GREEN_B_Pin);
 8000d16:	2340      	movs	r3, #64	; 0x40
 8000d18:	2240      	movs	r2, #64	; 0x40
 8000d1a:	2108      	movs	r1, #8
 8000d1c:	4829      	ldr	r0, [pc, #164]	; (8000dc4 <fsm_manual_run+0x604>)
 8000d1e:	f000 fc61 	bl	80015e4 <setColorToggle>
			}

			if(isButton3Pressed()) {
 8000d22:	f7ff faf3 	bl	800030c <isButton3Pressed>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00d      	beq.n	8000d48 <fsm_manual_run+0x588>
				if(isErrorOccured()) {
 8000d2c:	f000 f900 	bl	8000f30 <isErrorOccured>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d008      	beq.n	8000d48 <fsm_manual_run+0x588>
					setTimer1(153);
 8000d36:	2099      	movs	r0, #153	; 0x99
 8000d38:	f000 faea 	bl	8001310 <setTimer1>
					setTimer2(147);
 8000d3c:	2093      	movs	r0, #147	; 0x93
 8000d3e:	f000 fb01 	bl	8001344 <setTimer2>
					status = FAULT_CONDITION;
 8000d42:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <fsm_manual_run+0x614>)
 8000d44:	2205      	movs	r2, #5
 8000d46:	601a      	str	r2, [r3, #0]
				}
			}

			if(isButton2Pressed()) {
 8000d48:	f7ff fa70 	bl	800022c <isButton2Pressed>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d012      	beq.n	8000d78 <fsm_manual_run+0x5b8>
				green_duration_temp = green_duration;
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <fsm_manual_run+0x618>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a21      	ldr	r2, [pc, #132]	; (8000ddc <fsm_manual_run+0x61c>)
 8000d58:	6013      	str	r3, [r2, #0]
				green_duration = green_duration + 1000;
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <fsm_manual_run+0x618>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000d62:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <fsm_manual_run+0x618>)
 8000d64:	6013      	str	r3, [r2, #0]
				if (green_duration > 99000) green_duration = 1000;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <fsm_manual_run+0x618>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a19      	ldr	r2, [pc, #100]	; (8000dd0 <fsm_manual_run+0x610>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	dd03      	ble.n	8000d78 <fsm_manual_run+0x5b8>
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <fsm_manual_run+0x618>)
 8000d72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d76:	601a      	str	r2, [r3, #0]
			}

			if (isButton1Pressed()) {
 8000d78:	f7ff f9e8 	bl	800014c <isButton1Pressed>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 80b9 	beq.w	8000ef6 <fsm_manual_run+0x736>
				if(isErrorOccured()) {
 8000d84:	f000 f8d4 	bl	8000f30 <isErrorOccured>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d009      	beq.n	8000da2 <fsm_manual_run+0x5e2>
					setTimer1(153);
 8000d8e:	2099      	movs	r0, #153	; 0x99
 8000d90:	f000 fabe 	bl	8001310 <setTimer1>
					setTimer2(147);
 8000d94:	2093      	movs	r0, #147	; 0x93
 8000d96:	f000 fad5 	bl	8001344 <setTimer2>
					status = FAULT_CONDITION;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <fsm_manual_run+0x614>)
 8000d9c:	2205      	movs	r2, #5
 8000d9e:	601a      	str	r2, [r3, #0]
				}
				else status = NORMAL;
			}
			break;
 8000da0:	e0a9      	b.n	8000ef6 <fsm_manual_run+0x736>
				else status = NORMAL;
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <fsm_manual_run+0x614>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	601a      	str	r2, [r3, #0]
			break;
 8000da8:	e0a5      	b.n	8000ef6 <fsm_manual_run+0x736>
 8000daa:	bf00      	nop
 8000dac:	20000098 	.word	0x20000098
 8000db0:	200000ac 	.word	0x200000ac
 8000db4:	20000048 	.word	0x20000048
 8000db8:	68db8bad 	.word	0x68db8bad
 8000dbc:	10624dd3 	.word	0x10624dd3
 8000dc0:	200000a0 	.word	0x200000a0
 8000dc4:	40010800 	.word	0x40010800
 8000dc8:	200000a8 	.word	0x200000a8
 8000dcc:	2000008c 	.word	0x2000008c
 8000dd0:	000182b8 	.word	0x000182b8
 8000dd4:	20000040 	.word	0x20000040
 8000dd8:	2000004c 	.word	0x2000004c
 8000ddc:	20000090 	.word	0x20000090
		case FAULT_CONDITION:
			setColor(GPIOA, LED_AMBER_A_Pin, LED_AMBER_B_Pin, LED_AMBER_B_Pin, OFF, OFF, OFF);
 8000de0:	2301      	movs	r3, #1
 8000de2:	9302      	str	r3, [sp, #8]
 8000de4:	2301      	movs	r3, #1
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	2301      	movs	r3, #1
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2320      	movs	r3, #32
 8000dee:	2220      	movs	r2, #32
 8000df0:	2104      	movs	r1, #4
 8000df2:	4844      	ldr	r0, [pc, #272]	; (8000f04 <fsm_manual_run+0x744>)
 8000df4:	f000 fbd2 	bl	800159c <setColor>
			setColor(GPIOA, LED_RED_A_Pin, LED_RED_B_Pin, LED_RED_B_Pin, OFF, OFF, OFF);
 8000df8:	2301      	movs	r3, #1
 8000dfa:	9302      	str	r3, [sp, #8]
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	9301      	str	r3, [sp, #4]
 8000e00:	2301      	movs	r3, #1
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2310      	movs	r3, #16
 8000e06:	2210      	movs	r2, #16
 8000e08:	2102      	movs	r1, #2
 8000e0a:	483e      	ldr	r0, [pc, #248]	; (8000f04 <fsm_manual_run+0x744>)
 8000e0c:	f000 fbc6 	bl	800159c <setColor>
			setColor(GPIOA, LED_GREEN_A_Pin, LED_GREEN_B_Pin, LED_GREEN_B_Pin, OFF, OFF, OFF);
 8000e10:	2301      	movs	r3, #1
 8000e12:	9302      	str	r3, [sp, #8]
 8000e14:	2301      	movs	r3, #1
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	2301      	movs	r3, #1
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2340      	movs	r3, #64	; 0x40
 8000e1e:	2240      	movs	r2, #64	; 0x40
 8000e20:	2108      	movs	r1, #8
 8000e22:	4838      	ldr	r0, [pc, #224]	; (8000f04 <fsm_manual_run+0x744>)
 8000e24:	f000 fbba 	bl	800159c <setColor>
			if (timer1_flag == 1 && idx == 0) {
 8000e28:	4b37      	ldr	r3, [pc, #220]	; (8000f08 <fsm_manual_run+0x748>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d10c      	bne.n	8000e4a <fsm_manual_run+0x68a>
 8000e30:	4b36      	ldr	r3, [pc, #216]	; (8000f0c <fsm_manual_run+0x74c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d108      	bne.n	8000e4a <fsm_manual_run+0x68a>
				setTimer1(153);
 8000e38:	2099      	movs	r0, #153	; 0x99
 8000e3a:	f000 fa69 	bl	8001310 <setTimer1>
				display_num('A', 1, 11);
 8000e3e:	220b      	movs	r2, #11
 8000e40:	2101      	movs	r1, #1
 8000e42:	2041      	movs	r0, #65	; 0x41
 8000e44:	f000 f88c 	bl	8000f60 <display_num>
 8000e48:	e00f      	b.n	8000e6a <fsm_manual_run+0x6aa>
			}
			else if (timer1_flag == 1 && idx == 1) {
 8000e4a:	4b2f      	ldr	r3, [pc, #188]	; (8000f08 <fsm_manual_run+0x748>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d10b      	bne.n	8000e6a <fsm_manual_run+0x6aa>
 8000e52:	4b2e      	ldr	r3, [pc, #184]	; (8000f0c <fsm_manual_run+0x74c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d107      	bne.n	8000e6a <fsm_manual_run+0x6aa>
				setTimer1(153);
 8000e5a:	2099      	movs	r0, #153	; 0x99
 8000e5c:	f000 fa58 	bl	8001310 <setTimer1>
				display_num('A', 2, 12);
 8000e60:	220c      	movs	r2, #12
 8000e62:	2102      	movs	r1, #2
 8000e64:	2041      	movs	r0, #65	; 0x41
 8000e66:	f000 f87b 	bl	8000f60 <display_num>
			}
			if (timer2_flag == 1 && idx == 0) { // B mode, A value
 8000e6a:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <fsm_manual_run+0x750>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d10c      	bne.n	8000e8c <fsm_manual_run+0x6cc>
 8000e72:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <fsm_manual_run+0x74c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d108      	bne.n	8000e8c <fsm_manual_run+0x6cc>
				setTimer2(147);
 8000e7a:	2093      	movs	r0, #147	; 0x93
 8000e7c:	f000 fa62 	bl	8001344 <setTimer2>
				display_num('B', 1, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2101      	movs	r1, #1
 8000e84:	2042      	movs	r0, #66	; 0x42
 8000e86:	f000 f86b 	bl	8000f60 <display_num>
 8000e8a:	e00f      	b.n	8000eac <fsm_manual_run+0x6ec>
			}
			else if (timer2_flag == 1 && idx == 1) {
 8000e8c:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <fsm_manual_run+0x750>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d10b      	bne.n	8000eac <fsm_manual_run+0x6ec>
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <fsm_manual_run+0x74c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d107      	bne.n	8000eac <fsm_manual_run+0x6ec>
				setTimer2(147);
 8000e9c:	2093      	movs	r0, #147	; 0x93
 8000e9e:	f000 fa51 	bl	8001344 <setTimer2>
				display_num('B', 2, FAULT_CONDITION);
 8000ea2:	2205      	movs	r2, #5
 8000ea4:	2102      	movs	r1, #2
 8000ea6:	2042      	movs	r0, #66	; 0x42
 8000ea8:	f000 f85a 	bl	8000f60 <display_num>
			}

			red_duration = red_duration_temp;
 8000eac:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <fsm_manual_run+0x754>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a19      	ldr	r2, [pc, #100]	; (8000f18 <fsm_manual_run+0x758>)
 8000eb2:	6013      	str	r3, [r2, #0]
			amber_duration = amber_duration_temp;
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <fsm_manual_run+0x75c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a19      	ldr	r2, [pc, #100]	; (8000f20 <fsm_manual_run+0x760>)
 8000eba:	6013      	str	r3, [r2, #0]
			green_duration = green_duration_temp;
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <fsm_manual_run+0x764>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <fsm_manual_run+0x768>)
 8000ec2:	6013      	str	r3, [r2, #0]

			if (isButton1Pressed()) status = MODIFY_RED;
 8000ec4:	f7ff f942 	bl	800014c <isButton1Pressed>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d002      	beq.n	8000ed4 <fsm_manual_run+0x714>
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <fsm_manual_run+0x76c>)
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	601a      	str	r2, [r3, #0]

			if (isButton3Pressed()) status = NORMAL;
 8000ed4:	f7ff fa1a 	bl	800030c <isButton3Pressed>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00d      	beq.n	8000efa <fsm_manual_run+0x73a>
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <fsm_manual_run+0x76c>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]
			break;
 8000ee4:	e009      	b.n	8000efa <fsm_manual_run+0x73a>
		default:
			break;
 8000ee6:	bf00      	nop
 8000ee8:	e008      	b.n	8000efc <fsm_manual_run+0x73c>
			break;
 8000eea:	bf00      	nop
 8000eec:	e006      	b.n	8000efc <fsm_manual_run+0x73c>
			break;
 8000eee:	bf00      	nop
 8000ef0:	e004      	b.n	8000efc <fsm_manual_run+0x73c>
			break;
 8000ef2:	bf00      	nop
 8000ef4:	e002      	b.n	8000efc <fsm_manual_run+0x73c>
			break;
 8000ef6:	bf00      	nop
 8000ef8:	e000      	b.n	8000efc <fsm_manual_run+0x73c>
			break;
 8000efa:	bf00      	nop
	}
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40010800 	.word	0x40010800
 8000f08:	20000098 	.word	0x20000098
 8000f0c:	200000ac 	.word	0x200000ac
 8000f10:	200000a0 	.word	0x200000a0
 8000f14:	20000088 	.word	0x20000088
 8000f18:	20000044 	.word	0x20000044
 8000f1c:	2000008c 	.word	0x2000008c
 8000f20:	20000048 	.word	0x20000048
 8000f24:	20000090 	.word	0x20000090
 8000f28:	2000004c 	.word	0x2000004c
 8000f2c:	20000040 	.word	0x20000040

08000f30 <isErrorOccured>:
 *  Created on: Oct 28, 2024
 *      Author: datph
 */
#include "fsm_setting.h"

int isErrorOccured() {
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
	if ((amber_duration + green_duration) != red_duration) return 1;
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <isErrorOccured+0x24>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <isErrorOccured+0x28>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	441a      	add	r2, r3
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <isErrorOccured+0x2c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d001      	beq.n	8000f4a <isErrorOccured+0x1a>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <isErrorOccured+0x1c>
	return 0;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	20000048 	.word	0x20000048
 8000f58:	2000004c 	.word	0x2000004c
 8000f5c:	20000044 	.word	0x20000044

08000f60 <display_num>:
 *  Created on: Oct 28, 2024
 *      Author: datph
 */
#include "led7_segment.h"

void display_num (char group, int index, int num) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	73fb      	strb	r3, [r7, #15]
	if (group == 'A' && index == 1) {
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	2b41      	cmp	r3, #65	; 0x41
 8000f72:	d112      	bne.n	8000f9a <display_num+0x3a>
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d10f      	bne.n	8000f9a <display_num+0x3a>
		HAL_GPIO_WritePin(GPIOA, ENA1_Pin, ON);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	482b      	ldr	r0, [pc, #172]	; (800102c <display_num+0xcc>)
 8000f80:	f001 fa61 	bl	8002446 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, ENA2_Pin, OFF);
 8000f84:	2201      	movs	r2, #1
 8000f86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8a:	4828      	ldr	r0, [pc, #160]	; (800102c <display_num+0xcc>)
 8000f8c:	f001 fa5b 	bl	8002446 <HAL_GPIO_WritePin>
		select_num('A', num);
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	2041      	movs	r0, #65	; 0x41
 8000f94:	f000 fb46 	bl	8001624 <select_num>
 8000f98:	e043      	b.n	8001022 <display_num+0xc2>
	}
	else if (group == 'A' && index == 2) {
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	2b41      	cmp	r3, #65	; 0x41
 8000f9e:	d112      	bne.n	8000fc6 <display_num+0x66>
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d10f      	bne.n	8000fc6 <display_num+0x66>
		HAL_GPIO_WritePin(GPIOA, ENA2_Pin, ON);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fac:	481f      	ldr	r0, [pc, #124]	; (800102c <display_num+0xcc>)
 8000fae:	f001 fa4a 	bl	8002446 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, ENA1_Pin, OFF);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	481d      	ldr	r0, [pc, #116]	; (800102c <display_num+0xcc>)
 8000fb8:	f001 fa45 	bl	8002446 <HAL_GPIO_WritePin>
		select_num('A', num);
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	2041      	movs	r0, #65	; 0x41
 8000fc0:	f000 fb30 	bl	8001624 <select_num>
 8000fc4:	e02d      	b.n	8001022 <display_num+0xc2>
	}
	else if (group == 'B' && index == 1) {
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	2b42      	cmp	r3, #66	; 0x42
 8000fca:	d113      	bne.n	8000ff4 <display_num+0x94>
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d110      	bne.n	8000ff4 <display_num+0x94>
		HAL_GPIO_WritePin(GPIOA, ENB1_Pin, ON);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd8:	4814      	ldr	r0, [pc, #80]	; (800102c <display_num+0xcc>)
 8000fda:	f001 fa34 	bl	8002446 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, ENB2_Pin, OFF);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe4:	4811      	ldr	r0, [pc, #68]	; (800102c <display_num+0xcc>)
 8000fe6:	f001 fa2e 	bl	8002446 <HAL_GPIO_WritePin>
		select_num('B', num);
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	2042      	movs	r0, #66	; 0x42
 8000fee:	f000 fb19 	bl	8001624 <select_num>
 8000ff2:	e016      	b.n	8001022 <display_num+0xc2>
	}
	else if (group == 'B' && index == 2) {
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	2b42      	cmp	r3, #66	; 0x42
 8000ff8:	d113      	bne.n	8001022 <display_num+0xc2>
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d110      	bne.n	8001022 <display_num+0xc2>
		HAL_GPIO_WritePin(GPIOA, ENB2_Pin, ON);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001006:	4809      	ldr	r0, [pc, #36]	; (800102c <display_num+0xcc>)
 8001008:	f001 fa1d 	bl	8002446 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, ENB1_Pin, OFF);
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <display_num+0xcc>)
 8001014:	f001 fa17 	bl	8002446 <HAL_GPIO_WritePin>
		select_num('B', num);
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	2042      	movs	r0, #66	; 0x42
 800101c:	f000 fb02 	bl	8001624 <select_num>
	}
}
 8001020:	e7ff      	b.n	8001022 <display_num+0xc2>
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40010800 	.word	0x40010800

08001030 <display_time>:

void display_time() {
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	if (timer2_flag == 1 && idx == 0) {
 8001034:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <display_time+0x88>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d116      	bne.n	800106a <display_time+0x3a>
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <display_time+0x8c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d112      	bne.n	800106a <display_time+0x3a>
		setTimer2(150);
 8001044:	2096      	movs	r0, #150	; 0x96
 8001046:	f000 f97d 	bl	8001344 <setTimer2>
		display_num('A', 1, (timer1_counter + 100)/1000);
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <display_time+0x90>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	3364      	adds	r3, #100	; 0x64
 8001050:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <display_time+0x94>)
 8001052:	fb82 1203 	smull	r1, r2, r2, r3
 8001056:	1192      	asrs	r2, r2, #6
 8001058:	17db      	asrs	r3, r3, #31
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	461a      	mov	r2, r3
 800105e:	2101      	movs	r1, #1
 8001060:	2041      	movs	r0, #65	; 0x41
 8001062:	f7ff ff7d 	bl	8000f60 <display_num>
	if (timer2_flag == 1 && idx == 0) {
 8001066:	bf00      	nop
	}
	else if (timer2_flag == 1 && idx == 1) {
		setTimer2(150);
		display_num('A', 2, ((timer1_counter + 100)%1000)/100);
	}
}
 8001068:	e024      	b.n	80010b4 <display_time+0x84>
	else if (timer2_flag == 1 && idx == 1) {
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <display_time+0x88>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d120      	bne.n	80010b4 <display_time+0x84>
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <display_time+0x8c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d11c      	bne.n	80010b4 <display_time+0x84>
		setTimer2(150);
 800107a:	2096      	movs	r0, #150	; 0x96
 800107c:	f000 f962 	bl	8001344 <setTimer2>
		display_num('A', 2, ((timer1_counter + 100)%1000)/100);
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <display_time+0x90>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <display_time+0x94>)
 800108a:	fb83 1302 	smull	r1, r3, r3, r2
 800108e:	1199      	asrs	r1, r3, #6
 8001090:	17d3      	asrs	r3, r2, #31
 8001092:	1acb      	subs	r3, r1, r3
 8001094:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001098:	fb01 f303 	mul.w	r3, r1, r3
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <display_time+0x98>)
 80010a0:	fb82 1203 	smull	r1, r2, r2, r3
 80010a4:	1152      	asrs	r2, r2, #5
 80010a6:	17db      	asrs	r3, r3, #31
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	461a      	mov	r2, r3
 80010ac:	2102      	movs	r1, #2
 80010ae:	2041      	movs	r0, #65	; 0x41
 80010b0:	f7ff ff56 	bl	8000f60 <display_num>
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200000a0 	.word	0x200000a0
 80010bc:	200000ac 	.word	0x200000ac
 80010c0:	20000094 	.word	0x20000094
 80010c4:	10624dd3 	.word	0x10624dd3
 80010c8:	51eb851f 	.word	0x51eb851f

080010cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d0:	f000 feb8 	bl	8001e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d4:	f000 f80c 	bl	80010f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d8:	f000 f892 	bl	8001200 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010dc:	f000 f844 	bl	8001168 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <main+0x20>)
 80010e2:	f001 fe0d 	bl	8002d00 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_manual_run();
 80010e6:	f7ff fb6b 	bl	80007c0 <fsm_manual_run>
 80010ea:	e7fc      	b.n	80010e6 <main+0x1a>
 80010ec:	200000b0 	.word	0x200000b0

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b090      	sub	sp, #64	; 0x40
 80010f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	2228      	movs	r2, #40	; 0x28
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 f9ae 	bl	8003460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001116:	2301      	movs	r3, #1
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111a:	2310      	movs	r3, #16
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800111e:	2300      	movs	r3, #0
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001122:	f107 0318 	add.w	r3, r7, #24
 8001126:	4618      	mov	r0, r3
 8001128:	f001 f9be 	bl	80024a8 <HAL_RCC_OscConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001132:	f000 f8e7 	bl	8001304 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001136:	230f      	movs	r3, #15
 8001138:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f001 fc2a 	bl	80029a8 <HAL_RCC_ClockConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800115a:	f000 f8d3 	bl	8001304 <Error_Handler>
  }
}
 800115e:	bf00      	nop
 8001160:	3740      	adds	r7, #64	; 0x40
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001184:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <MX_TIM2_Init+0x94>)
 8001186:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800118a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_TIM2_Init+0x94>)
 800118e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001192:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_TIM2_Init+0x94>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <MX_TIM2_Init+0x94>)
 800119c:	2209      	movs	r2, #9
 800119e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_TIM2_Init+0x94>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <MX_TIM2_Init+0x94>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ac:	4813      	ldr	r0, [pc, #76]	; (80011fc <MX_TIM2_Init+0x94>)
 80011ae:	f001 fd57 	bl	8002c60 <HAL_TIM_Base_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011b8:	f000 f8a4 	bl	8001304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	4619      	mov	r1, r3
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <MX_TIM2_Init+0x94>)
 80011ca:	f001 fed5 	bl	8002f78 <HAL_TIM_ConfigClockSource>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011d4:	f000 f896 	bl	8001304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_TIM2_Init+0x94>)
 80011e6:	f002 f8ad 	bl	8003344 <HAL_TIMEx_MasterConfigSynchronization>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011f0:	f000 f888 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200000b0 	.word	0x200000b0

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 0310 	add.w	r3, r7, #16
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001214:	4b2f      	ldr	r3, [pc, #188]	; (80012d4 <MX_GPIO_Init+0xd4>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a2e      	ldr	r2, [pc, #184]	; (80012d4 <MX_GPIO_Init+0xd4>)
 800121a:	f043 0310 	orr.w	r3, r3, #16
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b2c      	ldr	r3, [pc, #176]	; (80012d4 <MX_GPIO_Init+0xd4>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <MX_GPIO_Init+0xd4>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a28      	ldr	r2, [pc, #160]	; (80012d4 <MX_GPIO_Init+0xd4>)
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <MX_GPIO_Init+0xd4>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001244:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <MX_GPIO_Init+0xd4>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <MX_GPIO_Init+0xd4>)
 800124a:	f043 0308 	orr.w	r3, r3, #8
 800124e:	6193      	str	r3, [r2, #24]
 8001250:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <MX_GPIO_Init+0xd4>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_A_Pin|LED_AMBER_A_Pin|LED_GREEN_A_Pin|LED_RED_B_Pin
 800125c:	2200      	movs	r2, #0
 800125e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8001262:	481d      	ldr	r0, [pc, #116]	; (80012d8 <MX_GPIO_Init+0xd8>)
 8001264:	f001 f8ef 	bl	8002446 <HAL_GPIO_WritePin>
                          |LED_AMBER_B_Pin|LED_GREEN_B_Pin|ENA1_Pin|ENA2_Pin
                          |ENB1_Pin|ENB2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_3_Pin
 8001268:	2200      	movs	r2, #0
 800126a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800126e:	481b      	ldr	r0, [pc, #108]	; (80012dc <MX_GPIO_Init+0xdc>)
 8001270:	f001 f8e9 	bl	8002446 <HAL_GPIO_WritePin>
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|SEG_D_Pin
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_0_Pin
                          |SEG_1_Pin|SEG_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001274:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001278:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800127e:	2301      	movs	r3, #1
 8001280:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	4619      	mov	r1, r3
 8001288:	4815      	ldr	r0, [pc, #84]	; (80012e0 <MX_GPIO_Init+0xe0>)
 800128a:	f000 ff4b 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_A_Pin LED_AMBER_A_Pin LED_GREEN_A_Pin LED_RED_B_Pin
                           LED_AMBER_B_Pin LED_GREEN_B_Pin ENA1_Pin ENA2_Pin
                           ENB1_Pin ENB2_Pin */
  GPIO_InitStruct.Pin = LED_RED_A_Pin|LED_AMBER_A_Pin|LED_GREEN_A_Pin|LED_RED_B_Pin
 800128e:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8001292:	613b      	str	r3, [r7, #16]
                          |LED_AMBER_B_Pin|LED_GREEN_B_Pin|ENA1_Pin|ENA2_Pin
                          |ENB1_Pin|ENB2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2302      	movs	r3, #2
 800129e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	4619      	mov	r1, r3
 80012a6:	480c      	ldr	r0, [pc, #48]	; (80012d8 <MX_GPIO_Init+0xd8>)
 80012a8:	f000 ff3c 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin SEG_D_Pin
                           SEG_E_Pin SEG_F_Pin SEG_G_Pin SEG_0_Pin
                           SEG_1_Pin SEG_2_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_3_Pin
 80012ac:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80012b0:	613b      	str	r3, [r7, #16]
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|SEG_D_Pin
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_0_Pin
                          |SEG_1_Pin|SEG_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_GPIO_Init+0xdc>)
 80012c6:	f000 ff2d 	bl	8002124 <HAL_GPIO_Init>

}
 80012ca:	bf00      	nop
 80012cc:	3720      	adds	r7, #32
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010800 	.word	0x40010800
 80012dc:	40010c00 	.word	0x40010c00
 80012e0:	40011000 	.word	0x40011000

080012e4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	timerRun();
 80012ec:	f000 f87c 	bl	80013e8 <timerRun>
	getKeyInputButton1();
 80012f0:	f7fe ff4a 	bl	8000188 <getKeyInputButton1>
	getKeyInputButton2();
 80012f4:	f7fe ffb8 	bl	8000268 <getKeyInputButton2>
	getKeyInputButton3();
 80012f8:	f7ff f826 	bl	8000348 <getKeyInputButton3>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130c:	e7fe      	b.n	800130c <Error_Handler+0x8>
	...

08001310 <setTimer1>:
int timer3_flag = 0;

int idx = 0;
int TICK = 10;

void setTimer1 (int duration) {
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <setTimer1+0x28>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001322:	4a06      	ldr	r2, [pc, #24]	; (800133c <setTimer1+0x2c>)
 8001324:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <setTimer1+0x30>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000050 	.word	0x20000050
 800133c:	20000094 	.word	0x20000094
 8001340:	20000098 	.word	0x20000098

08001344 <setTimer2>:

void setTimer2 (int duration) {
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <setTimer2+0x28>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	fb92 f3f3 	sdiv	r3, r2, r3
 8001356:	4a06      	ldr	r2, [pc, #24]	; (8001370 <setTimer2+0x2c>)
 8001358:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <setTimer2+0x30>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000050 	.word	0x20000050
 8001370:	2000009c 	.word	0x2000009c
 8001374:	200000a0 	.word	0x200000a0

08001378 <setTimer3>:

void setTimer3 (int duration) {
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <setTimer3+0x28>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	fb92 f3f3 	sdiv	r3, r2, r3
 800138a:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <setTimer3+0x2c>)
 800138c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <setTimer3+0x30>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000050 	.word	0x20000050
 80013a4:	200000a4 	.word	0x200000a4
 80013a8:	200000a8 	.word	0x200000a8

080013ac <isTimer1Paused>:

int isTimer1Paused(int pause) {
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	pause = pause / 10;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <isTimer1Paused+0x34>)
 80013b8:	fb82 1203 	smull	r1, r2, r2, r3
 80013bc:	1092      	asrs	r2, r2, #2
 80013be:	17db      	asrs	r3, r3, #31
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	607b      	str	r3, [r7, #4]
	if (timer1_counter <= pause) return 1;
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <isTimer1Paused+0x38>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	db01      	blt.n	80013d2 <isTimer1Paused+0x26>
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <isTimer1Paused+0x28>
	return 0;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	66666667 	.word	0x66666667
 80013e4:	20000094 	.word	0x20000094

080013e8 <timerRun>:

void timerRun() {
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) --timer1_counter;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <timerRun+0x7c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	dd05      	ble.n	8001400 <timerRun+0x18>
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <timerRun+0x7c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	4a1a      	ldr	r2, [pc, #104]	; (8001464 <timerRun+0x7c>)
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e002      	b.n	8001406 <timerRun+0x1e>
	else timer1_flag = 1;
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <timerRun+0x80>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]

	if (timer2_counter > 0) --timer2_counter;
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <timerRun+0x84>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	dd05      	ble.n	800141a <timerRun+0x32>
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <timerRun+0x84>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3b01      	subs	r3, #1
 8001414:	4a15      	ldr	r2, [pc, #84]	; (800146c <timerRun+0x84>)
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	e013      	b.n	8001442 <timerRun+0x5a>
	else {
		timer2_flag = 1;
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <timerRun+0x88>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]
		switch (idx) {
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <timerRun+0x8c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d002      	beq.n	800142e <timerRun+0x46>
 8001428:	2b01      	cmp	r3, #1
 800142a:	d006      	beq.n	800143a <timerRun+0x52>
				break;
			case 1:
				idx = 0;
				break;
			default:
				break;
 800142c:	e009      	b.n	8001442 <timerRun+0x5a>
				++idx;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <timerRun+0x8c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <timerRun+0x8c>)
 8001436:	6013      	str	r3, [r2, #0]
				break;
 8001438:	e003      	b.n	8001442 <timerRun+0x5a>
				idx = 0;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <timerRun+0x8c>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
				break;
 8001440:	bf00      	nop
		}
	}

	if (timer3_counter > 0) --timer3_counter;
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <timerRun+0x90>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	dd05      	ble.n	8001456 <timerRun+0x6e>
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <timerRun+0x90>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	3b01      	subs	r3, #1
 8001450:	4a09      	ldr	r2, [pc, #36]	; (8001478 <timerRun+0x90>)
 8001452:	6013      	str	r3, [r2, #0]
	else timer3_flag = 1;
}
 8001454:	e002      	b.n	800145c <timerRun+0x74>
	else timer3_flag = 1;
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <timerRun+0x94>)
 8001458:	2201      	movs	r2, #1
 800145a:	601a      	str	r2, [r3, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	20000094 	.word	0x20000094
 8001468:	20000098 	.word	0x20000098
 800146c:	2000009c 	.word	0x2000009c
 8001470:	200000a0 	.word	0x200000a0
 8001474:	200000ac 	.word	0x200000ac
 8001478:	200000a4 	.word	0x200000a4
 800147c:	200000a8 	.word	0x200000a8

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_MspInit+0x5c>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	4a14      	ldr	r2, [pc, #80]	; (80014dc <HAL_MspInit+0x5c>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6193      	str	r3, [r2, #24]
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_MspInit+0x5c>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_MspInit+0x5c>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_MspInit+0x5c>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	61d3      	str	r3, [r2, #28]
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <HAL_MspInit+0x5c>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_MspInit+0x60>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_MspInit+0x60>)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40010000 	.word	0x40010000

080014e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f4:	d113      	bne.n	800151e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <HAL_TIM_Base_MspInit+0x44>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <HAL_TIM_Base_MspInit+0x44>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	61d3      	str	r3, [r2, #28]
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <HAL_TIM_Base_MspInit+0x44>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	201c      	movs	r0, #28
 8001514:	f000 fdcf 	bl	80020b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001518:	201c      	movs	r0, #28
 800151a:	f000 fde8 	bl	80020ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000

0800152c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <NMI_Handler+0x4>

08001532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <HardFault_Handler+0x4>

08001538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <MemManage_Handler+0x4>

0800153e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <UsageFault_Handler+0x4>

0800154a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr

08001556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001572:	f000 fcad 	bl	8001ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <TIM2_IRQHandler+0x10>)
 8001582:	f001 fc09 	bl	8002d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200000b0 	.word	0x200000b0

08001590 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <setColor>:
 *  Created on: Oct 28, 2024
 *      Author: datph
 */
#include "traffic_light.h"

void setColor(GPIO_TypeDef *GPIOx, uint16_t Led_1, uint16_t Led_2, uint16_t Led_3, GPIO_PinState Led_1_State, GPIO_PinState Led_2_State, GPIO_PinState Led_3_State) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	4608      	mov	r0, r1
 80015a6:	4611      	mov	r1, r2
 80015a8:	461a      	mov	r2, r3
 80015aa:	4603      	mov	r3, r0
 80015ac:	817b      	strh	r3, [r7, #10]
 80015ae:	460b      	mov	r3, r1
 80015b0:	813b      	strh	r3, [r7, #8]
 80015b2:	4613      	mov	r3, r2
 80015b4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOx, Led_1, Led_1_State);
 80015b6:	7e3a      	ldrb	r2, [r7, #24]
 80015b8:	897b      	ldrh	r3, [r7, #10]
 80015ba:	4619      	mov	r1, r3
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f000 ff42 	bl	8002446 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, Led_2, Led_2_State);
 80015c2:	7f3a      	ldrb	r2, [r7, #28]
 80015c4:	893b      	ldrh	r3, [r7, #8]
 80015c6:	4619      	mov	r1, r3
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f000 ff3c 	bl	8002446 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, Led_3, Led_3_State);
 80015ce:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	4619      	mov	r1, r3
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 ff35 	bl	8002446 <HAL_GPIO_WritePin>
}
 80015dc:	bf00      	nop
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <setColorToggle>:

void setColorToggle(GPIO_TypeDef *GPIOx, uint16_t Led_1, uint16_t Led_2, uint16_t Led_3) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	4608      	mov	r0, r1
 80015ee:	4611      	mov	r1, r2
 80015f0:	461a      	mov	r2, r3
 80015f2:	4603      	mov	r3, r0
 80015f4:	817b      	strh	r3, [r7, #10]
 80015f6:	460b      	mov	r3, r1
 80015f8:	813b      	strh	r3, [r7, #8]
 80015fa:	4613      	mov	r3, r2
 80015fc:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOx, Led_1);
 80015fe:	897b      	ldrh	r3, [r7, #10]
 8001600:	4619      	mov	r1, r3
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f000 ff37 	bl	8002476 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOx, Led_2);
 8001608:	893b      	ldrh	r3, [r7, #8]
 800160a:	4619      	mov	r1, r3
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f000 ff32 	bl	8002476 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOx, Led_3);
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	4619      	mov	r1, r3
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f000 ff2d 	bl	8002476 <HAL_GPIO_TogglePin>
}
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <select_num>:

void select_num (char group, int num) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af04      	add	r7, sp, #16
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
if (group == 'A') {
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	2b41      	cmp	r3, #65	; 0x41
 8001634:	f040 8241 	bne.w	8001aba <select_num+0x496>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	2b0c      	cmp	r3, #12
 800163c:	f200 83d0 	bhi.w	8001de0 <select_num+0x7bc>
 8001640:	a201      	add	r2, pc, #4	; (adr r2, 8001648 <select_num+0x24>)
 8001642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001646:	bf00      	nop
 8001648:	0800167d 	.word	0x0800167d
 800164c:	080016d7 	.word	0x080016d7
 8001650:	08001731 	.word	0x08001731
 8001654:	0800178b 	.word	0x0800178b
 8001658:	080017e5 	.word	0x080017e5
 800165c:	0800183f 	.word	0x0800183f
 8001660:	08001899 	.word	0x08001899
 8001664:	080018f3 	.word	0x080018f3
 8001668:	0800194d 	.word	0x0800194d
 800166c:	080019ad 	.word	0x080019ad
 8001670:	08001de1 	.word	0x08001de1
 8001674:	08001a07 	.word	0x08001a07
 8001678:	08001a61 	.word	0x08001a61
	switch (num) {
		case 0:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, ON, ON);
 800167c:	2300      	movs	r3, #0
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	2300      	movs	r3, #0
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	2300      	movs	r3, #0
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	f44f 7300 	mov.w	r3, #512	; 0x200
 800168c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001690:	2180      	movs	r1, #128	; 0x80
 8001692:	48c5      	ldr	r0, [pc, #788]	; (80019a8 <select_num+0x384>)
 8001694:	f7ff ff82 	bl	800159c <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, ON, ON);
 8001698:	2300      	movs	r3, #0
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	2300      	movs	r3, #0
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	2300      	movs	r3, #0
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016b0:	48bd      	ldr	r0, [pc, #756]	; (80019a8 <select_num+0x384>)
 80016b2:	f7ff ff73 	bl	800159c <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, ON, ON, OFF);
 80016b6:	2301      	movs	r3, #1
 80016b8:	9302      	str	r3, [sp, #8]
 80016ba:	2300      	movs	r3, #0
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	2300      	movs	r3, #0
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ce:	48b6      	ldr	r0, [pc, #728]	; (80019a8 <select_num+0x384>)
 80016d0:	f7ff ff64 	bl	800159c <setColor>
			break;
 80016d4:	e389      	b.n	8001dea <select_num+0x7c6>
		case 1:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, OFF, ON, ON);
 80016d6:	2300      	movs	r3, #0
 80016d8:	9302      	str	r3, [sp, #8]
 80016da:	2300      	movs	r3, #0
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	2301      	movs	r3, #1
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	48ae      	ldr	r0, [pc, #696]	; (80019a8 <select_num+0x384>)
 80016ee:	f7ff ff55 	bl	800159c <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, OFF, OFF, OFF);
 80016f2:	2301      	movs	r3, #1
 80016f4:	9302      	str	r3, [sp, #8]
 80016f6:	2301      	movs	r3, #1
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	2301      	movs	r3, #1
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001702:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001706:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800170a:	48a7      	ldr	r0, [pc, #668]	; (80019a8 <select_num+0x384>)
 800170c:	f7ff ff46 	bl	800159c <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, OFF, OFF, OFF);
 8001710:	2301      	movs	r3, #1
 8001712:	9302      	str	r3, [sp, #8]
 8001714:	2301      	movs	r3, #1
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	2301      	movs	r3, #1
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001724:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001728:	489f      	ldr	r0, [pc, #636]	; (80019a8 <select_num+0x384>)
 800172a:	f7ff ff37 	bl	800159c <setColor>
			break;
 800172e:	e35c      	b.n	8001dea <select_num+0x7c6>
		case 2:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, ON, OFF);
 8001730:	2301      	movs	r3, #1
 8001732:	9302      	str	r3, [sp, #8]
 8001734:	2300      	movs	r3, #0
 8001736:	9301      	str	r3, [sp, #4]
 8001738:	2300      	movs	r3, #0
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001744:	2180      	movs	r1, #128	; 0x80
 8001746:	4898      	ldr	r0, [pc, #608]	; (80019a8 <select_num+0x384>)
 8001748:	f7ff ff28 	bl	800159c <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, ON, OFF);
 800174c:	2301      	movs	r3, #1
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	2300      	movs	r3, #0
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	2300      	movs	r3, #0
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001760:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001764:	4890      	ldr	r0, [pc, #576]	; (80019a8 <select_num+0x384>)
 8001766:	f7ff ff19 	bl	800159c <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, ON, OFF, ON);
 800176a:	2300      	movs	r3, #0
 800176c:	9302      	str	r3, [sp, #8]
 800176e:	2301      	movs	r3, #1
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	2300      	movs	r3, #0
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800177a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800177e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001782:	4889      	ldr	r0, [pc, #548]	; (80019a8 <select_num+0x384>)
 8001784:	f7ff ff0a 	bl	800159c <setColor>
			break;
 8001788:	e32f      	b.n	8001dea <select_num+0x7c6>
		case 3:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, ON, ON);
 800178a:	2300      	movs	r3, #0
 800178c:	9302      	str	r3, [sp, #8]
 800178e:	2300      	movs	r3, #0
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	2300      	movs	r3, #0
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800179a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800179e:	2180      	movs	r1, #128	; 0x80
 80017a0:	4881      	ldr	r0, [pc, #516]	; (80019a8 <select_num+0x384>)
 80017a2:	f7ff fefb 	bl	800159c <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, OFF, OFF);
 80017a6:	2301      	movs	r3, #1
 80017a8:	9302      	str	r3, [sp, #8]
 80017aa:	2301      	movs	r3, #1
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	2300      	movs	r3, #0
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017be:	487a      	ldr	r0, [pc, #488]	; (80019a8 <select_num+0x384>)
 80017c0:	f7ff feec 	bl	800159c <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, OFF, OFF, ON);
 80017c4:	2300      	movs	r3, #0
 80017c6:	9302      	str	r3, [sp, #8]
 80017c8:	2301      	movs	r3, #1
 80017ca:	9301      	str	r3, [sp, #4]
 80017cc:	2301      	movs	r3, #1
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017dc:	4872      	ldr	r0, [pc, #456]	; (80019a8 <select_num+0x384>)
 80017de:	f7ff fedd 	bl	800159c <setColor>
			break;
 80017e2:	e302      	b.n	8001dea <select_num+0x7c6>
		case 4:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, OFF, ON, ON);
 80017e4:	2300      	movs	r3, #0
 80017e6:	9302      	str	r3, [sp, #8]
 80017e8:	2300      	movs	r3, #0
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	2301      	movs	r3, #1
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017f8:	2180      	movs	r1, #128	; 0x80
 80017fa:	486b      	ldr	r0, [pc, #428]	; (80019a8 <select_num+0x384>)
 80017fc:	f7ff fece 	bl	800159c <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, OFF, OFF, ON);
 8001800:	2300      	movs	r3, #0
 8001802:	9302      	str	r3, [sp, #8]
 8001804:	2301      	movs	r3, #1
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	2301      	movs	r3, #1
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001810:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001814:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001818:	4863      	ldr	r0, [pc, #396]	; (80019a8 <select_num+0x384>)
 800181a:	f7ff febf 	bl	800159c <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, OFF, ON, ON);
 800181e:	2300      	movs	r3, #0
 8001820:	9302      	str	r3, [sp, #8]
 8001822:	2300      	movs	r3, #0
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	2301      	movs	r3, #1
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800182e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001832:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001836:	485c      	ldr	r0, [pc, #368]	; (80019a8 <select_num+0x384>)
 8001838:	f7ff feb0 	bl	800159c <setColor>
			break;
 800183c:	e2d5      	b.n	8001dea <select_num+0x7c6>
		case 5:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, OFF, ON);
 800183e:	2300      	movs	r3, #0
 8001840:	9302      	str	r3, [sp, #8]
 8001842:	2301      	movs	r3, #1
 8001844:	9301      	str	r3, [sp, #4]
 8001846:	2300      	movs	r3, #0
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800184e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001852:	2180      	movs	r1, #128	; 0x80
 8001854:	4854      	ldr	r0, [pc, #336]	; (80019a8 <select_num+0x384>)
 8001856:	f7ff fea1 	bl	800159c <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, OFF, ON);
 800185a:	2300      	movs	r3, #0
 800185c:	9302      	str	r3, [sp, #8]
 800185e:	2301      	movs	r3, #1
 8001860:	9301      	str	r3, [sp, #4]
 8001862:	2300      	movs	r3, #0
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800186e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001872:	484d      	ldr	r0, [pc, #308]	; (80019a8 <select_num+0x384>)
 8001874:	f7ff fe92 	bl	800159c <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, OFF, ON, ON);
 8001878:	2300      	movs	r3, #0
 800187a:	9302      	str	r3, [sp, #8]
 800187c:	2300      	movs	r3, #0
 800187e:	9301      	str	r3, [sp, #4]
 8001880:	2301      	movs	r3, #1
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001888:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800188c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001890:	4845      	ldr	r0, [pc, #276]	; (80019a8 <select_num+0x384>)
 8001892:	f7ff fe83 	bl	800159c <setColor>
			break;
 8001896:	e2a8      	b.n	8001dea <select_num+0x7c6>
		case 6:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, OFF, ON);
 8001898:	2300      	movs	r3, #0
 800189a:	9302      	str	r3, [sp, #8]
 800189c:	2301      	movs	r3, #1
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	2300      	movs	r3, #0
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	483e      	ldr	r0, [pc, #248]	; (80019a8 <select_num+0x384>)
 80018b0:	f7ff fe74 	bl	800159c <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, ON, ON);
 80018b4:	2300      	movs	r3, #0
 80018b6:	9302      	str	r3, [sp, #8]
 80018b8:	2300      	movs	r3, #0
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	2300      	movs	r3, #0
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018cc:	4836      	ldr	r0, [pc, #216]	; (80019a8 <select_num+0x384>)
 80018ce:	f7ff fe65 	bl	800159c <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, ON, ON, ON);
 80018d2:	2300      	movs	r3, #0
 80018d4:	9302      	str	r3, [sp, #8]
 80018d6:	2300      	movs	r3, #0
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	2300      	movs	r3, #0
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018ea:	482f      	ldr	r0, [pc, #188]	; (80019a8 <select_num+0x384>)
 80018ec:	f7ff fe56 	bl	800159c <setColor>
			break;
 80018f0:	e27b      	b.n	8001dea <select_num+0x7c6>
		case 7:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, ON, ON);
 80018f2:	2300      	movs	r3, #0
 80018f4:	9302      	str	r3, [sp, #8]
 80018f6:	2300      	movs	r3, #0
 80018f8:	9301      	str	r3, [sp, #4]
 80018fa:	2300      	movs	r3, #0
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001902:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	4827      	ldr	r0, [pc, #156]	; (80019a8 <select_num+0x384>)
 800190a:	f7ff fe47 	bl	800159c <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, OFF, OFF, OFF);
 800190e:	2301      	movs	r3, #1
 8001910:	9302      	str	r3, [sp, #8]
 8001912:	2301      	movs	r3, #1
 8001914:	9301      	str	r3, [sp, #4]
 8001916:	2301      	movs	r3, #1
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800191e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001922:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001926:	4820      	ldr	r0, [pc, #128]	; (80019a8 <select_num+0x384>)
 8001928:	f7ff fe38 	bl	800159c <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, OFF, OFF, OFF);
 800192c:	2301      	movs	r3, #1
 800192e:	9302      	str	r3, [sp, #8]
 8001930:	2301      	movs	r3, #1
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	2301      	movs	r3, #1
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800193c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001940:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001944:	4818      	ldr	r0, [pc, #96]	; (80019a8 <select_num+0x384>)
 8001946:	f7ff fe29 	bl	800159c <setColor>
			break;
 800194a:	e24e      	b.n	8001dea <select_num+0x7c6>
		case 8:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, ON, ON);
 800194c:	2300      	movs	r3, #0
 800194e:	9302      	str	r3, [sp, #8]
 8001950:	2300      	movs	r3, #0
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	2300      	movs	r3, #0
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800195c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001960:	2180      	movs	r1, #128	; 0x80
 8001962:	4811      	ldr	r0, [pc, #68]	; (80019a8 <select_num+0x384>)
 8001964:	f7ff fe1a 	bl	800159c <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, ON, ON);
 8001968:	2300      	movs	r3, #0
 800196a:	9302      	str	r3, [sp, #8]
 800196c:	2300      	movs	r3, #0
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	2300      	movs	r3, #0
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800197c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001980:	4809      	ldr	r0, [pc, #36]	; (80019a8 <select_num+0x384>)
 8001982:	f7ff fe0b 	bl	800159c <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, ON, ON, ON);
 8001986:	2300      	movs	r3, #0
 8001988:	9302      	str	r3, [sp, #8]
 800198a:	2300      	movs	r3, #0
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	2300      	movs	r3, #0
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001996:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800199a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800199e:	4802      	ldr	r0, [pc, #8]	; (80019a8 <select_num+0x384>)
 80019a0:	f7ff fdfc 	bl	800159c <setColor>
			break;
 80019a4:	e221      	b.n	8001dea <select_num+0x7c6>
 80019a6:	bf00      	nop
 80019a8:	40010c00 	.word	0x40010c00
		case 9:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, ON, ON);
 80019ac:	2300      	movs	r3, #0
 80019ae:	9302      	str	r3, [sp, #8]
 80019b0:	2300      	movs	r3, #0
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	2300      	movs	r3, #0
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c0:	2180      	movs	r1, #128	; 0x80
 80019c2:	48bc      	ldr	r0, [pc, #752]	; (8001cb4 <select_num+0x690>)
 80019c4:	f7ff fdea 	bl	800159c <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, OFF, ON);
 80019c8:	2300      	movs	r3, #0
 80019ca:	9302      	str	r3, [sp, #8]
 80019cc:	2301      	movs	r3, #1
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	2300      	movs	r3, #0
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019e0:	48b4      	ldr	r0, [pc, #720]	; (8001cb4 <select_num+0x690>)
 80019e2:	f7ff fddb 	bl	800159c <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, OFF, ON, ON);
 80019e6:	2300      	movs	r3, #0
 80019e8:	9302      	str	r3, [sp, #8]
 80019ea:	2300      	movs	r3, #0
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	2301      	movs	r3, #1
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019fe:	48ad      	ldr	r0, [pc, #692]	; (8001cb4 <select_num+0x690>)
 8001a00:	f7ff fdcc 	bl	800159c <setColor>
			break;
 8001a04:	e1f1      	b.n	8001dea <select_num+0x7c6>
		case 11: //F
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, OFF, OFF);
 8001a06:	2301      	movs	r3, #1
 8001a08:	9302      	str	r3, [sp, #8]
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a1a:	2180      	movs	r1, #128	; 0x80
 8001a1c:	48a5      	ldr	r0, [pc, #660]	; (8001cb4 <select_num+0x690>)
 8001a1e:	f7ff fdbd 	bl	800159c <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, OFF, ON, ON);
 8001a22:	2300      	movs	r3, #0
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2300      	movs	r3, #0
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a3a:	489e      	ldr	r0, [pc, #632]	; (8001cb4 <select_num+0x690>)
 8001a3c:	f7ff fdae 	bl	800159c <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, ON, ON, ON);
 8001a40:	2300      	movs	r3, #0
 8001a42:	9302      	str	r3, [sp, #8]
 8001a44:	2300      	movs	r3, #0
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a58:	4896      	ldr	r0, [pc, #600]	; (8001cb4 <select_num+0x690>)
 8001a5a:	f7ff fd9f 	bl	800159c <setColor>
			break;
 8001a5e:	e1c4      	b.n	8001dea <select_num+0x7c6>
		case 12: //C
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, OFF, OFF);
 8001a60:	2301      	movs	r3, #1
 8001a62:	9302      	str	r3, [sp, #8]
 8001a64:	2301      	movs	r3, #1
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a74:	2180      	movs	r1, #128	; 0x80
 8001a76:	488f      	ldr	r0, [pc, #572]	; (8001cb4 <select_num+0x690>)
 8001a78:	f7ff fd90 	bl	800159c <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, ON, ON);
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9302      	str	r3, [sp, #8]
 8001a80:	2300      	movs	r3, #0
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	2300      	movs	r3, #0
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a94:	4887      	ldr	r0, [pc, #540]	; (8001cb4 <select_num+0x690>)
 8001a96:	f7ff fd81 	bl	800159c <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, ON, ON, OFF);
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	9302      	str	r3, [sp, #8]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aaa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ab2:	4880      	ldr	r0, [pc, #512]	; (8001cb4 <select_num+0x690>)
 8001ab4:	f7ff fd72 	bl	800159c <setColor>
			break;
 8001ab8:	e197      	b.n	8001dea <select_num+0x7c6>
		default:
			break;
	}
}
else if (group == 'B'){
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	2b42      	cmp	r3, #66	; 0x42
 8001abe:	f040 8191 	bne.w	8001de4 <select_num+0x7c0>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2b09      	cmp	r3, #9
 8001ac6:	f200 818f 	bhi.w	8001de8 <select_num+0x7c4>
 8001aca:	a201      	add	r2, pc, #4	; (adr r2, 8001ad0 <select_num+0x4ac>)
 8001acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad0:	08001af9 	.word	0x08001af9
 8001ad4:	08001b43 	.word	0x08001b43
 8001ad8:	08001b8d 	.word	0x08001b8d
 8001adc:	08001bd7 	.word	0x08001bd7
 8001ae0:	08001c21 	.word	0x08001c21
 8001ae4:	08001c6b 	.word	0x08001c6b
 8001ae8:	08001cb9 	.word	0x08001cb9
 8001aec:	08001d03 	.word	0x08001d03
 8001af0:	08001d4d 	.word	0x08001d4d
 8001af4:	08001d97 	.word	0x08001d97
	switch (num) {
			case 0:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, ON, ON);
 8001af8:	2300      	movs	r3, #0
 8001afa:	9302      	str	r3, [sp, #8]
 8001afc:	2300      	movs	r3, #0
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	2300      	movs	r3, #0
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2304      	movs	r3, #4
 8001b06:	2202      	movs	r2, #2
 8001b08:	2101      	movs	r1, #1
 8001b0a:	486a      	ldr	r0, [pc, #424]	; (8001cb4 <select_num+0x690>)
 8001b0c:	f7ff fd46 	bl	800159c <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, ON, ON, ON);
 8001b10:	2300      	movs	r3, #0
 8001b12:	9302      	str	r3, [sp, #8]
 8001b14:	2300      	movs	r3, #0
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2320      	movs	r3, #32
 8001b1e:	2210      	movs	r2, #16
 8001b20:	2108      	movs	r1, #8
 8001b22:	4864      	ldr	r0, [pc, #400]	; (8001cb4 <select_num+0x690>)
 8001b24:	f7ff fd3a 	bl	800159c <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, ON, ON, OFF);
 8001b28:	2301      	movs	r3, #1
 8001b2a:	9302      	str	r3, [sp, #8]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	2300      	movs	r3, #0
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2340      	movs	r3, #64	; 0x40
 8001b36:	2220      	movs	r2, #32
 8001b38:	2110      	movs	r1, #16
 8001b3a:	485e      	ldr	r0, [pc, #376]	; (8001cb4 <select_num+0x690>)
 8001b3c:	f7ff fd2e 	bl	800159c <setColor>
				break;
 8001b40:	e153      	b.n	8001dea <select_num+0x7c6>
			case 1:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, OFF, ON, ON);
 8001b42:	2300      	movs	r3, #0
 8001b44:	9302      	str	r3, [sp, #8]
 8001b46:	2300      	movs	r3, #0
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2304      	movs	r3, #4
 8001b50:	2202      	movs	r2, #2
 8001b52:	2101      	movs	r1, #1
 8001b54:	4857      	ldr	r0, [pc, #348]	; (8001cb4 <select_num+0x690>)
 8001b56:	f7ff fd21 	bl	800159c <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, OFF, OFF, OFF);
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	9302      	str	r3, [sp, #8]
 8001b5e:	2301      	movs	r3, #1
 8001b60:	9301      	str	r3, [sp, #4]
 8001b62:	2301      	movs	r3, #1
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	2320      	movs	r3, #32
 8001b68:	2210      	movs	r2, #16
 8001b6a:	2108      	movs	r1, #8
 8001b6c:	4851      	ldr	r0, [pc, #324]	; (8001cb4 <select_num+0x690>)
 8001b6e:	f7ff fd15 	bl	800159c <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, OFF, OFF, OFF);
 8001b72:	2301      	movs	r3, #1
 8001b74:	9302      	str	r3, [sp, #8]
 8001b76:	2301      	movs	r3, #1
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2340      	movs	r3, #64	; 0x40
 8001b80:	2220      	movs	r2, #32
 8001b82:	2110      	movs	r1, #16
 8001b84:	484b      	ldr	r0, [pc, #300]	; (8001cb4 <select_num+0x690>)
 8001b86:	f7ff fd09 	bl	800159c <setColor>
				break;
 8001b8a:	e12e      	b.n	8001dea <select_num+0x7c6>
			case 2:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, ON, OFF);
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	9302      	str	r3, [sp, #8]
 8001b90:	2300      	movs	r3, #0
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	2300      	movs	r3, #0
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2304      	movs	r3, #4
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4845      	ldr	r0, [pc, #276]	; (8001cb4 <select_num+0x690>)
 8001ba0:	f7ff fcfc 	bl	800159c <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, ON, ON, OFF);
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	9302      	str	r3, [sp, #8]
 8001ba8:	2300      	movs	r3, #0
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	2300      	movs	r3, #0
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2320      	movs	r3, #32
 8001bb2:	2210      	movs	r2, #16
 8001bb4:	2108      	movs	r1, #8
 8001bb6:	483f      	ldr	r0, [pc, #252]	; (8001cb4 <select_num+0x690>)
 8001bb8:	f7ff fcf0 	bl	800159c <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, ON, OFF, ON);
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	9302      	str	r3, [sp, #8]
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	9301      	str	r3, [sp, #4]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	2340      	movs	r3, #64	; 0x40
 8001bca:	2220      	movs	r2, #32
 8001bcc:	2110      	movs	r1, #16
 8001bce:	4839      	ldr	r0, [pc, #228]	; (8001cb4 <select_num+0x690>)
 8001bd0:	f7ff fce4 	bl	800159c <setColor>
				break;
 8001bd4:	e109      	b.n	8001dea <select_num+0x7c6>
			case 3:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, ON, ON);
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	9302      	str	r3, [sp, #8]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	9301      	str	r3, [sp, #4]
 8001bde:	2300      	movs	r3, #0
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	2304      	movs	r3, #4
 8001be4:	2202      	movs	r2, #2
 8001be6:	2101      	movs	r1, #1
 8001be8:	4832      	ldr	r0, [pc, #200]	; (8001cb4 <select_num+0x690>)
 8001bea:	f7ff fcd7 	bl	800159c <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, ON, OFF, OFF);
 8001bee:	2301      	movs	r3, #1
 8001bf0:	9302      	str	r3, [sp, #8]
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2320      	movs	r3, #32
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	2108      	movs	r1, #8
 8001c00:	482c      	ldr	r0, [pc, #176]	; (8001cb4 <select_num+0x690>)
 8001c02:	f7ff fccb 	bl	800159c <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, OFF, OFF, ON);
 8001c06:	2300      	movs	r3, #0
 8001c08:	9302      	str	r3, [sp, #8]
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	9301      	str	r3, [sp, #4]
 8001c0e:	2301      	movs	r3, #1
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	2340      	movs	r3, #64	; 0x40
 8001c14:	2220      	movs	r2, #32
 8001c16:	2110      	movs	r1, #16
 8001c18:	4826      	ldr	r0, [pc, #152]	; (8001cb4 <select_num+0x690>)
 8001c1a:	f7ff fcbf 	bl	800159c <setColor>
				break;
 8001c1e:	e0e4      	b.n	8001dea <select_num+0x7c6>
			case 4:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, OFF, ON, ON);
 8001c20:	2300      	movs	r3, #0
 8001c22:	9302      	str	r3, [sp, #8]
 8001c24:	2300      	movs	r3, #0
 8001c26:	9301      	str	r3, [sp, #4]
 8001c28:	2301      	movs	r3, #1
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	2202      	movs	r2, #2
 8001c30:	2101      	movs	r1, #1
 8001c32:	4820      	ldr	r0, [pc, #128]	; (8001cb4 <select_num+0x690>)
 8001c34:	f7ff fcb2 	bl	800159c <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, OFF, OFF, ON);
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9302      	str	r3, [sp, #8]
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	9301      	str	r3, [sp, #4]
 8001c40:	2301      	movs	r3, #1
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	2320      	movs	r3, #32
 8001c46:	2210      	movs	r2, #16
 8001c48:	2108      	movs	r1, #8
 8001c4a:	481a      	ldr	r0, [pc, #104]	; (8001cb4 <select_num+0x690>)
 8001c4c:	f7ff fca6 	bl	800159c <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, OFF, ON, ON);
 8001c50:	2300      	movs	r3, #0
 8001c52:	9302      	str	r3, [sp, #8]
 8001c54:	2300      	movs	r3, #0
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	2301      	movs	r3, #1
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2340      	movs	r3, #64	; 0x40
 8001c5e:	2220      	movs	r2, #32
 8001c60:	2110      	movs	r1, #16
 8001c62:	4814      	ldr	r0, [pc, #80]	; (8001cb4 <select_num+0x690>)
 8001c64:	f7ff fc9a 	bl	800159c <setColor>
				break;
 8001c68:	e0bf      	b.n	8001dea <select_num+0x7c6>
			case 5:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, OFF, ON);
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	9302      	str	r3, [sp, #8]
 8001c6e:	2301      	movs	r3, #1
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	2300      	movs	r3, #0
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	2304      	movs	r3, #4
 8001c78:	2202      	movs	r2, #2
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <select_num+0x690>)
 8001c7e:	f7ff fc8d 	bl	800159c <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, ON, OFF, ON);
 8001c82:	2300      	movs	r3, #0
 8001c84:	9302      	str	r3, [sp, #8]
 8001c86:	2301      	movs	r3, #1
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2320      	movs	r3, #32
 8001c90:	2210      	movs	r2, #16
 8001c92:	2108      	movs	r1, #8
 8001c94:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <select_num+0x690>)
 8001c96:	f7ff fc81 	bl	800159c <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, OFF, ON, ON);
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	9302      	str	r3, [sp, #8]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	9301      	str	r3, [sp, #4]
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2340      	movs	r3, #64	; 0x40
 8001ca8:	2220      	movs	r2, #32
 8001caa:	2110      	movs	r1, #16
 8001cac:	4801      	ldr	r0, [pc, #4]	; (8001cb4 <select_num+0x690>)
 8001cae:	f7ff fc75 	bl	800159c <setColor>
				break;
 8001cb2:	e09a      	b.n	8001dea <select_num+0x7c6>
 8001cb4:	40010c00 	.word	0x40010c00
			case 6:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, OFF, ON);
 8001cb8:	2300      	movs	r3, #0
 8001cba:	9302      	str	r3, [sp, #8]
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	2101      	movs	r1, #1
 8001cca:	484a      	ldr	r0, [pc, #296]	; (8001df4 <select_num+0x7d0>)
 8001ccc:	f7ff fc66 	bl	800159c <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, ON, ON, ON);
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	9302      	str	r3, [sp, #8]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2320      	movs	r3, #32
 8001cde:	2210      	movs	r2, #16
 8001ce0:	2108      	movs	r1, #8
 8001ce2:	4844      	ldr	r0, [pc, #272]	; (8001df4 <select_num+0x7d0>)
 8001ce4:	f7ff fc5a 	bl	800159c <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, ON, ON, ON);
 8001ce8:	2300      	movs	r3, #0
 8001cea:	9302      	str	r3, [sp, #8]
 8001cec:	2300      	movs	r3, #0
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2340      	movs	r3, #64	; 0x40
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	2110      	movs	r1, #16
 8001cfa:	483e      	ldr	r0, [pc, #248]	; (8001df4 <select_num+0x7d0>)
 8001cfc:	f7ff fc4e 	bl	800159c <setColor>
				break;
 8001d00:	e073      	b.n	8001dea <select_num+0x7c6>
			case 7:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, ON, ON);
 8001d02:	2300      	movs	r3, #0
 8001d04:	9302      	str	r3, [sp, #8]
 8001d06:	2300      	movs	r3, #0
 8001d08:	9301      	str	r3, [sp, #4]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2304      	movs	r3, #4
 8001d10:	2202      	movs	r2, #2
 8001d12:	2101      	movs	r1, #1
 8001d14:	4837      	ldr	r0, [pc, #220]	; (8001df4 <select_num+0x7d0>)
 8001d16:	f7ff fc41 	bl	800159c <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, OFF, OFF, OFF);
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	9302      	str	r3, [sp, #8]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	2301      	movs	r3, #1
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	2320      	movs	r3, #32
 8001d28:	2210      	movs	r2, #16
 8001d2a:	2108      	movs	r1, #8
 8001d2c:	4831      	ldr	r0, [pc, #196]	; (8001df4 <select_num+0x7d0>)
 8001d2e:	f7ff fc35 	bl	800159c <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, OFF, OFF, OFF);
 8001d32:	2301      	movs	r3, #1
 8001d34:	9302      	str	r3, [sp, #8]
 8001d36:	2301      	movs	r3, #1
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2340      	movs	r3, #64	; 0x40
 8001d40:	2220      	movs	r2, #32
 8001d42:	2110      	movs	r1, #16
 8001d44:	482b      	ldr	r0, [pc, #172]	; (8001df4 <select_num+0x7d0>)
 8001d46:	f7ff fc29 	bl	800159c <setColor>
				break;
 8001d4a:	e04e      	b.n	8001dea <select_num+0x7c6>
			case 8:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, ON, ON);
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	9302      	str	r3, [sp, #8]
 8001d50:	2300      	movs	r3, #0
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	2300      	movs	r3, #0
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2304      	movs	r3, #4
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	4825      	ldr	r0, [pc, #148]	; (8001df4 <select_num+0x7d0>)
 8001d60:	f7ff fc1c 	bl	800159c <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, ON, ON, ON);
 8001d64:	2300      	movs	r3, #0
 8001d66:	9302      	str	r3, [sp, #8]
 8001d68:	2300      	movs	r3, #0
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	2320      	movs	r3, #32
 8001d72:	2210      	movs	r2, #16
 8001d74:	2108      	movs	r1, #8
 8001d76:	481f      	ldr	r0, [pc, #124]	; (8001df4 <select_num+0x7d0>)
 8001d78:	f7ff fc10 	bl	800159c <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, ON, ON, ON);
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	9302      	str	r3, [sp, #8]
 8001d80:	2300      	movs	r3, #0
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	2300      	movs	r3, #0
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2340      	movs	r3, #64	; 0x40
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	2110      	movs	r1, #16
 8001d8e:	4819      	ldr	r0, [pc, #100]	; (8001df4 <select_num+0x7d0>)
 8001d90:	f7ff fc04 	bl	800159c <setColor>
				break;
 8001d94:	e029      	b.n	8001dea <select_num+0x7c6>
			case 9:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, ON, ON);
 8001d96:	2300      	movs	r3, #0
 8001d98:	9302      	str	r3, [sp, #8]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2304      	movs	r3, #4
 8001da4:	2202      	movs	r2, #2
 8001da6:	2101      	movs	r1, #1
 8001da8:	4812      	ldr	r0, [pc, #72]	; (8001df4 <select_num+0x7d0>)
 8001daa:	f7ff fbf7 	bl	800159c <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, ON, OFF, ON);
 8001dae:	2300      	movs	r3, #0
 8001db0:	9302      	str	r3, [sp, #8]
 8001db2:	2301      	movs	r3, #1
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	2300      	movs	r3, #0
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	2320      	movs	r3, #32
 8001dbc:	2210      	movs	r2, #16
 8001dbe:	2108      	movs	r1, #8
 8001dc0:	480c      	ldr	r0, [pc, #48]	; (8001df4 <select_num+0x7d0>)
 8001dc2:	f7ff fbeb 	bl	800159c <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, OFF, ON, ON);
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	9302      	str	r3, [sp, #8]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	9301      	str	r3, [sp, #4]
 8001dce:	2301      	movs	r3, #1
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	2340      	movs	r3, #64	; 0x40
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	2110      	movs	r1, #16
 8001dd8:	4806      	ldr	r0, [pc, #24]	; (8001df4 <select_num+0x7d0>)
 8001dda:	f7ff fbdf 	bl	800159c <setColor>
				break;
 8001dde:	e004      	b.n	8001dea <select_num+0x7c6>
			break;
 8001de0:	bf00      	nop
 8001de2:	e002      	b.n	8001dea <select_num+0x7c6>
			default:
				break;
		}
}
 8001de4:	bf00      	nop
 8001de6:	e000      	b.n	8001dea <select_num+0x7c6>
				break;
 8001de8:	bf00      	nop
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40010c00 	.word	0x40010c00

08001df8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001df8:	f7ff fbca 	bl	8001590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dfc:	480b      	ldr	r0, [pc, #44]	; (8001e2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dfe:	490c      	ldr	r1, [pc, #48]	; (8001e30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e00:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e04:	e002      	b.n	8001e0c <LoopCopyDataInit>

08001e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0a:	3304      	adds	r3, #4

08001e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e10:	d3f9      	bcc.n	8001e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e12:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e14:	4c09      	ldr	r4, [pc, #36]	; (8001e3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e18:	e001      	b.n	8001e1e <LoopFillZerobss>

08001e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e1c:	3204      	adds	r2, #4

08001e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e20:	d3fb      	bcc.n	8001e1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e22:	f001 faf9 	bl	8003418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e26:	f7ff f951 	bl	80010cc <main>
  bx lr
 8001e2a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e30:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001e34:	080034b4 	.word	0x080034b4
  ldr r2, =_sbss
 8001e38:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001e3c:	200000fc 	.word	0x200000fc

08001e40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e40:	e7fe      	b.n	8001e40 <ADC1_2_IRQHandler>
	...

08001e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <HAL_Init+0x28>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a07      	ldr	r2, [pc, #28]	; (8001e6c <HAL_Init+0x28>)
 8001e4e:	f043 0310 	orr.w	r3, r3, #16
 8001e52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e54:	2003      	movs	r0, #3
 8001e56:	f000 f923 	bl	80020a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e5a:	200f      	movs	r0, #15
 8001e5c:	f000 f808 	bl	8001e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e60:	f7ff fb0e 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40022000 	.word	0x40022000

08001e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_InitTick+0x54>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_InitTick+0x58>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	4619      	mov	r1, r3
 8001e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 f93b 	bl	800210a <HAL_SYSTICK_Config>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00e      	b.n	8001ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b0f      	cmp	r3, #15
 8001ea2:	d80a      	bhi.n	8001eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eac:	f000 f903 	bl	80020b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb0:	4a06      	ldr	r2, [pc, #24]	; (8001ecc <HAL_InitTick+0x5c>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e000      	b.n	8001ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000054 	.word	0x20000054
 8001ec8:	2000005c 	.word	0x2000005c
 8001ecc:	20000058 	.word	0x20000058

08001ed0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_IncTick+0x1c>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <HAL_IncTick+0x20>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	4a03      	ldr	r2, [pc, #12]	; (8001ef0 <HAL_IncTick+0x20>)
 8001ee2:	6013      	str	r3, [r2, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	2000005c 	.word	0x2000005c
 8001ef0:	200000f8 	.word	0x200000f8

08001ef4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef8:	4b02      	ldr	r3, [pc, #8]	; (8001f04 <HAL_GetTick+0x10>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	200000f8 	.word	0x200000f8

08001f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f24:	4013      	ands	r3, r2
 8001f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3a:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	60d3      	str	r3, [r2, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f54:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <__NVIC_GetPriorityGrouping+0x18>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	f003 0307 	and.w	r3, r3, #7
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	db0b      	blt.n	8001f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	f003 021f 	and.w	r2, r3, #31
 8001f84:	4906      	ldr	r1, [pc, #24]	; (8001fa0 <__NVIC_EnableIRQ+0x34>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	e000e100 	.word	0xe000e100

08001fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db0a      	blt.n	8001fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	490c      	ldr	r1, [pc, #48]	; (8001ff0 <__NVIC_SetPriority+0x4c>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fcc:	e00a      	b.n	8001fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4908      	ldr	r1, [pc, #32]	; (8001ff4 <__NVIC_SetPriority+0x50>)
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	3b04      	subs	r3, #4
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	761a      	strb	r2, [r3, #24]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f1c3 0307 	rsb	r3, r3, #7
 8002012:	2b04      	cmp	r3, #4
 8002014:	bf28      	it	cs
 8002016:	2304      	movcs	r3, #4
 8002018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3304      	adds	r3, #4
 800201e:	2b06      	cmp	r3, #6
 8002020:	d902      	bls.n	8002028 <NVIC_EncodePriority+0x30>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3b03      	subs	r3, #3
 8002026:	e000      	b.n	800202a <NVIC_EncodePriority+0x32>
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	f04f 32ff 	mov.w	r2, #4294967295
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	401a      	ands	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002040:	f04f 31ff 	mov.w	r1, #4294967295
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43d9      	mvns	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	4313      	orrs	r3, r2
         );
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	; 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800206c:	d301      	bcc.n	8002072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206e:	2301      	movs	r3, #1
 8002070:	e00f      	b.n	8002092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <SysTick_Config+0x40>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207a:	210f      	movs	r1, #15
 800207c:	f04f 30ff 	mov.w	r0, #4294967295
 8002080:	f7ff ff90 	bl	8001fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <SysTick_Config+0x40>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208a:	4b04      	ldr	r3, [pc, #16]	; (800209c <SysTick_Config+0x40>)
 800208c:	2207      	movs	r2, #7
 800208e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	e000e010 	.word	0xe000e010

080020a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ff2d 	bl	8001f08 <__NVIC_SetPriorityGrouping>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c8:	f7ff ff42 	bl	8001f50 <__NVIC_GetPriorityGrouping>
 80020cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	6978      	ldr	r0, [r7, #20]
 80020d4:	f7ff ff90 	bl	8001ff8 <NVIC_EncodePriority>
 80020d8:	4602      	mov	r2, r0
 80020da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff5f 	bl	8001fa4 <__NVIC_SetPriority>
}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	4603      	mov	r3, r0
 80020f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff35 	bl	8001f6c <__NVIC_EnableIRQ>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffa2 	bl	800205c <SysTick_Config>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002124:	b480      	push	{r7}
 8002126:	b08b      	sub	sp, #44	; 0x2c
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800212e:	2300      	movs	r3, #0
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002132:	2300      	movs	r3, #0
 8002134:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002136:	e148      	b.n	80023ca <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002138:	2201      	movs	r2, #1
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	429a      	cmp	r2, r3
 8002152:	f040 8137 	bne.w	80023c4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4aa3      	ldr	r2, [pc, #652]	; (80023e8 <HAL_GPIO_Init+0x2c4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d05e      	beq.n	800221e <HAL_GPIO_Init+0xfa>
 8002160:	4aa1      	ldr	r2, [pc, #644]	; (80023e8 <HAL_GPIO_Init+0x2c4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d875      	bhi.n	8002252 <HAL_GPIO_Init+0x12e>
 8002166:	4aa1      	ldr	r2, [pc, #644]	; (80023ec <HAL_GPIO_Init+0x2c8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d058      	beq.n	800221e <HAL_GPIO_Init+0xfa>
 800216c:	4a9f      	ldr	r2, [pc, #636]	; (80023ec <HAL_GPIO_Init+0x2c8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d86f      	bhi.n	8002252 <HAL_GPIO_Init+0x12e>
 8002172:	4a9f      	ldr	r2, [pc, #636]	; (80023f0 <HAL_GPIO_Init+0x2cc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d052      	beq.n	800221e <HAL_GPIO_Init+0xfa>
 8002178:	4a9d      	ldr	r2, [pc, #628]	; (80023f0 <HAL_GPIO_Init+0x2cc>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d869      	bhi.n	8002252 <HAL_GPIO_Init+0x12e>
 800217e:	4a9d      	ldr	r2, [pc, #628]	; (80023f4 <HAL_GPIO_Init+0x2d0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d04c      	beq.n	800221e <HAL_GPIO_Init+0xfa>
 8002184:	4a9b      	ldr	r2, [pc, #620]	; (80023f4 <HAL_GPIO_Init+0x2d0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d863      	bhi.n	8002252 <HAL_GPIO_Init+0x12e>
 800218a:	4a9b      	ldr	r2, [pc, #620]	; (80023f8 <HAL_GPIO_Init+0x2d4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d046      	beq.n	800221e <HAL_GPIO_Init+0xfa>
 8002190:	4a99      	ldr	r2, [pc, #612]	; (80023f8 <HAL_GPIO_Init+0x2d4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d85d      	bhi.n	8002252 <HAL_GPIO_Init+0x12e>
 8002196:	2b12      	cmp	r3, #18
 8002198:	d82a      	bhi.n	80021f0 <HAL_GPIO_Init+0xcc>
 800219a:	2b12      	cmp	r3, #18
 800219c:	d859      	bhi.n	8002252 <HAL_GPIO_Init+0x12e>
 800219e:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <HAL_GPIO_Init+0x80>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	0800221f 	.word	0x0800221f
 80021a8:	080021f9 	.word	0x080021f9
 80021ac:	0800220b 	.word	0x0800220b
 80021b0:	0800224d 	.word	0x0800224d
 80021b4:	08002253 	.word	0x08002253
 80021b8:	08002253 	.word	0x08002253
 80021bc:	08002253 	.word	0x08002253
 80021c0:	08002253 	.word	0x08002253
 80021c4:	08002253 	.word	0x08002253
 80021c8:	08002253 	.word	0x08002253
 80021cc:	08002253 	.word	0x08002253
 80021d0:	08002253 	.word	0x08002253
 80021d4:	08002253 	.word	0x08002253
 80021d8:	08002253 	.word	0x08002253
 80021dc:	08002253 	.word	0x08002253
 80021e0:	08002253 	.word	0x08002253
 80021e4:	08002253 	.word	0x08002253
 80021e8:	08002201 	.word	0x08002201
 80021ec:	08002215 	.word	0x08002215
 80021f0:	4a82      	ldr	r2, [pc, #520]	; (80023fc <HAL_GPIO_Init+0x2d8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d013      	beq.n	800221e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021f6:	e02c      	b.n	8002252 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	623b      	str	r3, [r7, #32]
          break;
 80021fe:	e029      	b.n	8002254 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	3304      	adds	r3, #4
 8002206:	623b      	str	r3, [r7, #32]
          break;
 8002208:	e024      	b.n	8002254 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	3308      	adds	r3, #8
 8002210:	623b      	str	r3, [r7, #32]
          break;
 8002212:	e01f      	b.n	8002254 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	330c      	adds	r3, #12
 800221a:	623b      	str	r3, [r7, #32]
          break;
 800221c:	e01a      	b.n	8002254 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d102      	bne.n	800222c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002226:	2304      	movs	r3, #4
 8002228:	623b      	str	r3, [r7, #32]
          break;
 800222a:	e013      	b.n	8002254 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d105      	bne.n	8002240 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002234:	2308      	movs	r3, #8
 8002236:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	611a      	str	r2, [r3, #16]
          break;
 800223e:	e009      	b.n	8002254 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002240:	2308      	movs	r3, #8
 8002242:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69fa      	ldr	r2, [r7, #28]
 8002248:	615a      	str	r2, [r3, #20]
          break;
 800224a:	e003      	b.n	8002254 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800224c:	2300      	movs	r3, #0
 800224e:	623b      	str	r3, [r7, #32]
          break;
 8002250:	e000      	b.n	8002254 <HAL_GPIO_Init+0x130>
          break;
 8002252:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	2bff      	cmp	r3, #255	; 0xff
 8002258:	d801      	bhi.n	800225e <HAL_GPIO_Init+0x13a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	e001      	b.n	8002262 <HAL_GPIO_Init+0x13e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3304      	adds	r3, #4
 8002262:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	2bff      	cmp	r3, #255	; 0xff
 8002268:	d802      	bhi.n	8002270 <HAL_GPIO_Init+0x14c>
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	e002      	b.n	8002276 <HAL_GPIO_Init+0x152>
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	3b08      	subs	r3, #8
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	210f      	movs	r1, #15
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	fa01 f303 	lsl.w	r3, r1, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	401a      	ands	r2, r3
 8002288:	6a39      	ldr	r1, [r7, #32]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	431a      	orrs	r2, r3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 8090 	beq.w	80023c4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022a4:	4b56      	ldr	r3, [pc, #344]	; (8002400 <HAL_GPIO_Init+0x2dc>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	4a55      	ldr	r2, [pc, #340]	; (8002400 <HAL_GPIO_Init+0x2dc>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6193      	str	r3, [r2, #24]
 80022b0:	4b53      	ldr	r3, [pc, #332]	; (8002400 <HAL_GPIO_Init+0x2dc>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022bc:	4a51      	ldr	r2, [pc, #324]	; (8002404 <HAL_GPIO_Init+0x2e0>)
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	089b      	lsrs	r3, r3, #2
 80022c2:	3302      	adds	r3, #2
 80022c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	220f      	movs	r2, #15
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4013      	ands	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a49      	ldr	r2, [pc, #292]	; (8002408 <HAL_GPIO_Init+0x2e4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d00d      	beq.n	8002304 <HAL_GPIO_Init+0x1e0>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a48      	ldr	r2, [pc, #288]	; (800240c <HAL_GPIO_Init+0x2e8>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d007      	beq.n	8002300 <HAL_GPIO_Init+0x1dc>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a47      	ldr	r2, [pc, #284]	; (8002410 <HAL_GPIO_Init+0x2ec>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d101      	bne.n	80022fc <HAL_GPIO_Init+0x1d8>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e004      	b.n	8002306 <HAL_GPIO_Init+0x1e2>
 80022fc:	2303      	movs	r3, #3
 80022fe:	e002      	b.n	8002306 <HAL_GPIO_Init+0x1e2>
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <HAL_GPIO_Init+0x1e2>
 8002304:	2300      	movs	r3, #0
 8002306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002308:	f002 0203 	and.w	r2, r2, #3
 800230c:	0092      	lsls	r2, r2, #2
 800230e:	4093      	lsls	r3, r2
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4313      	orrs	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002316:	493b      	ldr	r1, [pc, #236]	; (8002404 <HAL_GPIO_Init+0x2e0>)
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	089b      	lsrs	r3, r3, #2
 800231c:	3302      	adds	r3, #2
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d006      	beq.n	800233e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002330:	4b38      	ldr	r3, [pc, #224]	; (8002414 <HAL_GPIO_Init+0x2f0>)
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	4937      	ldr	r1, [pc, #220]	; (8002414 <HAL_GPIO_Init+0x2f0>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	608b      	str	r3, [r1, #8]
 800233c:	e006      	b.n	800234c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800233e:	4b35      	ldr	r3, [pc, #212]	; (8002414 <HAL_GPIO_Init+0x2f0>)
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	43db      	mvns	r3, r3
 8002346:	4933      	ldr	r1, [pc, #204]	; (8002414 <HAL_GPIO_Init+0x2f0>)
 8002348:	4013      	ands	r3, r2
 800234a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d006      	beq.n	8002366 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002358:	4b2e      	ldr	r3, [pc, #184]	; (8002414 <HAL_GPIO_Init+0x2f0>)
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	492d      	ldr	r1, [pc, #180]	; (8002414 <HAL_GPIO_Init+0x2f0>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	60cb      	str	r3, [r1, #12]
 8002364:	e006      	b.n	8002374 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002366:	4b2b      	ldr	r3, [pc, #172]	; (8002414 <HAL_GPIO_Init+0x2f0>)
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	43db      	mvns	r3, r3
 800236e:	4929      	ldr	r1, [pc, #164]	; (8002414 <HAL_GPIO_Init+0x2f0>)
 8002370:	4013      	ands	r3, r2
 8002372:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d006      	beq.n	800238e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002380:	4b24      	ldr	r3, [pc, #144]	; (8002414 <HAL_GPIO_Init+0x2f0>)
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	4923      	ldr	r1, [pc, #140]	; (8002414 <HAL_GPIO_Init+0x2f0>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
 800238c:	e006      	b.n	800239c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800238e:	4b21      	ldr	r3, [pc, #132]	; (8002414 <HAL_GPIO_Init+0x2f0>)
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	43db      	mvns	r3, r3
 8002396:	491f      	ldr	r1, [pc, #124]	; (8002414 <HAL_GPIO_Init+0x2f0>)
 8002398:	4013      	ands	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d006      	beq.n	80023b6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023a8:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <HAL_GPIO_Init+0x2f0>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4919      	ldr	r1, [pc, #100]	; (8002414 <HAL_GPIO_Init+0x2f0>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	600b      	str	r3, [r1, #0]
 80023b4:	e006      	b.n	80023c4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023b6:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HAL_GPIO_Init+0x2f0>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	43db      	mvns	r3, r3
 80023be:	4915      	ldr	r1, [pc, #84]	; (8002414 <HAL_GPIO_Init+0x2f0>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	3301      	adds	r3, #1
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	fa22 f303 	lsr.w	r3, r2, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f47f aeaf 	bne.w	8002138 <HAL_GPIO_Init+0x14>
  }
}
 80023da:	bf00      	nop
 80023dc:	bf00      	nop
 80023de:	372c      	adds	r7, #44	; 0x2c
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	10320000 	.word	0x10320000
 80023ec:	10310000 	.word	0x10310000
 80023f0:	10220000 	.word	0x10220000
 80023f4:	10210000 	.word	0x10210000
 80023f8:	10120000 	.word	0x10120000
 80023fc:	10110000 	.word	0x10110000
 8002400:	40021000 	.word	0x40021000
 8002404:	40010000 	.word	0x40010000
 8002408:	40010800 	.word	0x40010800
 800240c:	40010c00 	.word	0x40010c00
 8002410:	40011000 	.word	0x40011000
 8002414:	40010400 	.word	0x40010400

08002418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	887b      	ldrh	r3, [r7, #2]
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	e001      	b.n	800243a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800243a:	7bfb      	ldrb	r3, [r7, #15]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr

08002446 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	460b      	mov	r3, r1
 8002450:	807b      	strh	r3, [r7, #2]
 8002452:	4613      	mov	r3, r2
 8002454:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002456:	787b      	ldrb	r3, [r7, #1]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245c:	887a      	ldrh	r2, [r7, #2]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002462:	e003      	b.n	800246c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002464:	887b      	ldrh	r3, [r7, #2]
 8002466:	041a      	lsls	r2, r3, #16
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	611a      	str	r2, [r3, #16]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr

08002476 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002476:	b480      	push	{r7}
 8002478:	b085      	sub	sp, #20
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002488:	887a      	ldrh	r2, [r7, #2]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4013      	ands	r3, r2
 800248e:	041a      	lsls	r2, r3, #16
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	43d9      	mvns	r1, r3
 8002494:	887b      	ldrh	r3, [r7, #2]
 8002496:	400b      	ands	r3, r1
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	611a      	str	r2, [r3, #16]
}
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e26c      	b.n	8002994 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 8087 	beq.w	80025d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024c8:	4b92      	ldr	r3, [pc, #584]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d00c      	beq.n	80024ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024d4:	4b8f      	ldr	r3, [pc, #572]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d112      	bne.n	8002506 <HAL_RCC_OscConfig+0x5e>
 80024e0:	4b8c      	ldr	r3, [pc, #560]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ec:	d10b      	bne.n	8002506 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ee:	4b89      	ldr	r3, [pc, #548]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d06c      	beq.n	80025d4 <HAL_RCC_OscConfig+0x12c>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d168      	bne.n	80025d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e246      	b.n	8002994 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250e:	d106      	bne.n	800251e <HAL_RCC_OscConfig+0x76>
 8002510:	4b80      	ldr	r3, [pc, #512]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a7f      	ldr	r2, [pc, #508]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	e02e      	b.n	800257c <HAL_RCC_OscConfig+0xd4>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x98>
 8002526:	4b7b      	ldr	r3, [pc, #492]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a7a      	ldr	r2, [pc, #488]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 800252c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b78      	ldr	r3, [pc, #480]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a77      	ldr	r2, [pc, #476]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e01d      	b.n	800257c <HAL_RCC_OscConfig+0xd4>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0xbc>
 800254a:	4b72      	ldr	r3, [pc, #456]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a71      	ldr	r2, [pc, #452]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	4b6f      	ldr	r3, [pc, #444]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a6e      	ldr	r2, [pc, #440]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e00b      	b.n	800257c <HAL_RCC_OscConfig+0xd4>
 8002564:	4b6b      	ldr	r3, [pc, #428]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a6a      	ldr	r2, [pc, #424]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 800256a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	4b68      	ldr	r3, [pc, #416]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a67      	ldr	r2, [pc, #412]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d013      	beq.n	80025ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7ff fcb6 	bl	8001ef4 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800258c:	f7ff fcb2 	bl	8001ef4 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e1fa      	b.n	8002994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	4b5d      	ldr	r3, [pc, #372]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0xe4>
 80025aa:	e014      	b.n	80025d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7ff fca2 	bl	8001ef4 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b4:	f7ff fc9e 	bl	8001ef4 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b64      	cmp	r3, #100	; 0x64
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e1e6      	b.n	8002994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	4b53      	ldr	r3, [pc, #332]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x10c>
 80025d2:	e000      	b.n	80025d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d063      	beq.n	80026aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025e2:	4b4c      	ldr	r3, [pc, #304]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00b      	beq.n	8002606 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025ee:	4b49      	ldr	r3, [pc, #292]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d11c      	bne.n	8002634 <HAL_RCC_OscConfig+0x18c>
 80025fa:	4b46      	ldr	r3, [pc, #280]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d116      	bne.n	8002634 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002606:	4b43      	ldr	r3, [pc, #268]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <HAL_RCC_OscConfig+0x176>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d001      	beq.n	800261e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e1ba      	b.n	8002994 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261e:	4b3d      	ldr	r3, [pc, #244]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4939      	ldr	r1, [pc, #228]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002632:	e03a      	b.n	80026aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d020      	beq.n	800267e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800263c:	4b36      	ldr	r3, [pc, #216]	; (8002718 <HAL_RCC_OscConfig+0x270>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002642:	f7ff fc57 	bl	8001ef4 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800264a:	f7ff fc53 	bl	8001ef4 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e19b      	b.n	8002994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265c:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002668:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4927      	ldr	r1, [pc, #156]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002678:	4313      	orrs	r3, r2
 800267a:	600b      	str	r3, [r1, #0]
 800267c:	e015      	b.n	80026aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267e:	4b26      	ldr	r3, [pc, #152]	; (8002718 <HAL_RCC_OscConfig+0x270>)
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7ff fc36 	bl	8001ef4 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268c:	f7ff fc32 	bl	8001ef4 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e17a      	b.n	8002994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d03a      	beq.n	800272c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d019      	beq.n	80026f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026be:	4b17      	ldr	r3, [pc, #92]	; (800271c <HAL_RCC_OscConfig+0x274>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c4:	f7ff fc16 	bl	8001ef4 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026cc:	f7ff fc12 	bl	8001ef4 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e15a      	b.n	8002994 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026de:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026ea:	2001      	movs	r0, #1
 80026ec:	f000 fa9a 	bl	8002c24 <RCC_Delay>
 80026f0:	e01c      	b.n	800272c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <HAL_RCC_OscConfig+0x274>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f8:	f7ff fbfc 	bl	8001ef4 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fe:	e00f      	b.n	8002720 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002700:	f7ff fbf8 	bl	8001ef4 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d908      	bls.n	8002720 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e140      	b.n	8002994 <HAL_RCC_OscConfig+0x4ec>
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000
 8002718:	42420000 	.word	0x42420000
 800271c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002720:	4b9e      	ldr	r3, [pc, #632]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1e9      	bne.n	8002700 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 80a6 	beq.w	8002886 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273e:	4b97      	ldr	r3, [pc, #604]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10d      	bne.n	8002766 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	4b94      	ldr	r3, [pc, #592]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	4a93      	ldr	r2, [pc, #588]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 8002750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002754:	61d3      	str	r3, [r2, #28]
 8002756:	4b91      	ldr	r3, [pc, #580]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002762:	2301      	movs	r3, #1
 8002764:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002766:	4b8e      	ldr	r3, [pc, #568]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d118      	bne.n	80027a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002772:	4b8b      	ldr	r3, [pc, #556]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a8a      	ldr	r2, [pc, #552]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800277e:	f7ff fbb9 	bl	8001ef4 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002786:	f7ff fbb5 	bl	8001ef4 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b64      	cmp	r3, #100	; 0x64
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e0fd      	b.n	8002994 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002798:	4b81      	ldr	r3, [pc, #516]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d106      	bne.n	80027ba <HAL_RCC_OscConfig+0x312>
 80027ac:	4b7b      	ldr	r3, [pc, #492]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	4a7a      	ldr	r2, [pc, #488]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6213      	str	r3, [r2, #32]
 80027b8:	e02d      	b.n	8002816 <HAL_RCC_OscConfig+0x36e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10c      	bne.n	80027dc <HAL_RCC_OscConfig+0x334>
 80027c2:	4b76      	ldr	r3, [pc, #472]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	4a75      	ldr	r2, [pc, #468]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	6213      	str	r3, [r2, #32]
 80027ce:	4b73      	ldr	r3, [pc, #460]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	4a72      	ldr	r2, [pc, #456]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 80027d4:	f023 0304 	bic.w	r3, r3, #4
 80027d8:	6213      	str	r3, [r2, #32]
 80027da:	e01c      	b.n	8002816 <HAL_RCC_OscConfig+0x36e>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	2b05      	cmp	r3, #5
 80027e2:	d10c      	bne.n	80027fe <HAL_RCC_OscConfig+0x356>
 80027e4:	4b6d      	ldr	r3, [pc, #436]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	4a6c      	ldr	r2, [pc, #432]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 80027ea:	f043 0304 	orr.w	r3, r3, #4
 80027ee:	6213      	str	r3, [r2, #32]
 80027f0:	4b6a      	ldr	r3, [pc, #424]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	4a69      	ldr	r2, [pc, #420]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6213      	str	r3, [r2, #32]
 80027fc:	e00b      	b.n	8002816 <HAL_RCC_OscConfig+0x36e>
 80027fe:	4b67      	ldr	r3, [pc, #412]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4a66      	ldr	r2, [pc, #408]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	6213      	str	r3, [r2, #32]
 800280a:	4b64      	ldr	r3, [pc, #400]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	4a63      	ldr	r2, [pc, #396]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 8002810:	f023 0304 	bic.w	r3, r3, #4
 8002814:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d015      	beq.n	800284a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281e:	f7ff fb69 	bl	8001ef4 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002824:	e00a      	b.n	800283c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002826:	f7ff fb65 	bl	8001ef4 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f241 3288 	movw	r2, #5000	; 0x1388
 8002834:	4293      	cmp	r3, r2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e0ab      	b.n	8002994 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283c:	4b57      	ldr	r3, [pc, #348]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ee      	beq.n	8002826 <HAL_RCC_OscConfig+0x37e>
 8002848:	e014      	b.n	8002874 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284a:	f7ff fb53 	bl	8001ef4 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002850:	e00a      	b.n	8002868 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002852:	f7ff fb4f 	bl	8001ef4 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002860:	4293      	cmp	r3, r2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e095      	b.n	8002994 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002868:	4b4c      	ldr	r3, [pc, #304]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1ee      	bne.n	8002852 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002874:	7dfb      	ldrb	r3, [r7, #23]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d105      	bne.n	8002886 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800287a:	4b48      	ldr	r3, [pc, #288]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	4a47      	ldr	r2, [pc, #284]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 8002880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002884:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 8081 	beq.w	8002992 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002890:	4b42      	ldr	r3, [pc, #264]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 030c 	and.w	r3, r3, #12
 8002898:	2b08      	cmp	r3, #8
 800289a:	d061      	beq.n	8002960 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d146      	bne.n	8002932 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a4:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <HAL_RCC_OscConfig+0x4fc>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7ff fb23 	bl	8001ef4 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b2:	f7ff fb1f 	bl	8001ef4 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e067      	b.n	8002994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c4:	4b35      	ldr	r3, [pc, #212]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f0      	bne.n	80028b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d8:	d108      	bne.n	80028ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028da:	4b30      	ldr	r3, [pc, #192]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	492d      	ldr	r1, [pc, #180]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ec:	4b2b      	ldr	r3, [pc, #172]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a19      	ldr	r1, [r3, #32]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	430b      	orrs	r3, r1
 80028fe:	4927      	ldr	r1, [pc, #156]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002904:	4b27      	ldr	r3, [pc, #156]	; (80029a4 <HAL_RCC_OscConfig+0x4fc>)
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7ff faf3 	bl	8001ef4 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002912:	f7ff faef 	bl	8001ef4 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e037      	b.n	8002994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002924:	4b1d      	ldr	r3, [pc, #116]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x46a>
 8002930:	e02f      	b.n	8002992 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002932:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <HAL_RCC_OscConfig+0x4fc>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7ff fadc 	bl	8001ef4 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002940:	f7ff fad8 	bl	8001ef4 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e020      	b.n	8002994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002952:	4b12      	ldr	r3, [pc, #72]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x498>
 800295e:	e018      	b.n	8002992 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e013      	b.n	8002994 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCC_OscConfig+0x4f4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	429a      	cmp	r2, r3
 800297e:	d106      	bne.n	800298e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298a:	429a      	cmp	r2, r3
 800298c:	d001      	beq.n	8002992 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40021000 	.word	0x40021000
 80029a0:	40007000 	.word	0x40007000
 80029a4:	42420060 	.word	0x42420060

080029a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0d0      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029bc:	4b6a      	ldr	r3, [pc, #424]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d910      	bls.n	80029ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b67      	ldr	r3, [pc, #412]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 0207 	bic.w	r2, r3, #7
 80029d2:	4965      	ldr	r1, [pc, #404]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b63      	ldr	r3, [pc, #396]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0b8      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d020      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a04:	4b59      	ldr	r3, [pc, #356]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4a58      	ldr	r2, [pc, #352]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a1c:	4b53      	ldr	r3, [pc, #332]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4a52      	ldr	r2, [pc, #328]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a28:	4b50      	ldr	r3, [pc, #320]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	494d      	ldr	r1, [pc, #308]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d040      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d107      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	4b47      	ldr	r3, [pc, #284]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d115      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e07f      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a66:	4b41      	ldr	r3, [pc, #260]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e073      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a76:	4b3d      	ldr	r3, [pc, #244]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e06b      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a86:	4b39      	ldr	r3, [pc, #228]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f023 0203 	bic.w	r2, r3, #3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4936      	ldr	r1, [pc, #216]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a98:	f7ff fa2c 	bl	8001ef4 <HAL_GetTick>
 8002a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa0:	f7ff fa28 	bl	8001ef4 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e053      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	4b2d      	ldr	r3, [pc, #180]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 020c 	and.w	r2, r3, #12
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d1eb      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d210      	bcs.n	8002af8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b24      	ldr	r3, [pc, #144]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 0207 	bic.w	r2, r3, #7
 8002ade:	4922      	ldr	r1, [pc, #136]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e032      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b04:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4916      	ldr	r1, [pc, #88]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d009      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b22:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	490e      	ldr	r1, [pc, #56]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b36:	f000 f821 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	490a      	ldr	r1, [pc, #40]	; (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002b48:	5ccb      	ldrb	r3, [r1, r3]
 8002b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4e:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <HAL_RCC_ClockConfig+0x1cc>)
 8002b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_RCC_ClockConfig+0x1d0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff f98a 	bl	8001e70 <HAL_InitTick>

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40022000 	.word	0x40022000
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	08003488 	.word	0x08003488
 8002b74:	20000054 	.word	0x20000054
 8002b78:	20000058 	.word	0x20000058

08002b7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	2300      	movs	r3, #0
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b96:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d002      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0x30>
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d003      	beq.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x36>
 8002baa:	e027      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bae:	613b      	str	r3, [r7, #16]
      break;
 8002bb0:	e027      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	0c9b      	lsrs	r3, r3, #18
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	4a17      	ldr	r2, [pc, #92]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bbc:	5cd3      	ldrb	r3, [r2, r3]
 8002bbe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d010      	beq.n	8002bec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bca:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	0c5b      	lsrs	r3, r3, #17
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	4a11      	ldr	r2, [pc, #68]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bd6:	5cd3      	ldrb	r3, [r2, r3]
 8002bd8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bde:	fb02 f203 	mul.w	r2, r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	e004      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a0c      	ldr	r2, [pc, #48]	; (8002c20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bf0:	fb02 f303 	mul.w	r3, r2, r3
 8002bf4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	613b      	str	r3, [r7, #16]
      break;
 8002bfa:	e002      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bfe:	613b      	str	r3, [r7, #16]
      break;
 8002c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c02:	693b      	ldr	r3, [r7, #16]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	371c      	adds	r7, #28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000
 8002c14:	007a1200 	.word	0x007a1200
 8002c18:	08003498 	.word	0x08003498
 8002c1c:	080034a8 	.word	0x080034a8
 8002c20:	003d0900 	.word	0x003d0900

08002c24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <RCC_Delay+0x34>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <RCC_Delay+0x38>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0a5b      	lsrs	r3, r3, #9
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	fb02 f303 	mul.w	r3, r2, r3
 8002c3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c40:	bf00      	nop
  }
  while (Delay --);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1e5a      	subs	r2, r3, #1
 8002c46:	60fa      	str	r2, [r7, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f9      	bne.n	8002c40 <RCC_Delay+0x1c>
}
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	20000054 	.word	0x20000054
 8002c5c:	10624dd3 	.word	0x10624dd3

08002c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e041      	b.n	8002cf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fe fc2c 	bl	80014e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	f000 fa56 	bl	8003150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d001      	beq.n	8002d18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e035      	b.n	8002d84 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a16      	ldr	r2, [pc, #88]	; (8002d90 <HAL_TIM_Base_Start_IT+0x90>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d009      	beq.n	8002d4e <HAL_TIM_Base_Start_IT+0x4e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d42:	d004      	beq.n	8002d4e <HAL_TIM_Base_Start_IT+0x4e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a12      	ldr	r2, [pc, #72]	; (8002d94 <HAL_TIM_Base_Start_IT+0x94>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d111      	bne.n	8002d72 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b06      	cmp	r3, #6
 8002d5e:	d010      	beq.n	8002d82 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d70:	e007      	b.n	8002d82 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f042 0201 	orr.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40012c00 	.word	0x40012c00
 8002d94:	40000400 	.word	0x40000400

08002d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d020      	beq.n	8002dfc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01b      	beq.n	8002dfc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0202 	mvn.w	r2, #2
 8002dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f998 	bl	8003118 <HAL_TIM_IC_CaptureCallback>
 8002de8:	e005      	b.n	8002df6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f98b 	bl	8003106 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f99a 	bl	800312a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d020      	beq.n	8002e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d01b      	beq.n	8002e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0204 	mvn.w	r2, #4
 8002e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f972 	bl	8003118 <HAL_TIM_IC_CaptureCallback>
 8002e34:	e005      	b.n	8002e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f965 	bl	8003106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f974 	bl	800312a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d020      	beq.n	8002e94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01b      	beq.n	8002e94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0208 	mvn.w	r2, #8
 8002e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2204      	movs	r2, #4
 8002e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f94c 	bl	8003118 <HAL_TIM_IC_CaptureCallback>
 8002e80:	e005      	b.n	8002e8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f93f 	bl	8003106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f94e 	bl	800312a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d020      	beq.n	8002ee0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d01b      	beq.n	8002ee0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0210 	mvn.w	r2, #16
 8002eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2208      	movs	r2, #8
 8002eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f926 	bl	8003118 <HAL_TIM_IC_CaptureCallback>
 8002ecc:	e005      	b.n	8002eda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f919 	bl	8003106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f928 	bl	800312a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00c      	beq.n	8002f04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d007      	beq.n	8002f04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0201 	mvn.w	r2, #1
 8002efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fe f9f0 	bl	80012e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00c      	beq.n	8002f28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fa6f 	bl	8003406 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00c      	beq.n	8002f4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d007      	beq.n	8002f4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f8f8 	bl	800313c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00c      	beq.n	8002f70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d007      	beq.n	8002f70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 0220 	mvn.w	r2, #32
 8002f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 fa42 	bl	80033f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f70:	bf00      	nop
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_TIM_ConfigClockSource+0x1c>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e0b4      	b.n	80030fe <HAL_TIM_ConfigClockSource+0x186>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fcc:	d03e      	beq.n	800304c <HAL_TIM_ConfigClockSource+0xd4>
 8002fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd2:	f200 8087 	bhi.w	80030e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fda:	f000 8086 	beq.w	80030ea <HAL_TIM_ConfigClockSource+0x172>
 8002fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe2:	d87f      	bhi.n	80030e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe4:	2b70      	cmp	r3, #112	; 0x70
 8002fe6:	d01a      	beq.n	800301e <HAL_TIM_ConfigClockSource+0xa6>
 8002fe8:	2b70      	cmp	r3, #112	; 0x70
 8002fea:	d87b      	bhi.n	80030e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fec:	2b60      	cmp	r3, #96	; 0x60
 8002fee:	d050      	beq.n	8003092 <HAL_TIM_ConfigClockSource+0x11a>
 8002ff0:	2b60      	cmp	r3, #96	; 0x60
 8002ff2:	d877      	bhi.n	80030e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff4:	2b50      	cmp	r3, #80	; 0x50
 8002ff6:	d03c      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0xfa>
 8002ff8:	2b50      	cmp	r3, #80	; 0x50
 8002ffa:	d873      	bhi.n	80030e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ffc:	2b40      	cmp	r3, #64	; 0x40
 8002ffe:	d058      	beq.n	80030b2 <HAL_TIM_ConfigClockSource+0x13a>
 8003000:	2b40      	cmp	r3, #64	; 0x40
 8003002:	d86f      	bhi.n	80030e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003004:	2b30      	cmp	r3, #48	; 0x30
 8003006:	d064      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003008:	2b30      	cmp	r3, #48	; 0x30
 800300a:	d86b      	bhi.n	80030e4 <HAL_TIM_ConfigClockSource+0x16c>
 800300c:	2b20      	cmp	r3, #32
 800300e:	d060      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003010:	2b20      	cmp	r3, #32
 8003012:	d867      	bhi.n	80030e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003014:	2b00      	cmp	r3, #0
 8003016:	d05c      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003018:	2b10      	cmp	r3, #16
 800301a:	d05a      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0x15a>
 800301c:	e062      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	6899      	ldr	r1, [r3, #8]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f000 f96a 	bl	8003306 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003040:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	609a      	str	r2, [r3, #8]
      break;
 800304a:	e04f      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6818      	ldr	r0, [r3, #0]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	6899      	ldr	r1, [r3, #8]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f000 f953 	bl	8003306 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800306e:	609a      	str	r2, [r3, #8]
      break;
 8003070:	e03c      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	6859      	ldr	r1, [r3, #4]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	461a      	mov	r2, r3
 8003080:	f000 f8ca 	bl	8003218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2150      	movs	r1, #80	; 0x50
 800308a:	4618      	mov	r0, r3
 800308c:	f000 f921 	bl	80032d2 <TIM_ITRx_SetConfig>
      break;
 8003090:	e02c      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	6859      	ldr	r1, [r3, #4]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	461a      	mov	r2, r3
 80030a0:	f000 f8e8 	bl	8003274 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2160      	movs	r1, #96	; 0x60
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 f911 	bl	80032d2 <TIM_ITRx_SetConfig>
      break;
 80030b0:	e01c      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	6859      	ldr	r1, [r3, #4]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	461a      	mov	r2, r3
 80030c0:	f000 f8aa 	bl	8003218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2140      	movs	r1, #64	; 0x40
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f901 	bl	80032d2 <TIM_ITRx_SetConfig>
      break;
 80030d0:	e00c      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4619      	mov	r1, r3
 80030dc:	4610      	mov	r0, r2
 80030de:	f000 f8f8 	bl	80032d2 <TIM_ITRx_SetConfig>
      break;
 80030e2:	e003      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
      break;
 80030e8:	e000      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr
	...

08003150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a2b      	ldr	r2, [pc, #172]	; (8003210 <TIM_Base_SetConfig+0xc0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d007      	beq.n	8003178 <TIM_Base_SetConfig+0x28>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316e:	d003      	beq.n	8003178 <TIM_Base_SetConfig+0x28>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a28      	ldr	r2, [pc, #160]	; (8003214 <TIM_Base_SetConfig+0xc4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d108      	bne.n	800318a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a20      	ldr	r2, [pc, #128]	; (8003210 <TIM_Base_SetConfig+0xc0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d007      	beq.n	80031a2 <TIM_Base_SetConfig+0x52>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003198:	d003      	beq.n	80031a2 <TIM_Base_SetConfig+0x52>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a1d      	ldr	r2, [pc, #116]	; (8003214 <TIM_Base_SetConfig+0xc4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d108      	bne.n	80031b4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a0d      	ldr	r2, [pc, #52]	; (8003210 <TIM_Base_SetConfig+0xc0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d103      	bne.n	80031e8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f023 0201 	bic.w	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	611a      	str	r2, [r3, #16]
  }
}
 8003206:	bf00      	nop
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr
 8003210:	40012c00 	.word	0x40012c00
 8003214:	40000400 	.word	0x40000400

08003218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	f023 0201 	bic.w	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f023 030a 	bic.w	r3, r3, #10
 8003254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	621a      	str	r2, [r3, #32]
}
 800326a:	bf00      	nop
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	f023 0210 	bic.w	r2, r3, #16
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800329e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	031b      	lsls	r3, r3, #12
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	621a      	str	r2, [r3, #32]
}
 80032c8:	bf00      	nop
 80032ca:	371c      	adds	r7, #28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b085      	sub	sp, #20
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	f043 0307 	orr.w	r3, r3, #7
 80032f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	609a      	str	r2, [r3, #8]
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr

08003306 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003306:	b480      	push	{r7}
 8003308:	b087      	sub	sp, #28
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003320:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	021a      	lsls	r2, r3, #8
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	431a      	orrs	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	4313      	orrs	r3, r2
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	609a      	str	r2, [r3, #8]
}
 800333a:	bf00      	nop
 800333c:	371c      	adds	r7, #28
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003358:	2302      	movs	r3, #2
 800335a:	e041      	b.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a14      	ldr	r2, [pc, #80]	; (80033ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d009      	beq.n	80033b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a8:	d004      	beq.n	80033b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a10      	ldr	r2, [pc, #64]	; (80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d10c      	bne.n	80033ce <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40012c00 	.word	0x40012c00
 80033f0:	40000400 	.word	0x40000400

080033f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr

08003406 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <__libc_init_array>:
 8003418:	b570      	push	{r4, r5, r6, lr}
 800341a:	2600      	movs	r6, #0
 800341c:	4d0c      	ldr	r5, [pc, #48]	; (8003450 <__libc_init_array+0x38>)
 800341e:	4c0d      	ldr	r4, [pc, #52]	; (8003454 <__libc_init_array+0x3c>)
 8003420:	1b64      	subs	r4, r4, r5
 8003422:	10a4      	asrs	r4, r4, #2
 8003424:	42a6      	cmp	r6, r4
 8003426:	d109      	bne.n	800343c <__libc_init_array+0x24>
 8003428:	f000 f822 	bl	8003470 <_init>
 800342c:	2600      	movs	r6, #0
 800342e:	4d0a      	ldr	r5, [pc, #40]	; (8003458 <__libc_init_array+0x40>)
 8003430:	4c0a      	ldr	r4, [pc, #40]	; (800345c <__libc_init_array+0x44>)
 8003432:	1b64      	subs	r4, r4, r5
 8003434:	10a4      	asrs	r4, r4, #2
 8003436:	42a6      	cmp	r6, r4
 8003438:	d105      	bne.n	8003446 <__libc_init_array+0x2e>
 800343a:	bd70      	pop	{r4, r5, r6, pc}
 800343c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003440:	4798      	blx	r3
 8003442:	3601      	adds	r6, #1
 8003444:	e7ee      	b.n	8003424 <__libc_init_array+0xc>
 8003446:	f855 3b04 	ldr.w	r3, [r5], #4
 800344a:	4798      	blx	r3
 800344c:	3601      	adds	r6, #1
 800344e:	e7f2      	b.n	8003436 <__libc_init_array+0x1e>
 8003450:	080034ac 	.word	0x080034ac
 8003454:	080034ac 	.word	0x080034ac
 8003458:	080034ac 	.word	0x080034ac
 800345c:	080034b0 	.word	0x080034b0

08003460 <memset>:
 8003460:	4603      	mov	r3, r0
 8003462:	4402      	add	r2, r0
 8003464:	4293      	cmp	r3, r2
 8003466:	d100      	bne.n	800346a <memset+0xa>
 8003468:	4770      	bx	lr
 800346a:	f803 1b01 	strb.w	r1, [r3], #1
 800346e:	e7f9      	b.n	8003464 <memset+0x4>

08003470 <_init>:
 8003470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003472:	bf00      	nop
 8003474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003476:	bc08      	pop	{r3}
 8003478:	469e      	mov	lr, r3
 800347a:	4770      	bx	lr

0800347c <_fini>:
 800347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347e:	bf00      	nop
 8003480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003482:	bc08      	pop	{r3}
 8003484:	469e      	mov	lr, r3
 8003486:	4770      	bx	lr
